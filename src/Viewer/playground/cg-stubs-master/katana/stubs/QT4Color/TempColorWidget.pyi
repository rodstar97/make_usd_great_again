# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import PyOpenColorIO as OCIO
import PyQt5.QtCore
import PyQt5.QtWidgets
import PyQt5.QtCore as QtCore
import PyQt5.QtGui as QtGui
import PyQt5.QtWidgets as QtWidgets
from typing import ClassVar, Set, Tuple

class TempColorWidget(TempColorWidgetBase, PyQt5.QtWidgets.QWidget):
    resetSignal: ClassVar[PyQt5.QtCore.pyqtSignal] = ...
    valueChanged: ClassVar[PyQt5.QtCore.pyqtSignal] = ...
    def __init__(self, parent, orientation) -> None: ...
    def _getCentralRect(self): ...
    def _updateDisplay(self): ...
    def _valueChanged(self, color, final): ...
    def enterEvent(self, ev): ...
    def isPreselectionActive(self): ...
    def leaveEvent(self, ev): ...
    def mouseMoveEvent(self, ev): ...
    def mousePressEvent(self, ev): ...
    def mouseReleaseEvent(self, ev): ...
    def paintEvent(self, ev): ...
    def reset(self): ...
    def setContentsMargins(self, left, top, right, bottom): ...
    def sizePolicy(self): ...

class TempColorWidgetBase:
    def __init__(self, orientation) -> None: ...
    def _TempColorWidgetBase__colorToWindowPos(self, rgbColor): ...
    def _TempColorWidgetBase__windowPosToColor(self, spotCenterQt, previousRgbColor): ...
    def _doDrag(self, x, y): ...
    def _doPaint(self, p): ...
    def _endDrag(self, x, y): ...
    def _getCentralRect(self): ...
    def _isInDrag(self): ...
    def _updateDisplay(self): ...
    def _valueChanged(self, value, final): ...
    def getLocked(self): ...
    def getRGB(self): ...
    def isPreselectionActive(self): ...
    def minimumSizeHint(self): ...
    def setLocked(self, isLocked): ...
    def setRGB(self, color): ...
    def sizeHint(self): ...
