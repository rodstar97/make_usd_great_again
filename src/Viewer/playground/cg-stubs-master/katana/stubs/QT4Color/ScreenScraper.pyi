# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import QT4Color.ColorPolicy as ColorPolicy
import QT4Color.Globals as Globals
import PyQt5.QtCore
import PyQt5.QtWidgets
import PyQt5.QtCore as QtCore
import PyQt5.QtGui as QtGui
import PyQt5.QtWidgets as QtWidgets
import ResourceFiles as ResourceFiles
from ResourceFiles.IconManager import ResourceManager as ResourceManager
from typing import ClassVar, Set, Tuple

class CursorWidget(PyQt5.QtWidgets.QFrame):
    def __init__(self, *args) -> None: ...
    def paintEvent(self, ev): ...
    def setPixmap(self, pm): ...

class ScreenScraperPushButton(PyQt5.QtWidgets.QPushButton, ScreenScraperQButtonMixin):
    def __init__(self, *args) -> None: ...
    def closeEvent(self, ev): ...
    def hideEvent(self, ev): ...

class ScreenScraperQButtonMixin:
    _ScreenScraperQButtonMixin__DROPPER_ICON: ClassVar[str] = ...
    color: ClassVar[PyQt5.QtCore.pyqtSignal] = ...
    def __init__(self) -> None: ...
    def _ScreenScraperQButtonMixin__dispatchEvent(self): ...
    def _ScreenScraperQButtonMixin__setColor(self, color, final: bool = ...): ...
    def _ScreenScraperQButtonMixin__startSampling(self): ...
    def _ScreenScraperQButtonMixin__stopSampling(self): ...
    def _ScreenScraperQButtonMixin__updateCursor(self): ...
    def doCloseEvent(self, ev): ...
    def doHideEvent(self, ev): ...
    def mouseMoveEvent(self, ev): ...
    def mousePressEvent(self, ev): ...
    def mouseReleaseEvent(self, ev): ...
    def setReadOnly(self, value): ...

class ScreenScraperToolButton(PyQt5.QtWidgets.QToolButton, ScreenScraperQButtonMixin):
    def __init__(self, *args) -> None: ...
    def closeEvent(self, ev): ...
    def hideEvent(self, ev): ...
