# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import QT4FormWidgets as QT4FormWidgets
import QT4FormWidgets.ValuePolicy
import UI4.FormMaster.States as States
from QT4FormWidgets.PythonValuePolicy import PythonValuePolicy as PythonValuePolicy
from _typeshed import Incomplete
from typing import ClassVar, Set, Tuple

class PythonValuePolicy(PythonValuePolicy):
    RESERVED_NAMES: ClassVar[set] = ...
    def __init__(self, name: str, policyData: dict, parent: Incomplete | None = ..., childOrderList: Incomplete | None = ..., childHintDict: Incomplete | None = ..., isEnabled: bool = ...) -> None: ...
    def _PythonValuePolicy__addSettings(self, policy: QT4FormWidgets.ValuePolicy.AbstractValuePolicy, result: dict): ...
    def addChildPolicy(self, policy: QT4FormWidgets.PythonValuePolicy): ...
    def getChildByName(self, name: str) -> QT4FormWidgets.PythonValuePolicy | None: ...
    def getSettings(self) -> dict: ...
    def getStateAppearance(self, state: set): ...
    def removeChildPolicy(self, policy: QT4FormWidgets.PythonValuePolicy): ...
    def setEnabled(self, enabled: bool): ...

class _ValuelessPythonPolicy(QT4FormWidgets.ValuePolicy.AbstractValuePolicy):
    def __init__(self, name: str, parent: QT4FormWidgets.PythonValuePolicy | None, isEnabled: bool = ...) -> None: ...
    def getName(self) -> str: ...
    def getType(self) -> str: ...
    def getWidgetHints(self) -> dict: ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, enabled: bool): ...
