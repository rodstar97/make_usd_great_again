# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import QT4FormWidgets.ExternalEditorDialog as ExternalEditorDialog
import QT4FormWidgets.PaintingUtils as PaintingUtils
import PyQt5.QtCore as QtCore
import PyQt5.QtGui as QtGui
import PyQt5.QtWidgets as QtWidgets
from QT4FormWidgets.FWidget import FBoxLayout as FBoxLayout, FButton as FButton, FDisclosureTriangle as FDisclosureTriangle, FLabel as FLabel, FLockIcon as FLockIcon, FMenu as FMenu, FPixmap as FPixmap, FSpacer as FSpacer, FStateBadge as FStateBadge, FSvgIcon as FSvgIcon, FToggleStateBadge as FToggleStateBadge, FWidget as FWidget
from QT4FormWidgets.FormWidget import FormWidget as FormWidget
from QT4FormWidgets.InputWidgets import HelpButton as HelpButton, HelpFWidget as HelpFWidget, InputComboBox as InputComboBox, InputLineEdit as InputLineEdit, InputTextEdit as InputTextEdit
from QT4FormWidgets.ValuePolicy import AbstractValuePolicy as AbstractValuePolicy, ValuePolicyEvent as ValuePolicyEvent, ValuePolicyProxy as ValuePolicyProxy
from QT4FormWidgets.WideEditDialog import WideEditDialog as WideEditDialog
from ResourceFiles.IconManager import ResourceManager as ResourceManager
from typing import ClassVar, Set, Tuple

class BaseValueFormWidget(FormWidget):
    _Pixmaps: ClassVar[dict] = ...
    def __init__(self, parent, policy, factory) -> None: ...
    def _BaseValueFormWidget__autoKeyClicked(self): ...
    def _BaseValueFormWidget__curveShowClicked(self): ...
    def _BaseValueFormWidget__loadPixmaps(self): ...
    def _BaseValueFormWidget__triangleClicked(self, item, state): ...
    def _BaseValueFormWidget__updateCurveAndExpression(self): ...
    def _BaseValueFormWidget__updateExpr(self): ...
    def _lockChanged(self, state): ...
    def _popdownCreated(self, popdown): ...
    def _popupMenuCreated(self, menu): ...
    def _thaw(self): ...
    def _updateControlWidget(self): ...
    def getMaximumLeftControlWidgetWidth(self): ...
    def setVisible(self, vis, checkVisOps: bool = ...): ...
    def showExternalEditor(self): ...
    def showWideEditor(self): ...
    def valueChangedEvent(self, event): ...
