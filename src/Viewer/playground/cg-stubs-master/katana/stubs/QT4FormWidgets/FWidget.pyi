# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import QT4FormWidgets.PaintingUtils as PaintingUtils
import PyQt5.QtCore
import PyQt5.QtGui
import PyQt5.QtWidgets
import PyQt5.QtCore as QtCore
import PyQt5.QtGui as QtGui
import PyQt5.QtWidgets as QtWidgets
import ResourceFiles as ResourceFiles
import Utils as Utils
from QT4FormWidgets.FWidget import FWidget as FWidget
from QT4FormWidgets.FixableBoxLayout import FixableBoxLayout as FixableBoxLayout
from ResourceFiles.IconManager import ResourceManager as ResourceManager
from Utils.Decorators import deprecated as deprecated
from _typeshed import Incomplete
from typing import ClassVar, Set, Tuple

class FBoxLayout(FixableBoxLayout):
    def add(self, w): ...
    def findFWidget(self, point): ...
    def paintFWidgets(self, *args): ...
    def remove(self, w): ...

class FButton(FLabel):
    _FButton__baseBrush: ClassVar[None] = ...
    _FButton__basePen: ClassVar[None] = ...
    def __init__(self, parent, text, font: Incomplete | None = ..., pad: int = ...) -> None: ...
    def _FButton__update(self): ...
    def enterEvent(self, ev): ...
    def leaveEvent(self, ev): ...
    def mousePressEvent(self, event): ...
    def paint(self, painter, width, height): ...
    def setForegroundRole(self, role): ...
    def setLocked(self, isLocked): ...
    def setPreselectionHighlightRole(self, colorRole: Incomplete | None = ...): ...

class FDisclosureTriangle(FWidget):
    _FDisclosureTriangle__duration: ClassVar[float] = ...
    expanded: ClassVar[PyQt5.QtCore.pyqtSignal] = ...
    def __init__(self, parent, size: int = ..., neverOpen: bool = ..., aspect: float = ...) -> None: ...
    def _FDisclosureTriangle__doTimer(self): ...
    def enterEvent(self, event: PyQt5.QtCore.QEvent): ...
    def fontChange(self, _oldFont: PyQt5.QtGui.QFont): ...
    def isExpanded(self): ...
    def leaveEvent(self, event: PyQt5.QtCore.QEvent): ...
    def mousePressEvent(self, event: PyQt5.QtGui.QMouseEvent): ...
    def paint(self, painter, width, height): ...
    def rotation(self): ...
    def setColor(self, color): ...
    def setExpanded(self, state): ...
    def setOutlineColor(self, color): ...
    def setRightPadding(self, rightPadding: int): ...
    def setRotation(self, value): ...
    def setSize(self, size: int): ...
    def sizeHint(self): ...

class FLabel(FWidget):
    def __init__(self, parent, text, font: Incomplete | None = ..., pad: int = ...) -> None: ...
    def getBuddy(self): ...
    def minimumSizeHint(self): ...
    def mousePressEvent(self, event): ...
    def paint(self, painter, width, height): ...
    def setBuddy(self, buddy): ...
    def setColor(self, color): ...
    def setFixedWidth(self, fixedWidth): ...
    def setText(self, text): ...
    def text(self): ...

class FLockIcon(FWidget):
    _FLockIcon__icon: ClassVar[None] = ...
    def __init__(self, parent, size: int = ...) -> None: ...
    def paint(self, painter, width, height): ...
    def setState(self, state): ...
    def sizeHint(self): ...

class FMenu(FWidget):
    menu: ClassVar[PyQt5.QtCore.pyqtSignal] = ...
    def __init__(self, parent, size: int = ..., text: Incomplete | None = ..., font: Incomplete | None = ..., pad: int = ..., pixmap: Incomplete | None = ...) -> None: ...
    def _FMenu__updateSize(self): ...
    def _displayContextMenu(self, pos: Incomplete | None = ...): ...
    def contextMenuEvent(self, event): ...
    def displayContextMenu(self, pos): ...
    def enterEvent(self, event): ...
    def fillMenu(self, menu): ...
    def invalidate(self): ...
    def leaveEvent(self, event): ...
    def mousePressEvent(self, event): ...
    def paint(self, painter, width, height): ...
    def setFont(self, font): ...
    def setPixmap(self, pixmap): ...
    def setPressed(self, state): ...
    def setText(self, text): ...
    def sizeHint(self): ...

class FPixmap(FWidget):
    def __init__(self, parent, pixmap: Incomplete | None = ...) -> None: ...
    def mousePressEvent(self, event): ...
    def paint(self, painter, width, height): ...
    def pixmap(self): ...
    def setPixmap(self, pixmap): ...
    def sizeHint(self): ...

class FSpacer(FWidget):
    def __init__(self, parent, width) -> None: ...
    def sizeHint(self): ...

class FStateBadge(FWidget):
    def __init__(self, parent, letter, color, size: int = ..., textColor: Incomplete | None = ...) -> None: ...
    def enterEvent(self, event): ...
    def getSize(self): ...
    def leaveEvent(self, event): ...
    def paint(self, painter, width, height, testHover: bool = ...): ...
    def setColors(self, color: Incomplete | None = ..., textColor: Incomplete | None = ...): ...
    def setLetter(self, letter): ...
    def sizeHint(self): ...

class FSvgIcon(FWidget):
    def __init__(self, parent, filename, size: int = ...) -> None: ...
    def paint(self, painter, width, height): ...

class FToggleStateBadge(FWidget):
    def __init__(self, parent, color, size: int = ...) -> None: ...
    def enterEvent(self, event): ...
    def getSize(self): ...
    def leaveEvent(self, event): ...
    def paint(self, painter, width, height, testHover: bool = ...): ...
    def setColor(self, color: Incomplete | None = ...): ...
    def sizeHint(self): ...

class FWidget(PyQt5.QtWidgets.QWidget):
    clicked: ClassVar[PyQt5.QtCore.pyqtSignal] = ...
    def __init__(self, parent) -> None: ...
    def invalidate(self): ...
    def paint(self, painter, width, height): ...
    def paintEvent(self, event): ...
    def sizeHint(self): ...
