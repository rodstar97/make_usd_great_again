# mypy: disable-error-code="misc, override, attr-defined, no-redef, assignment"

import QT4FormWidgets.HintUtils as HintUtils
import QT4FormWidgets.InputWidgets as InputWidgets
import QT4FormWidgets.PaintingUtils as PaintingUtils
import PyQt5.QtCore
import QT4FormWidgets.InputWidgets
import QT4Widgets as QT4Widgets
import PyQt5.QtCore as QtCore
import PyQt5.QtGui as QtGui
import PyQt5.QtWidgets as QtWidgets
import QT4FormWidgets.ValueAdjustment as ValueAdjustment
from QT4FormWidgets.BaseValueFormWidget import BaseValueFormWidget as BaseValueFormWidget
from QT4FormWidgets.MultiStateBadge import MultiStateBadge as MultiStateBadge, ToggleStateBadge as ToggleStateBadge, ToggleValuePolicyState as ToggleValuePolicyState
from typing import ClassVar, Set, Tuple

class IncDecLineEdit(QT4FormWidgets.InputWidgets.InputLineEdit):
    singleDigitScrollingEnabled: ClassVar[bool] = ...
    superEnter: ClassVar[PyQt5.QtCore.pyqtSignal] = ...
    def keyPressEvent(self, event): ...

class NumberFormWidget(BaseValueFormWidget):
    SLOP: ClassVar[int] = ...
    def __init__(self, parent, policy, factory) -> None: ...
    def _NumberFormWidget__calcSliderValue(self, pos): ...
    def _NumberFormWidget__control_decrement_CB(self, modifiers): ...
    def _NumberFormWidget__control_increment_CB(self, modifiers): ...
    def _NumberFormWidget__control_superEnter_CB(self): ...
    def _NumberFormWidget__on_control_lostFocus(self): ...
    def _NumberFormWidget__sensitivityMenuCallback(self, action): ...
    def _NumberFormWidget__slider_toggleComponent_CB(self): ...
    def _NumberFormWidget__slider_valueChanged_CB(self, value, final): ...
    def _addExportMenuActions(self, menu): ...
    def _addExtraMenuAction(self, menu): ...
    def _addImportMenuActions(self, menu): ...
    def _buildControlWidget(self, layout): ...
    def _checkControlWidget(self): ...
    def _lockChanged(self, state): ...
    def _popupMenuCreated(self, menu): ...
    def _resetScrubbing(self): ...
    def _updateControlWidget(self): ...
    def getLabelSensitivity(self): ...
    def getMaxVal(self): ...
    def labelSliderBegin(self, pos, modifiers): ...
    def labelSliderDrag(self, pos, modifiers): ...
    def labelSliderEnd(self, pos, modifiers): ...
    def paintEvent(self, event): ...
    def setLabelSensitivity(self, sensitivity): ...
    def setMaxVal(self, max): ...
    @classmethod
    def setSingleDigitScrolling(cls, value: bool): ...
    def supportsStickyScrub(self) -> bool: ...

def CreateSensitivityMenu(menu, policy, isInt, sensitivity): ...
def FormatNumber(value: Tuple[float, int | int], isInt: bool = ..., numDigits: int = ...) -> str: ...
