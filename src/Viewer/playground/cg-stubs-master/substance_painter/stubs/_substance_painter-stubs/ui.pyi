from typing import ClassVar

class ApplicationMenu:
    __members__: ClassVar[dict] = ...  # read-only
    Edit: ClassVar[ApplicationMenu] = ...
    File: ClassVar[ApplicationMenu] = ...
    Help: ClassVar[ApplicationMenu] = ...
    Mode: ClassVar[ApplicationMenu] = ...
    SendTo: ClassVar[ApplicationMenu] = ...
    Viewport: ClassVar[ApplicationMenu] = ...
    Window: ClassVar[ApplicationMenu] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

class UIMode:
    __members__: ClassVar[dict] = ...  # read-only
    Baking: ClassVar[UIMode] = ...
    Edition: ClassVar[UIMode] = ...
    Visualisation: ClassVar[UIMode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __and__(self, other: object) -> object: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: object) -> object: ...
    def __rand__(self, other: object) -> object: ...
    def __ror__(self, other: object) -> object: ...
    def __rxor__(self, other: object) -> object: ...
    def __setstate__(self, state: int) -> None: ...
    def __xor__(self, other: object) -> object: ...
    @property
    def name(self) -> str: ...

def add_action(arg0: ApplicationMenu, arg1: int) -> None: ...
def add_dock_widget(arg0: int, arg1: int) -> int: ...
def add_menu(arg0: int) -> None: ...
def add_plugins_toolbar_widget(arg0: int) -> None: ...
def add_toolbar(arg0: str, arg1: str, arg2: int) -> int: ...
def get_current_mode() -> UIMode: ...
def get_layout(arg0: UIMode) -> bytes: ...
def get_layout_mode(arg0: bytes) -> UIMode: ...
def get_main_window_ptr() -> int: ...
def reset_layout(arg0: UIMode) -> None: ...
def set_layout(arg0: bytes) -> UIMode: ...
def show_main_window() -> None: ...
def switch_to_mode(arg0: UIMode) -> None: ...
