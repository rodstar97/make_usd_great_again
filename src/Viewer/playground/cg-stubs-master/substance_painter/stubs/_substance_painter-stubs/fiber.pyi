from typing import Any, Callable, ClassVar

class Fiber:
    def __init__(self, arg0: Callable[[],None]) -> None: ...
    def finished(self) -> bool: ...
    def get_id(self, *args, **kwargs) -> Any: ...
    def join(self) -> None: ...
    def joinable(self) -> bool: ...

class FiberError(Exception): ...

class FiberId:
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: FiberId) -> bool: ...
    def __ge__(self, arg0: FiberId) -> bool: ...
    def __gt__(self, arg0: FiberId) -> bool: ...
    def __le__(self, arg0: FiberId) -> bool: ...
    def __lt__(self, arg0: FiberId) -> bool: ...
    def __ne__(self, arg0: FiberId) -> bool: ...

class Future:
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self) -> object: ...
    def ready(self) -> bool: ...
    def valid(self) -> bool: ...
    def wait_for(self, arg0: float) -> bool: ...
    def wait_for_ns(self, arg0: int) -> bool: ...

class FutureError(Exception): ...

class Promise:
    def __init__(self) -> None: ...
    def get_future(self, *args, **kwargs) -> Any: ...
    def set_value(self, arg0: object) -> None: ...

def f_yield() -> None: ...
def get_id() -> FiberId: ...
def main_process_events() -> None: ...
def run_from_main(arg0: Callable[[],None]) -> None: ...
def sleep_for(arg0: float) -> None: ...
def sleep_for_ns(arg0: int) -> None: ...
