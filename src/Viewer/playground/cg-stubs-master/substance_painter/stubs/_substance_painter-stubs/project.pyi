from typing import Callable, ClassVar, List, Optional, Tuple

class Action:
    __members__: ClassVar[dict] = ...  # read-only
    Close: ClassVar[Action] = ...
    Lock: ClassVar[Action] = ...
    Unlock: ClassVar[Action] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

class MeshLoadingStatus:
    __members__: ClassVar[dict] = ...  # read-only
    Error: ClassVar[MeshLoadingStatus] = ...
    Success: ClassVar[MeshLoadingStatus] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

class NormalMapFormat:
    __members__: ClassVar[dict] = ...  # read-only
    DirectX: ClassVar[NormalMapFormat] = ...
    OpenGL: ClassVar[NormalMapFormat] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

class ProjectSaveMode:
    __members__: ClassVar[dict] = ...  # read-only
    Full: ClassVar[ProjectSaveMode] = ...
    Incremental: ClassVar[ProjectSaveMode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

class ProjectWorkflow:
    __members__: ClassVar[dict] = ...  # read-only
    Default: ClassVar[ProjectWorkflow] = ...
    TextureSetPerUVTile: ClassVar[ProjectWorkflow] = ...
    UVTile: ClassVar[ProjectWorkflow] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

class State:
    __members__: ClassVar[dict] = ...  # read-only
    Closed: ClassVar[State] = ...
    Loaded: ClassVar[State] = ...
    Locked: ClassVar[State] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

class TangentSpace:
    __members__: ClassVar[dict] = ...  # read-only
    PerFragment: ClassVar[TangentSpace] = ...
    PerVertex: ClassVar[TangentSpace] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

def all_keys() -> object: ...
def context_name() -> str: ...
def create(mesh_filepath: str, mesh_map_paths: List[str], template_filepath: str, settings: dict) -> None: ...
def create_default_project() -> None: ...
def do_action(action: Action) -> None: ...
def file_path() -> str: ...
def file_url() -> str: ...
def is_busy() -> bool: ...
def is_in_edition_state() -> bool: ...
def last_imported_mesh_path() -> str: ...
def last_saved_substance_painter_version() -> Optional[Tuple[int,int,int]]: ...
def metadata(key: str) -> object: ...
def metadata_keys(key_prefix_filter: str) -> object: ...
def name() -> str: ...
def needs_saving() -> bool: ...
def open(file_path: str) -> None: ...
def optimize_random_dynamic_strokes() -> None: ...
def optimize_small_size_strokes(threshold_size: float) -> None: ...
def reload_mesh(mesh_file_path: str, import_cameras: bool, preserve_strokes: bool, loading_status_cb: Callable[[MeshLoadingStatus],None]) -> None: ...
def save(file_path: str, mode: ProjectSaveMode) -> None: ...
def save_as_copy(file_path: str, mode: ProjectSaveMode) -> None: ...
def save_as_template(template_filepath: str, texture_set_name: str) -> None: ...
def set_metadata(key: str, value: object) -> None: ...
def state() -> State: ...
def switch_color_workflow_to_ocio(config_filepath: str, colorspace_bitmap_int8: str, colorspace_bitmap_int16: str, colorspace_bitmap_float: str, colorspace_materials: str, colorspace_export_int8: str, colorspace_export_int16: str, colorspace_export_float: str) -> None: ...
