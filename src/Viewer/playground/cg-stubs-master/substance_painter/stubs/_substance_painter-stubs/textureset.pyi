from typing import ClassVar, Dict, List, Tuple
from typing import Set

class ChannelFormat:
    __members__: ClassVar[dict] = ...  # read-only
    L16: ClassVar[ChannelFormat] = ...
    L16F: ClassVar[ChannelFormat] = ...
    L32F: ClassVar[ChannelFormat] = ...
    L8: ClassVar[ChannelFormat] = ...
    RGB16: ClassVar[ChannelFormat] = ...
    RGB16F: ClassVar[ChannelFormat] = ...
    RGB32F: ClassVar[ChannelFormat] = ...
    RGB8: ClassVar[ChannelFormat] = ...
    __entries: ClassVar[dict] = ...
    sRGB8: ClassVar[ChannelFormat] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

class ChannelType:
    __members__: ClassVar[dict] = ...  # read-only
    AO: ClassVar[ChannelType] = ...
    Anisotropyangle: ClassVar[ChannelType] = ...
    Anisotropylevel: ClassVar[ChannelType] = ...
    BaseColor: ClassVar[ChannelType] = ...
    BlendingMask: ClassVar[ChannelType] = ...
    CoatColor: ClassVar[ChannelType] = ...
    CoatNormal: ClassVar[ChannelType] = ...
    CoatOpacity: ClassVar[ChannelType] = ...
    CoatRoughness: ClassVar[ChannelType] = ...
    CoatSpecularLevel: ClassVar[ChannelType] = ...
    Diffuse: ClassVar[ChannelType] = ...
    Displacement: ClassVar[ChannelType] = ...
    Emissive: ClassVar[ChannelType] = ...
    Glossiness: ClassVar[ChannelType] = ...
    Height: ClassVar[ChannelType] = ...
    Ior: ClassVar[ChannelType] = ...
    Metallic: ClassVar[ChannelType] = ...
    Normal: ClassVar[ChannelType] = ...
    Opacity: ClassVar[ChannelType] = ...
    Reflection: ClassVar[ChannelType] = ...
    Roughness: ClassVar[ChannelType] = ...
    Scattering: ClassVar[ChannelType] = ...
    ScatteringColor: ClassVar[ChannelType] = ...
    SheenColor: ClassVar[ChannelType] = ...
    SheenOpacity: ClassVar[ChannelType] = ...
    SheenRoughness: ClassVar[ChannelType] = ...
    Specular: ClassVar[ChannelType] = ...
    SpecularEdgeColor: ClassVar[ChannelType] = ...
    Specularlevel: ClassVar[ChannelType] = ...
    Translucency: ClassVar[ChannelType] = ...
    Transmissive: ClassVar[ChannelType] = ...
    User0: ClassVar[ChannelType] = ...
    User1: ClassVar[ChannelType] = ...
    User10: ClassVar[ChannelType] = ...
    User11: ClassVar[ChannelType] = ...
    User12: ClassVar[ChannelType] = ...
    User13: ClassVar[ChannelType] = ...
    User14: ClassVar[ChannelType] = ...
    User15: ClassVar[ChannelType] = ...
    User2: ClassVar[ChannelType] = ...
    User3: ClassVar[ChannelType] = ...
    User4: ClassVar[ChannelType] = ...
    User5: ClassVar[ChannelType] = ...
    User6: ClassVar[ChannelType] = ...
    User7: ClassVar[ChannelType] = ...
    User8: ClassVar[ChannelType] = ...
    User9: ClassVar[ChannelType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

class MeshMapUsage:
    __members__: ClassVar[dict] = ...  # read-only
    AO: ClassVar[MeshMapUsage] = ...
    BentNormals: ClassVar[MeshMapUsage] = ...
    Curvature: ClassVar[MeshMapUsage] = ...
    Height: ClassVar[MeshMapUsage] = ...
    ID: ClassVar[MeshMapUsage] = ...
    Normal: ClassVar[MeshMapUsage] = ...
    Opacity: ClassVar[MeshMapUsage] = ...
    Position: ClassVar[MeshMapUsage] = ...
    Thickness: ClassVar[MeshMapUsage] = ...
    WorldSpaceNormal: ClassVar[MeshMapUsage] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...

def add_channel(stack_id: int, type: ChannelType, format: ChannelFormat, label: str) -> int: ...
def all_stacks(texture_set_id: int) -> List[int]: ...
def all_texture_set_mesh_names(texture_set_id: int) -> List[str]: ...
def all_texture_sets() -> List[int]: ...
def all_uv_tiles(texture_set_id: int) -> List[Tuple[int,int]]: ...
def all_uvtile_mesh_names(texture_set_id: int, uv_tile: Tuple[int,int]) -> List[str]: ...
def channel_bit_depth(channel_id: int) -> int: ...
def channel_format(channel_id: int) -> ChannelFormat: ...
def channel_is_color(channel_id: int) -> bool: ...
def channel_is_floating(channel_id: int) -> bool: ...
def channel_type(channel_id: int) -> ChannelType: ...
def channel_user_name(channel_id: int) -> str: ...
def edit_channel(channel_id: int, format: ChannelFormat, label: str) -> None: ...
def get_active_stack() -> int: ...
def get_channel(stack_id: int, type: ChannelType) -> int: ...
def get_mesh_map_resource(texture_set_id: int, usage: MeshMapUsage) -> str: ...
def get_resolution(texture_set_id: int) -> Tuple[int,int]: ...
def get_uvtiles_resolution(texture_set_id: int) -> Dict[Tuple[int,int],Tuple[int,int]]: ...
def has_channel(stack_id: int, type: ChannelType) -> bool: ...
def has_uv_tiles(texture_set_id: int) -> bool: ...
def is_layered_material(texture_set_id: int) -> bool: ...
def material_from_stack(stack_id: int) -> int: ...
def material_name(texture_set_id: int) -> str: ...
def remove_channel(stack_id: int, type: ChannelType) -> None: ...
def reset_uvtiles_resolution(texture_set_id: int, uv_tiles: Set[Tuple[int,int]]) -> None: ...
def set_active_stack(stack_id: int) -> None: ...
def set_mesh_map_resource(texture_set_id: int, usage: MeshMapUsage, new_mesh_map: str) -> None: ...
def set_resolution(texture_set_ids: List[int], width: int, height: int) -> None: ...
def set_uvtiles_resolution(texture_set_id: int, resolutions: Dict[Tuple[int,int],Tuple[int,int]]) -> None: ...
def stack_name(stack_id: int) -> str: ...
