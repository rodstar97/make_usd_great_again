from typing import Any, List, Optional, Tuple

TYPE_ABR_PACKAGE: str
TYPE_BRUSH: str
TYPE_EXPORT: str
TYPE_IMAGE: str
TYPE_PRESET: str
TYPE_RESOURCE: str
TYPE_SCRIPT: str
TYPE_SHADER: str
TYPE_SMART_MASK: str
TYPE_SMART_MATERIAL: str
TYPE_SUBSTANCE: str
TYPE_SUBSTANCE_PACKAGE: str
USAGE_ALPHA: str
USAGE_BASE_MATERIAL: str
USAGE_BRUSH: str
USAGE_COLOR_LUT: str
USAGE_EMITTER: str
USAGE_ENVIRONMENT: str
USAGE_EXPORT: str
USAGE_FILTER: str
USAGE_GENERATOR: str
USAGE_PARTICLE: str
USAGE_PROCEDURAL: str
USAGE_RECEIVER: str
USAGE_SHADER: str
USAGE_SMART_MASK: str
USAGE_SMART_MATERIAL: str
USAGE_TEXTURE: str
USAGE_TOOL: str

class ResourceHandle:
    def __init__(self, *args, **kwargs) -> None: ...
    def category(self) -> str: ...
    def children(self) -> List[ResourceHandle]: ...
    def gui_name(self) -> str: ...
    def id(self) -> Tuple[str,str,str]: ...
    def internal_properties(self) -> str: ...
    def parent(self) -> Optional[ResourceHandle]: ...
    def select(self) -> None: ...
    def set_custom_preview(self, preview_image_path: str) -> None: ...
    def tags(self) -> List[str]: ...
    def type(self) -> str: ...
    def usages(self) -> List[str]: ...
    def __eq__(self, arg0: ResourceHandle) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg0: ResourceHandle) -> bool: ...

def add_shelf(name: str, path: str) -> None: ...
def all_shelves() -> List[str]: ...
def application_shelf() -> str: ...
def highlight_resources(handles: List[ResourceHandle]) -> None: ...
def import_resource(*args, **kwargs) -> Any: ...
def is_shelf_crawling(arg0: str) -> bool: ...
def is_shelf_editable(name: str) -> bool: ...
def list_layer_stack_resources() -> list: ...
def refresh_shelves() -> None: ...
def remove_shelf(name: str) -> None: ...
def retrieve_resources(name: str, context_name: str, version: Optional[str] = ...) -> list: ...
def search_resources(query: str) -> list: ...
def session_context_name() -> str: ...
def shelf_exists(name: str) -> bool: ...
def shelf_path(name: str) -> str: ...
def update_layer_stack_resource(old_url: str, new_handle) -> list: ...
def user_shelf() -> str: ...
