from typing import Callable, ClassVar, List

class AppCode:
    BRIDGE: ClassVar[AppCode] = ...  # read-only
    CREATIVE_CLOUD_DESKTOP: ClassVar[AppCode] = ...  # read-only
    DIMENSION: ClassVar[AppCode] = ...  # read-only
    DIMENSION_PRERELEASE: ClassVar[AppCode] = ...  # read-only
    PHOTOSHOP: ClassVar[AppCode] = ...  # read-only
    STAGER: ClassVar[AppCode] = ...  # read-only
    SUBSTANCE_ALCHEMIST: ClassVar[AppCode] = ...  # read-only
    SUBSTANCE_DESIGNER: ClassVar[AppCode] = ...  # read-only
    SUBSTANCE_PAINTER: ClassVar[AppCode] = ...  # read-only
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, arg0: AppCode) -> bool: ...
    def __ge__(self, arg0: AppCode) -> bool: ...
    def __gt__(self, arg0: AppCode) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg0: AppCode) -> bool: ...
    def __lt__(self, arg0: AppCode) -> bool: ...
    def __ne__(self, arg0: AppCode) -> bool: ...
    @property
    def value(self) -> str: ...

class MessageDispatcher:
    def __init__(self) -> None: ...
    def all_sources(self) -> List[MessageSource]: ...
    @classmethod
    def app_ready_message_type(cls) -> str: ...
    @classmethod
    def app_ready_request_message_type(cls) -> str: ...
    def broadcast(self, message_type: str, message_data: str) -> int: ...
    def broadcast_app_ready(self, message_types: List[str]) -> int: ...
    def debug_log(self) -> str: ...
    @classmethod
    def decode_app_ready_payload(cls, payload: str) -> List[str]: ...
    @classmethod
    def disconnect(cls, connection: MessageDispatcherConnection) -> None: ...
    def error_state(self) -> int: ...
    @classmethod
    def error_string(cls, error_code: int) -> str: ...
    def find_sources(self, app_code: AppCode) -> List[MessageSource]: ...
    def is_ready(self) -> bool: ...
    def on_receive(self, callback: Callable[[MessageSource,str,bytes],None]) -> MessageDispatcherConnection: ...
    def on_receive_from_me(self, callback: Callable[[MessageSource,str,bytes],None]) -> MessageDispatcherConnection: ...
    def send_app_ready(self, source: MessageSource, message_types: List[str]) -> int: ...
    def send_app_ready_request(self, source: MessageSource, message_types: List[str]) -> int: ...
    def send_to_app(self, app_code: AppCode, message_type: str, message_data: str) -> int: ...
    def send_to_source(self, source: MessageSource, message_type: str, message_data: str) -> int: ...
    def this_app_instance_source(self) -> MessageSource: ...

class MessageDispatcherConnection:
    def __init__(self, *args, **kwargs) -> None: ...

class MessageSource:
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: MessageSource) -> bool: ...
    def __ge__(self, arg0: MessageSource) -> bool: ...
    def __gt__(self, arg0: MessageSource) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, arg0: MessageSource) -> bool: ...
    def __lt__(self, arg0: MessageSource) -> bool: ...
    def __ne__(self, arg0: MessageSource) -> bool: ...
    @property
    def app_code(self) -> AppCode: ...
    @property
    def app_version(self) -> str: ...
    @property
    def source_id(self) -> str: ...

def app_info_debug_log() -> str: ...
def get_app_install_path(app_code: AppCode) -> str: ...
def get_app_launch_command(app_code: AppCode) -> str: ...
def is_app_installed(app_code: AppCode) -> bool: ...
def try_get_app_version(app_code: AppCode) -> str: ...
