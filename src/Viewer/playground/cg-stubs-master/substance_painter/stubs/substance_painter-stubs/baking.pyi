from _typeshed import Incomplete
from substance_painter.properties import Property as Property, PropertyValue as PropertyValue
from substance_painter.textureset import MeshMapUsage as MeshMapUsage, TextureSet as TextureSet, UVTile as UVTile
from typing import Dict, List

from _substance_painter.baking import BakingStatus as BakingStatus
from _substance_painter.baking import CurvatureMethod as CurvatureMethod

class BakingParameters:
    material_id: int
    @staticmethod
    def from_texture_set(texture_set: TextureSet) -> BakingParameters: ...
    @staticmethod
    def from_texture_set_name(texture_set_name: str) -> BakingParameters: ...
    def texture_set(self) -> TextureSet: ...
    def common(self) -> Dict[str, Property]: ...
    def baker(self, baked_map: MeshMapUsage) -> Dict[str, Property]: ...
    @staticmethod
    def set(property_values: Dict[Property, PropertyValue]) -> None: ...
    def get_curvature_method(self) -> CurvatureMethod: ...
    def set_curvature_method(self, method: CurvatureMethod): ...
    def is_baker_enabled(self, usage: MeshMapUsage) -> bool: ...
    def set_baker_enabled(self, usage: MeshMapUsage, enable: bool) -> None: ...
    def get_enabled_bakers(self) -> List[MeshMapUsage]: ...
    def set_enabled_bakers(self, enabled_usages: List[MeshMapUsage]) -> None: ...
    def is_textureset_enabled(self) -> bool: ...
    def set_textureset_enabled(self, enable: bool) -> None: ...
    def is_uv_tile_enabled(self, uv_tile: UVTile) -> bool: ...
    def set_uv_tile_enabled(self, uv_tile: UVTile, enable: bool) -> None: ...
    def get_enabled_uv_tiles(self) -> List[UVTile]: ...
    def set_enabled_uv_tiles(self, enabled_uv_tiles: List[UVTile]) -> None: ...
    def __init__(self, material_id) -> None: ...

def set_linked_group(group: List[TextureSet], reference: TextureSet, usage: MeshMapUsage) -> None: ...
def set_linked_group_common_parameters(group: List[TextureSet], reference: TextureSet) -> None: ...
def unlink_all(usage: MeshMapUsage) -> None: ...
def unlink_all_common_parameters() -> None: ...
def get_link_group(usage: MeshMapUsage) -> List[TextureSet]: ...
def get_link_group_common_parameters() -> List[TextureSet]: ...
def get_linked_texture_sets(texture_set: TextureSet, usage: MeshMapUsage) -> List[TextureSet]: ...
def get_linked_texture_sets_common_parameters(texture_set: TextureSet) -> List[TextureSet]: ...
def bake_async(texture_set: TextureSet) -> None: ...
