import substance_painter.resource
import typing
from _typeshed import Incomplete

from _substance_painter.textureset import ChannelFormat as ChannelFormat
from _substance_painter.textureset import ChannelType as ChannelType
from _substance_painter.textureset import MeshMapUsage as MeshMapUsage

class Resolution:
    width: int
    height: int
    def __init__(self, width, height) -> None: ...

class Channel:
    channel_id: int
    def format(self) -> ChannelFormat: ...
    def label(self) -> str: ...
    def is_color(self) -> bool: ...
    def is_floating(self) -> bool: ...
    def bit_depth(self) -> int: ...
    def type(self) -> ChannelType: ...
    def edit(self, channel_format: ChannelFormat, label: typing.Optional[str] = ...) -> None: ...
    def __init__(self, channel_id) -> None: ...

class UVTile:
    u: int
    v: int
    def get_resolution(self) -> Resolution: ...
    def set_resolution(self, new_resolution: Resolution): ...
    def reset_resolution(self) -> None: ...
    def all_mesh_names(self) -> typing.List[str]: ...
    def __init__(self, u, v, _material_id) -> None: ...

class Stack:
    stack_id: int
    @staticmethod
    def from_name(texture_set_name: str, stack_name: str = ...): ...
    def name(self) -> str: ...
    def material(self): ...
    def all_channels(self) -> typing.Dict[ChannelType, Channel]: ...
    def add_channel(self, channel_type: ChannelType, channel_format: ChannelFormat, label: typing.Optional[str] = ...) -> Channel: ...
    def remove_channel(self, channel_type: ChannelType) -> None: ...
    def edit_channel(self, channel_type: ChannelType, channel_format: ChannelFormat, label: typing.Optional[str] = ...) -> None: ...
    def has_channel(self, channel_type: ChannelType) -> bool: ...
    def get_channel(self, channel_type: ChannelType) -> Channel: ...
    def __init__(self, stack_id) -> None: ...

class TextureSet:
    material_id: int
    @staticmethod
    def from_name(texture_set_name: str): ...
    def name(self) -> str: ...
    def is_layered_material(self) -> bool: ...
    def all_stacks(self) -> typing.List[Stack]: ...
    def get_stack(self, stack_name: str = ...) -> Stack: ...
    def get_resolution(self) -> Resolution: ...
    def set_resolution(self, new_resolution: Resolution): ...
    def has_uv_tiles(self) -> bool: ...
    def uv_tile(self, u_coord: int, v_coord: int) -> UVTile: ...
    def all_uv_tiles(self) -> typing.List[UVTile]: ...
    def get_uvtiles_resolution(self) -> typing.Dict[UVTile, Resolution]: ...
    def set_uvtiles_resolution(self, resolutions: typing.Dict[UVTile, Resolution]): ...
    def reset_uvtiles_resolution(self, uvtiles: typing.List[UVTile]): ...
    def all_mesh_names(self) -> typing.List[str]: ...
    def get_mesh_map_resource(self, usage: MeshMapUsage) -> typing.Optional[substance_painter.resource.ResourceID]: ...
    def set_mesh_map_resource(self, usage: MeshMapUsage, new_mesh_map: typing.Optional[substance_painter.resource.ResourceID]) -> None: ...
    def __init__(self, material_id) -> None: ...

def set_resolutions(texturesets: typing.List[TextureSet], new_resolution: Resolution): ...
def all_texture_sets() -> typing.List[TextureSet]: ...
def get_active_stack() -> Stack: ...
def set_active_stack(stack: Stack) -> None: ...
