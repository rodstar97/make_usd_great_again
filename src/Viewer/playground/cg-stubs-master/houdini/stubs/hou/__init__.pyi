## Created stubs from HFS: /luma/soft/applications/SideFx/Linux-x86_64/houdini-19.5.569/
# standard mypy stub can be created by running:
# setpkg houdini
# $(dirname $(which mypy))/../bin/stubgen --no-import $HH/python3.7libs/hou.py -o $REPO_PATH/houdini/python/
import datetime  ## Added by typing stub update
import Qt.QtGui as QtGui  ## Added by typing stub update
import Qt.QtWidgets as QtWidgets  ## Added by typing stub update
import pxr.Sdf  ## Added by typing stub update
import pxr.Usd  ## Added by typing stub update
from pxr import Usd  ## Added by typing stub update
from pxr import Sdf  ## Added by typing stub update
from typing import *  ## Added by typing stub update

T = TypeVar('T')
T_co = TypeVar('T_co', covariant=True)

class SizedItems(Protocol[T_co]):
    """
    This is the bare minimum object required to instantiate data objects in Houdini.

    Possibly other types of objects as well.
    """
    def __len__(self) -> int: ...
    def __getitem__(self, item: int) -> T_co: ...


class _SwigNonDynamicMeta(type):
    __setattr__: Any = ...

class SwigPyIterator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def value(self: SwigPyIterator) -> Any: ...
    def incr(self: SwigPyIterator, n: int=1) -> Any: ...
    def decr(self: SwigPyIterator, n: int=1) -> Any: ...
    def distance(self: SwigPyIterator, x: SwigPyIterator) -> Any: ...
    def equal(self: SwigPyIterator, x: SwigPyIterator) -> Any: ...
    def copy(self: SwigPyIterator) -> Any: ...
    def next(self: SwigPyIterator) -> Any: ...
    def __next__(self: SwigPyIterator) -> Any: ...
    def previous(self: SwigPyIterator) -> Any: ...
    def advance(self: SwigPyIterator, n: int) -> Any: ...
    def __iadd__(self: SwigPyIterator, n: int) -> Any: ...
    def __isub__(self: SwigPyIterator, n: int) -> Any: ...
    def __add__(self: SwigPyIterator, n: int) -> Any: ...
    def __sub__(self: SwigPyIterator, n: int) -> Any: ...
    def __iter__(self) -> None: ...

class _StringTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _StringTuple, *args: Sequence[str]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _StringTupleTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _StringTupleTuple, *args: Sequence[Sequence[str]]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _IntTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _IntTuple, *args: Sequence[int]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _IntTupleTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _IntTupleTuple, *args: Sequence[Sequence[int]]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _Int64Tuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _Int64Tuple, *args: Sequence[int]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _BoolTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _BoolTuple, *args: Sequence[bool]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _FloatTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _FloatTuple, *args: Sequence[float]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _FloatTupleTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _FloatTupleTuple, *args: Sequence[Sequence[float]]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _DoubleTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _DoubleTuple, *args: Sequence[float]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _DoubleTupleTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _DoubleTupleTuple, *args: Sequence[Sequence[float]]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _AgentClipTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _AgentClipTuple, *args: Sequence[AgentClip]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _AgentLayerTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _AgentLayerTuple, *args: Sequence[AgentLayer]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _AgentShapeTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _AgentShapeTuple, *args: Sequence[AgentShape]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _AgentShapeBindingTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _AgentShapeBindingTuple, *args: Sequence[AgentShapeBinding]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _AgentTransformGroupTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _AgentTransformGroupTuple, *args: Sequence[AgentTransformGroup]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _EnumTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _EnumTuple, *args: Sequence[EnumValue]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _NetworkMovableItemTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _NetworkMovableItemTuple, *args: Sequence[NetworkMovableItem]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _NodeTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _NodeTuple, *args: Sequence[Node]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _PointTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _PointTuple, *args: Sequence[Point]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _PointTupleTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _PointTupleTuple, *args: Sequence[Sequence[Point]]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _PrimTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _PrimTuple, *args: Sequence[Prim]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _EdgeTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _EdgeTuple, *args: Sequence[Edge]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _PointGroupTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _PointGroupTuple, *args: Sequence[PointGroup]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _PrimGroupTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _PrimGroupTuple, *args: Sequence[PrimGroup]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _EdgeGroupTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _EdgeGroupTuple, *args: Sequence[EdgeGroup]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _VertexGroupTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _VertexGroupTuple, *args: Sequence[VertexGroup]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _VertexTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _VertexTuple, *args: Sequence[Vertex]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _RampTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _RampTuple, *args: Sequence[Ramp]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _ParmTemplateTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _ParmTemplateTuple, *args: Sequence[ParmTemplate]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _InterpreterObjectTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _InterpreterObjectTuple, *args: Sequence[Any]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _GeometryTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _GeometryTuple, *args: Sequence[Geometry]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _IKTargetTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _IKTargetTuple, *args: Sequence[_ik_Target]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _SimpleDrawableTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _SimpleDrawableTuple, *args: Sequence[SimpleDrawable]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _DrawableTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _DrawableTuple, *args: Sequence[Drawable]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class _StringMapDoubleTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self: _StringMapDoubleTuple) -> Iterator[str]: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def iterkeys(self) -> None: ...
    def itervalues(self) -> None: ...
    def iteritems(self) -> None: ...
    def __getitem__(self, key) -> Any: ...
    def __delitem__(self, key) -> Any: ...
    def has_key(self, key) -> Any: ...
    def keys(self) -> Any: ...
    def values(self) -> Any: ...
    def items(self) -> Any: ...
    def __contains__(self, key) -> Any: ...
    def key_iterator(self) -> Any: ...
    def value_iterator(self) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def asdict(self) -> Any: ...
    def __init__(self: _StringMapDoubleTuple, *args: Dict[str, Sequence[float]]) -> None: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def count(self, x) -> Any: ...
    def erase(self, *args) -> Any: ...
    def find(self, x) -> Any: ...
    def lower_bound(self, x) -> Any: ...
    def upper_bound(self, x) -> Any: ...
    __swig_destroy__: Any = ...

class _StringTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _NetworkBoxTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _StickyNoteTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _NodeTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _PointTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _PrimTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _EdgeTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _VertexTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _DopDataTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _DopRecordTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _NodeConnectionTupleOfTuplesGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _AgentClipTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _AgentLayerTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _AgentGroupTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _GeometryTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _IKJointTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _LogEntryTupleGenerator:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getitem__(self, key) -> Any: ...
    def __len__(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _AgentDefnMap:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def iterkeys(self) -> None: ...
    def itervalues(self) -> None: ...
    def iteritems(self) -> None: ...
    def __getitem__(self, key) -> Any: ...
    def __delitem__(self, key) -> Any: ...
    def has_key(self, key) -> Any: ...
    def keys(self) -> Any: ...
    def values(self) -> Any: ...
    def items(self) -> Any: ...
    def __contains__(self, key) -> Any: ...
    def key_iterator(self) -> Any: ...
    def value_iterator(self) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def asdict(self) -> Any: ...
    def __init__(self: _AgentDefnMap, *args: Dict[AgentDefinition, AgentDefinition]) -> None: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def count(self, x) -> Any: ...
    def erase(self, *args) -> Any: ...
    def find(self, x) -> Any: ...
    def lower_bound(self, x) -> Any: ...
    def upper_bound(self, x) -> Any: ...
    __swig_destroy__: Any = ...

class _DopObjectTuple:
    thisown: Any = ...
    def iterator(self) -> Any: ...
    def __iter__(self) -> None: ...
    def __nonzero__(self) -> Any: ...
    def __bool__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __getslice__(self, i, j) -> Any: ...
    def __setslice__(self, *args) -> Any: ...
    def __delslice__(self, i, j) -> Any: ...
    def __delitem__(self, *args) -> Any: ...
    def __getitem__(self, *args) -> Any: ...
    def __setitem__(self, *args) -> Any: ...
    def pop(self) -> Any: ...
    def append(self, x) -> Any: ...
    def empty(self) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, v) -> Any: ...
    def begin(self) -> Any: ...
    def end(self) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def clear(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def pop_back(self) -> Any: ...
    def erase(self, *args) -> Any: ...
    def __init__(self: _DopObjectTuple, *args: Sequence[DopObject]) -> None: ...
    def push_back(self, x) -> Any: ...
    def front(self) -> Any: ...
    def back(self) -> Any: ...
    def assign(self, n, x) -> Any: ...
    def resize(self, *args) -> Any: ...
    def insert(self, *args) -> Any: ...
    def reserve(self, n) -> Any: ...
    def capacity(self) -> Any: ...
    __swig_destroy__: Any = ...

class EnumValue:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self: EnumValue) -> Any: ...
    def name(self: EnumValue) -> str: ...
    def __lt__(self: EnumValue, value: EnumValue) -> Any: ...

    def __repr__(self: EnumValue) -> Any: ...  ## Added by typing stub update
class numericData:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...


    Float16: EnumValue = ...  ## Added by typing stub update
    Float32: EnumValue = ...  ## Added by typing stub update
    Float64: EnumValue = ...  ## Added by typing stub update
    Int16: EnumValue = ...  ## Added by typing stub update
    Int32: EnumValue = ...  ## Added by typing stub update
    Int64: EnumValue = ...  ## Added by typing stub update
    Int8: EnumValue = ...  ## Added by typing stub update
class attribData:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Dict: EnumValue = ...  ## Added by typing stub update
    Float: EnumValue = ...  ## Added by typing stub update
    Int: EnumValue = ...  ## Added by typing stub update
    String: EnumValue = ...  ## Added by typing stub update
class attribType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Global: EnumValue = ...  ## Added by typing stub update
    Point: EnumValue = ...  ## Added by typing stub update
    Prim: EnumValue = ...  ## Added by typing stub update
    Vertex: EnumValue = ...  ## Added by typing stub update
class primType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Agent: EnumValue = ...  ## Added by typing stub update
    AlembicRef: EnumValue = ...  ## Added by typing stub update
    BezierCurve: EnumValue = ...  ## Added by typing stub update
    BezierSurface: EnumValue = ...  ## Added by typing stub update
    Circle: EnumValue = ...  ## Added by typing stub update
    Custom: EnumValue = ...  ## Added by typing stub update
    Hexahedron: EnumValue = ...  ## Added by typing stub update
    Mesh: EnumValue = ...  ## Added by typing stub update
    Metaball: EnumValue = ...  ## Added by typing stub update
    NURBSCurve: EnumValue = ...  ## Added by typing stub update
    NURBSSurface: EnumValue = ...  ## Added by typing stub update
    PackedFragment: EnumValue = ...  ## Added by typing stub update
    PackedGeometry: EnumValue = ...  ## Added by typing stub update
    PackedPrim: EnumValue = ...  ## Added by typing stub update
    ParticleSystem: EnumValue = ...  ## Added by typing stub update
    PastedSurface: EnumValue = ...  ## Added by typing stub update
    PolySoup: EnumValue = ...  ## Added by typing stub update
    Polygon: EnumValue = ...  ## Added by typing stub update
    Sphere: EnumValue = ...  ## Added by typing stub update
    Tetrahedron: EnumValue = ...  ## Added by typing stub update
    TriangleBezier: EnumValue = ...  ## Added by typing stub update
    TriangleFan: EnumValue = ...  ## Added by typing stub update
    TriangleStrip: EnumValue = ...  ## Added by typing stub update
    Tube: EnumValue = ...  ## Added by typing stub update
    Unknown: EnumValue = ...  ## Added by typing stub update
    VDB: EnumValue = ...  ## Added by typing stub update
    Volume: EnumValue = ...  ## Added by typing stub update
class parmData:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Float: EnumValue = ...  ## Added by typing stub update
    Int: EnumValue = ...  ## Added by typing stub update
    Ramp: EnumValue = ...  ## Added by typing stub update
    String: EnumValue = ...  ## Added by typing stub update
class parmTemplateType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Button: EnumValue = ...  ## Added by typing stub update
    Data: EnumValue = ...  ## Added by typing stub update
    Float: EnumValue = ...  ## Added by typing stub update
    Folder: EnumValue = ...  ## Added by typing stub update
    FolderSet: EnumValue = ...  ## Added by typing stub update
    Int: EnumValue = ...  ## Added by typing stub update
    Label: EnumValue = ...  ## Added by typing stub update
    Menu: EnumValue = ...  ## Added by typing stub update
    Ramp: EnumValue = ...  ## Added by typing stub update
    Separator: EnumValue = ...  ## Added by typing stub update
    String: EnumValue = ...  ## Added by typing stub update
    Toggle: EnumValue = ...  ## Added by typing stub update
class parmLook:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Angle: EnumValue = ...  ## Added by typing stub update
    CRGBAPlaneChooser: EnumValue = ...  ## Added by typing stub update
    ColorSquare: EnumValue = ...  ## Added by typing stub update
    HueCircle: EnumValue = ...  ## Added by typing stub update
    Logarithmic: EnumValue = ...  ## Added by typing stub update
    Regular: EnumValue = ...  ## Added by typing stub update
    Vector: EnumValue = ...  ## Added by typing stub update
class parmNamingScheme:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Base1: EnumValue = ...  ## Added by typing stub update
    BeginEnd: EnumValue = ...  ## Added by typing stub update
    MaxMin: EnumValue = ...  ## Added by typing stub update
    MinMax: EnumValue = ...  ## Added by typing stub update
    RGBA: EnumValue = ...  ## Added by typing stub update
    StartEnd: EnumValue = ...  ## Added by typing stub update
    UVW: EnumValue = ...  ## Added by typing stub update
    XYWH: EnumValue = ...  ## Added by typing stub update
    XYZW: EnumValue = ...  ## Added by typing stub update
class parmCondType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    DisableWhen: EnumValue = ...  ## Added by typing stub update
    HideWhen: EnumValue = ...  ## Added by typing stub update
    NoCookWhen: EnumValue = ...  ## Added by typing stub update
class parmExtrapolate:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Cycle: EnumValue = ...  ## Added by typing stub update
    CycleOffset: EnumValue = ...  ## Added by typing stub update
    Default: EnumValue = ...  ## Added by typing stub update
    Extend: EnumValue = ...  ## Added by typing stub update
    Hold: EnumValue = ...  ## Added by typing stub update
    Oscillate: EnumValue = ...  ## Added by typing stub update
    Slope: EnumValue = ...  ## Added by typing stub update
class parmBakeChop:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    CreateDeleteChop: EnumValue = ...  ## Added by typing stub update
    DisableExportFlag: EnumValue = ...  ## Added by typing stub update
    KeepExportFlag: EnumValue = ...  ## Added by typing stub update
    Off: EnumValue = ...  ## Added by typing stub update
class stringParmType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    FileReference: EnumValue = ...  ## Added by typing stub update
    NodeReference: EnumValue = ...  ## Added by typing stub update
    NodeReferenceList: EnumValue = ...  ## Added by typing stub update
    Regular: EnumValue = ...  ## Added by typing stub update
class labelParmType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Heading: EnumValue = ...  ## Added by typing stub update
    Label: EnumValue = ...  ## Added by typing stub update
    Message: EnumValue = ...  ## Added by typing stub update
class dataParmType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Geometry: EnumValue = ...  ## Added by typing stub update
    KeyValueDictionary: EnumValue = ...  ## Added by typing stub update
class exprLanguage:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Hscript: EnumValue = ...  ## Added by typing stub update
    Python: EnumValue = ...  ## Added by typing stub update
class scriptLanguage:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Hscript: EnumValue = ...  ## Added by typing stub update
    Python: EnumValue = ...  ## Added by typing stub update
class fileType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Alembic: EnumValue = ...  ## Added by typing stub update
    Any: EnumValue = ...  ## Added by typing stub update
    Capture: EnumValue = ...  ## Added by typing stub update
    Chan: EnumValue = ...  ## Added by typing stub update
    Clip: EnumValue = ...  ## Added by typing stub update
    Cmd: EnumValue = ...  ## Added by typing stub update
    Dae: EnumValue = ...  ## Added by typing stub update
    Directory: EnumValue = ...  ## Added by typing stub update
    Ds: EnumValue = ...  ## Added by typing stub update
    Fbx: EnumValue = ...  ## Added by typing stub update
    Gallery: EnumValue = ...  ## Added by typing stub update
    Geometry: EnumValue = ...  ## Added by typing stub update
    Gltf: EnumValue = ...  ## Added by typing stub update
    Hip: EnumValue = ...  ## Added by typing stub update
    I3d: EnumValue = ...  ## Added by typing stub update
    Icon: EnumValue = ...  ## Added by typing stub update
    Image: EnumValue = ...  ## Added by typing stub update
    LightRig: EnumValue = ...  ## Added by typing stub update
    Lut: EnumValue = ...  ## Added by typing stub update
    Midi: EnumValue = ...  ## Added by typing stub update
    Movie: EnumValue = ...  ## Added by typing stub update
    Otl: EnumValue = ...  ## Added by typing stub update
    Psd: EnumValue = ...  ## Added by typing stub update
    Ramp: EnumValue = ...  ## Added by typing stub update
    Sim: EnumValue = ...  ## Added by typing stub update
    SimData: EnumValue = ...  ## Added by typing stub update
    Sqlite: EnumValue = ...  ## Added by typing stub update
    Usd: EnumValue = ...  ## Added by typing stub update
class fileChooserMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Read: EnumValue = ...  ## Added by typing stub update
    ReadAndWrite: EnumValue = ...  ## Added by typing stub update
    Write: EnumValue = ...  ## Added by typing stub update
class folderType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Collapsible: EnumValue = ...  ## Added by typing stub update
    ImportBlock: EnumValue = ...  ## Added by typing stub update
    MultiparmBlock: EnumValue = ...  ## Added by typing stub update
    RadioButtons: EnumValue = ...  ## Added by typing stub update
    ScrollingMultiparmBlock: EnumValue = ...  ## Added by typing stub update
    Simple: EnumValue = ...  ## Added by typing stub update
    TabbedMultiparmBlock: EnumValue = ...  ## Added by typing stub update
    Tabs: EnumValue = ...  ## Added by typing stub update
class menuType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    ControlNextParameter: EnumValue = ...  ## Added by typing stub update
    Mini: EnumValue = ...  ## Added by typing stub update
    Normal: EnumValue = ...  ## Added by typing stub update
    StringReplace: EnumValue = ...  ## Added by typing stub update
    StringToggle: EnumValue = ...  ## Added by typing stub update
class paneTabType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    AssetBrowser: EnumValue = ...  ## Added by typing stub update
    BundleList: EnumValue = ...  ## Added by typing stub update
    ChannelEditor: EnumValue = ...  ## Added by typing stub update
    ChannelList: EnumValue = ...  ## Added by typing stub update
    ChannelViewer: EnumValue = ...  ## Added by typing stub update
    CompositorViewer: EnumValue = ...  ## Added by typing stub update
    ContextViewer: EnumValue = ...  ## Added by typing stub update
    DataTree: EnumValue = ...  ## Added by typing stub update
    DetailsView: EnumValue = ...  ## Added by typing stub update
    EngineSessionSync: EnumValue = ...  ## Added by typing stub update
    HandleList: EnumValue = ...  ## Added by typing stub update
    HelpBrowser: EnumValue = ...  ## Added by typing stub update
    IPRViewer: EnumValue = ...  ## Added by typing stub update
    LightLinker: EnumValue = ...  ## Added by typing stub update
    MaterialPalette: EnumValue = ...  ## Added by typing stub update
    NetworkEditor: EnumValue = ...  ## Added by typing stub update
    OutputViewer: EnumValue = ...  ## Added by typing stub update
    Parm: EnumValue = ...  ## Added by typing stub update
    ParmSpreadsheet: EnumValue = ...  ## Added by typing stub update
    PerformanceMonitor: EnumValue = ...  ## Added by typing stub update
    PythonPanel: EnumValue = ...  ## Added by typing stub update
    PythonShell: EnumValue = ...  ## Added by typing stub update
    RenderGallery: EnumValue = ...  ## Added by typing stub update
    SceneViewer: EnumValue = ...  ## Added by typing stub update
    ShaderViewer: EnumValue = ...  ## Added by typing stub update
    TakeList: EnumValue = ...  ## Added by typing stub update
    Textport: EnumValue = ...  ## Added by typing stub update
    TreeView: EnumValue = ...  ## Added by typing stub update
class stateViewerType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Compositor: EnumValue = ...  ## Added by typing stub update
    Scene: EnumValue = ...  ## Added by typing stub update
class paneLinkType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    FollowSelection: EnumValue = ...  ## Added by typing stub update
    Group1: EnumValue = ...  ## Added by typing stub update
    Group2: EnumValue = ...  ## Added by typing stub update
    Group3: EnumValue = ...  ## Added by typing stub update
    Group4: EnumValue = ...  ## Added by typing stub update
    Group5: EnumValue = ...  ## Added by typing stub update
    Group6: EnumValue = ...  ## Added by typing stub update
    Group7: EnumValue = ...  ## Added by typing stub update
    Group8: EnumValue = ...  ## Added by typing stub update
    Pinned: EnumValue = ...  ## Added by typing stub update
class networkItemType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Connection: EnumValue = ...  ## Added by typing stub update
    NetworkBox: EnumValue = ...  ## Added by typing stub update
    NetworkDot: EnumValue = ...  ## Added by typing stub update
    Node: EnumValue = ...  ## Added by typing stub update
    StickyNote: EnumValue = ...  ## Added by typing stub update
    SubnetIndirectInput: EnumValue = ...  ## Added by typing stub update
class colorItemType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    NetworkBox: EnumValue = ...  ## Added by typing stub update
    StickyNote: EnumValue = ...  ## Added by typing stub update
    StickyNoteText: EnumValue = ...  ## Added by typing stub update
class geometryViewportType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Back: EnumValue = ...  ## Added by typing stub update
    Bottom: EnumValue = ...  ## Added by typing stub update
    Front: EnumValue = ...  ## Added by typing stub update
    Left: EnumValue = ...  ## Added by typing stub update
    Perspective: EnumValue = ...  ## Added by typing stub update
    Right: EnumValue = ...  ## Added by typing stub update
    Top: EnumValue = ...  ## Added by typing stub update
    UV: EnumValue = ...  ## Added by typing stub update
class glShadingType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Flat: EnumValue = ...  ## Added by typing stub update
    FlatWire: EnumValue = ...  ## Added by typing stub update
    HiddenLineGhost: EnumValue = ...  ## Added by typing stub update
    HiddenLineInvisible: EnumValue = ...  ## Added by typing stub update
    MatCap: EnumValue = ...  ## Added by typing stub update
    MatCapWire: EnumValue = ...  ## Added by typing stub update
    ShadedBoundingBox: EnumValue = ...  ## Added by typing stub update
    Smooth: EnumValue = ...  ## Added by typing stub update
    SmoothWire: EnumValue = ...  ## Added by typing stub update
    Wire: EnumValue = ...  ## Added by typing stub update
    WireBoundingBox: EnumValue = ...  ## Added by typing stub update
    WireGhost: EnumValue = ...  ## Added by typing stub update
class viewportStereoMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Anaglyph: EnumValue = ...  ## Added by typing stub update
    HorizontalInterlace: EnumValue = ...  ## Added by typing stub update
    HorizontalInterlaceReverse: EnumValue = ...  ## Added by typing stub update
    QuadBufferGL: EnumValue = ...  ## Added by typing stub update
class viewportHomeClipMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    FarOnly: EnumValue = ...  ## Added by typing stub update
    NearAndFar: EnumValue = ...  ## Added by typing stub update
    NearOnly: EnumValue = ...  ## Added by typing stub update
    Neither: EnumValue = ...  ## Added by typing stub update
class geometryViewportLayout:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    DoubleSide: EnumValue = ...  ## Added by typing stub update
    DoubleStack: EnumValue = ...  ## Added by typing stub update
    Quad: EnumValue = ...  ## Added by typing stub update
    QuadBottomSplit: EnumValue = ...  ## Added by typing stub update
    QuadLeftSplit: EnumValue = ...  ## Added by typing stub update
    Single: EnumValue = ...  ## Added by typing stub update
    TripleBottomSplit: EnumValue = ...  ## Added by typing stub update
    TripleLeftSplit: EnumValue = ...  ## Added by typing stub update
class snappingMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Grid: EnumValue = ...  ## Added by typing stub update
    Multi: EnumValue = ...  ## Added by typing stub update
    Off: EnumValue = ...  ## Added by typing stub update
    Point: EnumValue = ...  ## Added by typing stub update
    Prim: EnumValue = ...  ## Added by typing stub update
class snapSelectionMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    SnapToAll: EnumValue = ...  ## Added by typing stub update
    SnapToNonSelected: EnumValue = ...  ## Added by typing stub update
    SnapToSelected: EnumValue = ...  ## Added by typing stub update
class selectionMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Dynamics: EnumValue = ...  ## Added by typing stub update
    Geometry: EnumValue = ...  ## Added by typing stub update
    Object: EnumValue = ...  ## Added by typing stub update
class pickStyle:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Box: EnumValue = ...  ## Added by typing stub update
    Brush: EnumValue = ...  ## Added by typing stub update
    Laser: EnumValue = ...  ## Added by typing stub update
    Lasso: EnumValue = ...  ## Added by typing stub update
class pickModifier:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Add: EnumValue = ...  ## Added by typing stub update
    Intersect: EnumValue = ...  ## Added by typing stub update
    Remove: EnumValue = ...  ## Added by typing stub update
    Replace: EnumValue = ...  ## Added by typing stub update
    Toggle: EnumValue = ...  ## Added by typing stub update
class pickFacing:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Back: EnumValue = ...  ## Added by typing stub update
    Front: EnumValue = ...  ## Added by typing stub update
    FrontAndBack: EnumValue = ...  ## Added by typing stub update
class displaySetType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    CurrentModel: EnumValue = ...  ## Added by typing stub update
    DisplayModel: EnumValue = ...  ## Added by typing stub update
    GhostObject: EnumValue = ...  ## Added by typing stub update
    SceneObject: EnumValue = ...  ## Added by typing stub update
    SelectedObject: EnumValue = ...  ## Added by typing stub update
    TemplateModel: EnumValue = ...  ## Added by typing stub update
class topCookState:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Cooked: EnumValue = ...  ## Added by typing stub update
    Cooking: EnumValue = ...  ## Added by typing stub update
    Failed: EnumValue = ...  ## Added by typing stub update
    Incomplete: EnumValue = ...  ## Added by typing stub update
    Uncooked: EnumValue = ...  ## Added by typing stub update
    Waiting: EnumValue = ...  ## Added by typing stub update
    Warning: EnumValue = ...  ## Added by typing stub update
class markerVisibility:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Always: EnumValue = ...  ## Added by typing stub update
    AroundPointer: EnumValue = ...  ## Added by typing stub update
    Selected: EnumValue = ...  ## Added by typing stub update
    UnderPointer: EnumValue = ...  ## Added by typing stub update
class viewportGuide:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    CameraMask: EnumValue = ...  ## Added by typing stub update
    CurrentGeometry: EnumValue = ...  ## Added by typing stub update
    DisplayNodes: EnumValue = ...  ## Added by typing stub update
    FieldGuide: EnumValue = ...  ## Added by typing stub update
    FillSelections: EnumValue = ...  ## Added by typing stub update
    FloatingGnomon: EnumValue = ...  ## Added by typing stub update
    FollowSelection: EnumValue = ...  ## Added by typing stub update
    GroupList: EnumValue = ...  ## Added by typing stub update
    IKCriticalZone: EnumValue = ...  ## Added by typing stub update
    NodeGuides: EnumValue = ...  ## Added by typing stub update
    NodeHandles: EnumValue = ...  ## Added by typing stub update
    ObjectNames: EnumValue = ...  ## Added by typing stub update
    ObjectPaths: EnumValue = ...  ## Added by typing stub update
    ObjectSelection: EnumValue = ...  ## Added by typing stub update
    OriginGnomon: EnumValue = ...  ## Added by typing stub update
    ParticleGnomon: EnumValue = ...  ## Added by typing stub update
    SafeArea: EnumValue = ...  ## Added by typing stub update
    SelectableTemplates: EnumValue = ...  ## Added by typing stub update
    ShowDrawTime: EnumValue = ...  ## Added by typing stub update
    TemplateGeometry: EnumValue = ...  ## Added by typing stub update
    ViewPivot: EnumValue = ...  ## Added by typing stub update
    XYPlane: EnumValue = ...  ## Added by typing stub update
    XZPlane: EnumValue = ...  ## Added by typing stub update
    YZPlane: EnumValue = ...  ## Added by typing stub update
class viewportGeometryInfo:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    AlwaysOn: EnumValue = ...  ## Added by typing stub update
    Off: EnumValue = ...  ## Added by typing stub update
    SelectedOnly: EnumValue = ...  ## Added by typing stub update
class viewportDefaultMaterial:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    MatCap: EnumValue = ...  ## Added by typing stub update
    Simple: EnumValue = ...  ## Added by typing stub update
class viewportHandleHighlight:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Normal: EnumValue = ...  ## Added by typing stub update
    Off: EnumValue = ...  ## Added by typing stub update
    Small: EnumValue = ...  ## Added by typing stub update
class viewportClosureSelection:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Hide: EnumValue = ...  ## Added by typing stub update
    HullPrimitives: EnumValue = ...  ## Added by typing stub update
    Show: EnumValue = ...  ## Added by typing stub update
class viewportGuideFont:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Large: EnumValue = ...  ## Added by typing stub update
    Medium: EnumValue = ...  ## Added by typing stub update
    Small: EnumValue = ...  ## Added by typing stub update
    Tiny: EnumValue = ...  ## Added by typing stub update
class viewportVolumeQuality:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    High: EnumValue = ...  ## Added by typing stub update
    Low: EnumValue = ...  ## Added by typing stub update
    Normal: EnumValue = ...  ## Added by typing stub update
    VeryLow: EnumValue = ...  ## Added by typing stub update
class viewportVolumeBSplines:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    NonInteractive: EnumValue = ...  ## Added by typing stub update
    Off: EnumValue = ...  ## Added by typing stub update
    On: EnumValue = ...  ## Added by typing stub update
class viewportBGImageView:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Back: EnumValue = ...  ## Added by typing stub update
    Bottom: EnumValue = ...  ## Added by typing stub update
    Camera: EnumValue = ...  ## Added by typing stub update
    Front: EnumValue = ...  ## Added by typing stub update
    Left: EnumValue = ...  ## Added by typing stub update
    Perspective: EnumValue = ...  ## Added by typing stub update
    Right: EnumValue = ...  ## Added by typing stub update
    Top: EnumValue = ...  ## Added by typing stub update
    UV: EnumValue = ...  ## Added by typing stub update
class viewportColorScheme:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Dark: EnumValue = ...  ## Added by typing stub update
    Grey: EnumValue = ...  ## Added by typing stub update
    Light: EnumValue = ...  ## Added by typing stub update
class viewportParticleDisplay:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Discs: EnumValue = ...  ## Added by typing stub update
    Lines: EnumValue = ...  ## Added by typing stub update
    Pixels: EnumValue = ...  ## Added by typing stub update
    Points: EnumValue = ...  ## Added by typing stub update
    Spheres: EnumValue = ...  ## Added by typing stub update
class viewportStandInGeometry:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    BoundingBox: EnumValue = ...  ## Added by typing stub update
    DisplayOff: EnumValue = ...  ## Added by typing stub update
    LocationMarker: EnumValue = ...  ## Added by typing stub update
class viewportLighting:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Headlight: EnumValue = ...  ## Added by typing stub update
    HighQuality: EnumValue = ...  ## Added by typing stub update
    HighQualityWithShadows: EnumValue = ...  ## Added by typing stub update
    Normal: EnumValue = ...  ## Added by typing stub update
    Off: EnumValue = ...  ## Added by typing stub update
class viewportTransparency:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Cutout: EnumValue = ...  ## Added by typing stub update
    High: EnumValue = ...  ## Added by typing stub update
    Low: EnumValue = ...  ## Added by typing stub update
    Medium: EnumValue = ...  ## Added by typing stub update
class viewportShadowQuality:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Area: EnumValue = ...  ## Added by typing stub update
    AreaAA: EnumValue = ...  ## Added by typing stub update
    Point: EnumValue = ...  ## Added by typing stub update
    PointAA: EnumValue = ...  ## Added by typing stub update
class viewportDOFBokeh:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Circular: EnumValue = ...  ## Added by typing stub update
    NoBokeh: EnumValue = ...  ## Added by typing stub update
    Texture: EnumValue = ...  ## Added by typing stub update
class viewportFogHeightMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Above: EnumValue = ...  ## Added by typing stub update
    Below: EnumValue = ...  ## Added by typing stub update
    Off: EnumValue = ...  ## Added by typing stub update
class viewportFogQuality:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    High: EnumValue = ...  ## Added by typing stub update
    Low: EnumValue = ...  ## Added by typing stub update
    Medium: EnumValue = ...  ## Added by typing stub update
    VeryHigh: EnumValue = ...  ## Added by typing stub update
class viewportMaterialUpdate:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Always: EnumValue = ...  ## Added by typing stub update
    Manual: EnumValue = ...  ## Added by typing stub update
    OffForPlayback: EnumValue = ...  ## Added by typing stub update
class viewportAgentBoneDeform:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Always: EnumValue = ...  ## Added by typing stub update
    Disabled: EnumValue = ...  ## Added by typing stub update
    ReducedLOD: EnumValue = ...  ## Added by typing stub update
class viewportAgentWireframe:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Bone: EnumValue = ...  ## Added by typing stub update
    Line: EnumValue = ...  ## Added by typing stub update
class viewportPackedBoxMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    CurrentShadingMode: EnumValue = ...  ## Added by typing stub update
    NoDisplay: EnumValue = ...  ## Added by typing stub update
    Shaded: EnumValue = ...  ## Added by typing stub update
    Wireframe: EnumValue = ...  ## Added by typing stub update
class viewportGridRuler:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    GridPoints: EnumValue = ...  ## Added by typing stub update
    Hide: EnumValue = ...  ## Added by typing stub update
    MainAxis: EnumValue = ...  ## Added by typing stub update
class viewportTextureDepth:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Compressed8: EnumValue = ...  ## Added by typing stub update
    Fixed8: EnumValue = ...  ## Added by typing stub update
    FullHDR: EnumValue = ...  ## Added by typing stub update
    HDR16: EnumValue = ...  ## Added by typing stub update
class boundaryDisplay:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Off: EnumValue = ...  ## Added by typing stub update
    On: EnumValue = ...  ## Added by typing stub update
    View3D: EnumValue = ...  ## Added by typing stub update
    ViewUV: EnumValue = ...  ## Added by typing stub update
class flipbookObjectType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    AllObjects: EnumValue = ...  ## Added by typing stub update
    GeoExcluded: EnumValue = ...  ## Added by typing stub update
    GeoOnly: EnumValue = ...  ## Added by typing stub update
    Visible: EnumValue = ...  ## Added by typing stub update
class groupListType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Breakpoints: EnumValue = ...  ## Added by typing stub update
    Edges: EnumValue = ...  ## Added by typing stub update
    MatchPickType: EnumValue = ...  ## Added by typing stub update
    Points: EnumValue = ...  ## Added by typing stub update
    Primitives: EnumValue = ...  ## Added by typing stub update
    Vertices: EnumValue = ...  ## Added by typing stub update
class geometryType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Breakpoints: EnumValue = ...  ## Added by typing stub update
    Edges: EnumValue = ...  ## Added by typing stub update
    Points: EnumValue = ...  ## Added by typing stub update
    Primitives: EnumValue = ...  ## Added by typing stub update
    Vertices: EnumValue = ...  ## Added by typing stub update
class connectivityType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    NoConnectivity: EnumValue = ...  ## Added by typing stub update
    Position: EnumValue = ...  ## Added by typing stub update
    Texture: EnumValue = ...  ## Added by typing stub update
class severityType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Error: EnumValue = ...  ## Added by typing stub update
    Fatal: EnumValue = ...  ## Added by typing stub update
    ImportantMessage: EnumValue = ...  ## Added by typing stub update
    Message: EnumValue = ...  ## Added by typing stub update
    Warning: EnumValue = ...  ## Added by typing stub update
class confirmType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    BackgroundSave: EnumValue = ...  ## Added by typing stub update
    DeleteGalleryEntry: EnumValue = ...  ## Added by typing stub update
    DeleteShelfElement: EnumValue = ...  ## Added by typing stub update
    DeleteSpareParameters: EnumValue = ...  ## Added by typing stub update
    DeleteWithoutReferences: EnumValue = ...  ## Added by typing stub update
    InactiveSnapMode: EnumValue = ...  ## Added by typing stub update
    LockMultiNode: EnumValue = ...  ## Added by typing stub update
    NestedChannelGroups: EnumValue = ...  ## Added by typing stub update
    OverwriteFile: EnumValue = ...  ## Added by typing stub update
    SaveEmbeddedDefinitions: EnumValue = ...  ## Added by typing stub update
    SiblingChannelGroups: EnumValue = ...  ## Added by typing stub update
    TopCookSave: EnumValue = ...  ## Added by typing stub update
    TopDeleteResults: EnumValue = ...  ## Added by typing stub update
    TopDeleteTempDir: EnumValue = ...  ## Added by typing stub update
    TopHotKeyCancelCook: EnumValue = ...  ## Added by typing stub update
    TopTerminateRemoteSession: EnumValue = ...  ## Added by typing stub update
    TopViewResults: EnumValue = ...  ## Added by typing stub update
    UnlockNode: EnumValue = ...  ## Added by typing stub update
class positionType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    ViewportUV: EnumValue = ...  ## Added by typing stub update
    ViewportXY: EnumValue = ...  ## Added by typing stub update
    WorldSpace: EnumValue = ...  ## Added by typing stub update
class componentLoopType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Closed: EnumValue = ...  ## Added by typing stub update
    Extended: EnumValue = ...  ## Added by typing stub update
    Partial: EnumValue = ...  ## Added by typing stub update
class flipbookAntialias:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Fast: EnumValue = ...  ## Added by typing stub update
    Good: EnumValue = ...  ## Added by typing stub update
    HighQuality: EnumValue = ...  ## Added by typing stub update
    Off: EnumValue = ...  ## Added by typing stub update
    UseViewportSetting: EnumValue = ...  ## Added by typing stub update
class flipbookMotionBlurBias:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Centered: EnumValue = ...  ## Added by typing stub update
    Forward: EnumValue = ...  ## Added by typing stub update
    Previous: EnumValue = ...  ## Added by typing stub update
class parameterInterfaceTabType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    NodeParameters: EnumValue = ...  ## Added by typing stub update
    NodeProperties: EnumValue = ...  ## Added by typing stub update
    ParameterTypes: EnumValue = ...  ## Added by typing stub update
    RenderProperties: EnumValue = ...  ## Added by typing stub update
    UsdProperties: EnumValue = ...  ## Added by typing stub update
class shaderType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Atmosphere: EnumValue = ...  ## Added by typing stub update
    BSDF: EnumValue = ...  ## Added by typing stub update
    Background: EnumValue = ...  ## Added by typing stub update
    CVEX: EnumValue = ...  ## Added by typing stub update
    Displacement: EnumValue = ...  ## Added by typing stub update
    Geometry: EnumValue = ...  ## Added by typing stub update
    Image3D: EnumValue = ...  ## Added by typing stub update
    Interior: EnumValue = ...  ## Added by typing stub update
    Invalid: EnumValue = ...  ## Added by typing stub update
    Lens: EnumValue = ...  ## Added by typing stub update
    Light: EnumValue = ...  ## Added by typing stub update
    LightShadow: EnumValue = ...  ## Added by typing stub update
    Material: EnumValue = ...  ## Added by typing stub update
    Mutable: EnumValue = ...  ## Added by typing stub update
    Output: EnumValue = ...  ## Added by typing stub update
    Photon: EnumValue = ...  ## Added by typing stub update
    Properties: EnumValue = ...  ## Added by typing stub update
    ShaderClass: EnumValue = ...  ## Added by typing stub update
    Surface: EnumValue = ...  ## Added by typing stub update
    SurfaceShadow: EnumValue = ...  ## Added by typing stub update
    VopMaterial: EnumValue = ...  ## Added by typing stub update
class rampBasis:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    BSpline: EnumValue = ...  ## Added by typing stub update
    Bezier: EnumValue = ...  ## Added by typing stub update
    CatmullRom: EnumValue = ...  ## Added by typing stub update
    Constant: EnumValue = ...  ## Added by typing stub update
    Hermite: EnumValue = ...  ## Added by typing stub update
    Linear: EnumValue = ...  ## Added by typing stub update
    MonotoneCubic: EnumValue = ...  ## Added by typing stub update
class rampParmType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Color: EnumValue = ...  ## Added by typing stub update
    Float: EnumValue = ...  ## Added by typing stub update
class colorType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    HSL: EnumValue = ...  ## Added by typing stub update
    HSV: EnumValue = ...  ## Added by typing stub update
    LAB: EnumValue = ...  ## Added by typing stub update
    RGB: EnumValue = ...  ## Added by typing stub update
    XYZ: EnumValue = ...  ## Added by typing stub update
class nodeTypeSource:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    CompiledCode: EnumValue = ...  ## Added by typing stub update
    Internal: EnumValue = ...  ## Added by typing stub update
    RslCode: EnumValue = ...  ## Added by typing stub update
    Subnet: EnumValue = ...  ## Added by typing stub update
    VexCode: EnumValue = ...  ## Added by typing stub update
class fieldType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Boolean: EnumValue = ...  ## Added by typing stub update
    Dict: EnumValue = ...  ## Added by typing stub update
    DictArray: EnumValue = ...  ## Added by typing stub update
    Float: EnumValue = ...  ## Added by typing stub update
    FloatArray: EnumValue = ...  ## Added by typing stub update
    IntArray: EnumValue = ...  ## Added by typing stub update
    Integer: EnumValue = ...  ## Added by typing stub update
    Matrix3: EnumValue = ...  ## Added by typing stub update
    Matrix4: EnumValue = ...  ## Added by typing stub update
    NoSuchField: EnumValue = ...  ## Added by typing stub update
    Quaternion: EnumValue = ...  ## Added by typing stub update
    String: EnumValue = ...  ## Added by typing stub update
    UV: EnumValue = ...  ## Added by typing stub update
    UVW: EnumValue = ...  ## Added by typing stub update
    Vector2: EnumValue = ...  ## Added by typing stub update
    Vector3: EnumValue = ...  ## Added by typing stub update
    Vector4: EnumValue = ...  ## Added by typing stub update
class renderMethod:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    FrameByFrame: EnumValue = ...  ## Added by typing stub update
    RopByRop: EnumValue = ...  ## Added by typing stub update
class updateMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    AutoUpdate: EnumValue = ...  ## Added by typing stub update
    Manual: EnumValue = ...  ## Added by typing stub update
    OnMouseUp: EnumValue = ...  ## Added by typing stub update
class licenseCategoryType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Apprentice: EnumValue = ...  ## Added by typing stub update
    ApprenticeHD: EnumValue = ...  ## Added by typing stub update
    Commercial: EnumValue = ...  ## Added by typing stub update
    Education: EnumValue = ...  ## Added by typing stub update
    Indie: EnumValue = ...  ## Added by typing stub update
class hdaLicenseType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Execute: EnumValue = ...  ## Added by typing stub update
    Full: EnumValue = ...  ## Added by typing stub update
    Read: EnumValue = ...  ## Added by typing stub update
class orientUpAxis:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Y: EnumValue = ...  ## Added by typing stub update
    Z: EnumValue = ...  ## Added by typing stub update
class handleOrientToNormalAxis:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Y: EnumValue = ...  ## Added by typing stub update
    Z: EnumValue = ...  ## Added by typing stub update
class nodeEventType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    AppearanceChanged: EnumValue = ...  ## Added by typing stub update
    BeingDeleted: EnumValue = ...  ## Added by typing stub update
    ChildCreated: EnumValue = ...  ## Added by typing stub update
    ChildDeleted: EnumValue = ...  ## Added by typing stub update
    ChildSelectionChanged: EnumValue = ...  ## Added by typing stub update
    ChildSwitched: EnumValue = ...  ## Added by typing stub update
    CustomDataChanged: EnumValue = ...  ## Added by typing stub update
    FlagChanged: EnumValue = ...  ## Added by typing stub update
    IndirectInputCreated: EnumValue = ...  ## Added by typing stub update
    IndirectInputDeleted: EnumValue = ...  ## Added by typing stub update
    InputDataChanged: EnumValue = ...  ## Added by typing stub update
    InputRewired: EnumValue = ...  ## Added by typing stub update
    NameChanged: EnumValue = ...  ## Added by typing stub update
    NetworkBoxChanged: EnumValue = ...  ## Added by typing stub update
    NetworkBoxCreated: EnumValue = ...  ## Added by typing stub update
    NetworkBoxDeleted: EnumValue = ...  ## Added by typing stub update
    ParmTupleAnimated: EnumValue = ...  ## Added by typing stub update
    ParmTupleChanged: EnumValue = ...  ## Added by typing stub update
    ParmTupleChannelChanged: EnumValue = ...  ## Added by typing stub update
    PositionChanged: EnumValue = ...  ## Added by typing stub update
    SelectionChanged: EnumValue = ...  ## Added by typing stub update
    SpareParmTemplatesChanged: EnumValue = ...  ## Added by typing stub update
    StickyNoteChanged: EnumValue = ...  ## Added by typing stub update
    StickyNoteCreated: EnumValue = ...  ## Added by typing stub update
    StickyNoteDeleted: EnumValue = ...  ## Added by typing stub update
    WorkItemSelectionChanged: EnumValue = ...  ## Added by typing stub update
class hdaEventType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    AssetCreated: EnumValue = ...  ## Added by typing stub update
    AssetDeleted: EnumValue = ...  ## Added by typing stub update
    AssetSaved: EnumValue = ...  ## Added by typing stub update
    BeforeAssetCreated: EnumValue = ...  ## Added by typing stub update
    BeforeAssetDeleted: EnumValue = ...  ## Added by typing stub update
    BeforeAssetSaved: EnumValue = ...  ## Added by typing stub update
    LibraryInstalled: EnumValue = ...  ## Added by typing stub update
    LibraryUninstalled: EnumValue = ...  ## Added by typing stub update
class hipFileEventType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    AfterClear: EnumValue = ...  ## Added by typing stub update
    AfterLoad: EnumValue = ...  ## Added by typing stub update
    AfterMerge: EnumValue = ...  ## Added by typing stub update
    AfterSave: EnumValue = ...  ## Added by typing stub update
    BeforeClear: EnumValue = ...  ## Added by typing stub update
    BeforeLoad: EnumValue = ...  ## Added by typing stub update
    BeforeMerge: EnumValue = ...  ## Added by typing stub update
    BeforeSave: EnumValue = ...  ## Added by typing stub update
class appearanceChangeType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    ActiveInput: EnumValue = ...  ## Added by typing stub update
    Any: EnumValue = ...  ## Added by typing stub update
    Color: EnumValue = ...  ## Added by typing stub update
    CommentLockFlag: EnumValue = ...  ## Added by typing stub update
    CompressFlag: EnumValue = ...  ## Added by typing stub update
    Connections: EnumValue = ...  ## Added by typing stub update
    DeleteScript: EnumValue = ...  ## Added by typing stub update
    ErrorState: EnumValue = ...  ## Added by typing stub update
    ExpressionLanguage: EnumValue = ...  ## Added by typing stub update
    NetworkBox: EnumValue = ...  ## Added by typing stub update
    OTLMatchState: EnumValue = ...  ## Added by typing stub update
    Pick: EnumValue = ...  ## Added by typing stub update
    PostIt: EnumValue = ...  ## Added by typing stub update
class ropRenderEventType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    PostFrame: EnumValue = ...  ## Added by typing stub update
    PostRender: EnumValue = ...  ## Added by typing stub update
    PostWrite: EnumValue = ...  ## Added by typing stub update
    PreFrame: EnumValue = ...  ## Added by typing stub update
    PreRender: EnumValue = ...  ## Added by typing stub update
class imageDepth:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Float16: EnumValue = ...  ## Added by typing stub update
    Float32: EnumValue = ...  ## Added by typing stub update
    Int16: EnumValue = ...  ## Added by typing stub update
    Int32: EnumValue = ...  ## Added by typing stub update
    Int8: EnumValue = ...  ## Added by typing stub update
class playMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Loop: EnumValue = ...  ## Added by typing stub update
    Once: EnumValue = ...  ## Added by typing stub update
    Zigzag: EnumValue = ...  ## Added by typing stub update
class playbarEvent:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    FrameChanged: EnumValue = ...  ## Added by typing stub update
    Started: EnumValue = ...  ## Added by typing stub update
    Stopped: EnumValue = ...  ## Added by typing stub update
class perfMonTimeFormat:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Absolute: EnumValue = ...  ## Added by typing stub update
    Percent: EnumValue = ...  ## Added by typing stub update
class perfMonTimeUnit:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Milliseconds: EnumValue = ...  ## Added by typing stub update
    Seconds: EnumValue = ...  ## Added by typing stub update
class perfMonObjectView:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    EventLog: EnumValue = ...  ## Added by typing stub update
    List: EnumValue = ...  ## Added by typing stub update
    Tree: EnumValue = ...  ## Added by typing stub update
class compressionType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Blosc: EnumValue = ...  ## Added by typing stub update
    Gzip: EnumValue = ...  ## Added by typing stub update
    NoCompression: EnumValue = ...  ## Added by typing stub update
class nodeTypeFilter:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Chop: EnumValue = ...  ## Added by typing stub update
    Chopnet: EnumValue = ...  ## Added by typing stub update
    Cop: EnumValue = ...  ## Added by typing stub update
    Copnet: EnumValue = ...  ## Added by typing stub update
    Dop: EnumValue = ...  ## Added by typing stub update
    Lop: EnumValue = ...  ## Added by typing stub update
    NoFilter: EnumValue = ...  ## Added by typing stub update
    Obj: EnumValue = ...  ## Added by typing stub update
    ObjBone: EnumValue = ...  ## Added by typing stub update
    ObjCamera: EnumValue = ...  ## Added by typing stub update
    ObjFog: EnumValue = ...  ## Added by typing stub update
    ObjGeometry: EnumValue = ...  ## Added by typing stub update
    ObjGeometryOrFog: EnumValue = ...  ## Added by typing stub update
    ObjLight: EnumValue = ...  ## Added by typing stub update
    ObjMuscle: EnumValue = ...  ## Added by typing stub update
    ObjSubnet: EnumValue = ...  ## Added by typing stub update
    Rop: EnumValue = ...  ## Added by typing stub update
    Shop: EnumValue = ...  ## Added by typing stub update
    ShopAtmosphere: EnumValue = ...  ## Added by typing stub update
    ShopCVEX: EnumValue = ...  ## Added by typing stub update
    ShopDisplacement: EnumValue = ...  ## Added by typing stub update
    ShopImage3D: EnumValue = ...  ## Added by typing stub update
    ShopInterior: EnumValue = ...  ## Added by typing stub update
    ShopLight: EnumValue = ...  ## Added by typing stub update
    ShopLightShadow: EnumValue = ...  ## Added by typing stub update
    ShopMaterial: EnumValue = ...  ## Added by typing stub update
    ShopPhoton: EnumValue = ...  ## Added by typing stub update
    ShopProperties: EnumValue = ...  ## Added by typing stub update
    ShopSurface: EnumValue = ...  ## Added by typing stub update
    Sop: EnumValue = ...  ## Added by typing stub update
    Top: EnumValue = ...  ## Added by typing stub update
    TopPartitioner: EnumValue = ...  ## Added by typing stub update
    TopProcessor: EnumValue = ...  ## Added by typing stub update
    TopScheduler: EnumValue = ...  ## Added by typing stub update
    Vop: EnumValue = ...  ## Added by typing stub update
    Vopnet: EnumValue = ...  ## Added by typing stub update
class vdbData:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Boolean: EnumValue = ...  ## Added by typing stub update
    Float: EnumValue = ...  ## Added by typing stub update
    Int: EnumValue = ...  ## Added by typing stub update
    Vector3: EnumValue = ...  ## Added by typing stub update
class lopViewportOverridesLayer:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Base: EnumValue = ...  ## Added by typing stub update
    Custom: EnumValue = ...  ## Added by typing stub update
    Selectable: EnumValue = ...  ## Added by typing stub update
    SoloGeometry: EnumValue = ...  ## Added by typing stub update
    SoloLights: EnumValue = ...  ## Added by typing stub update
class channelEditorMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

class vopParmGenType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Constant: EnumValue = ...  ## Added by typing stub update
    Parameter: EnumValue = ...  ## Added by typing stub update
    SubnetInput: EnumValue = ...  ## Added by typing stub update
class stateGenerateMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Branch: EnumValue = ...  ## Added by typing stub update
    Enter: EnumValue = ...  ## Added by typing stub update
    Insert: EnumValue = ...  ## Added by typing stub update
class scenePrimMask:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    All: EnumValue = ...  ## Added by typing stub update
    Camera: EnumValue = ...  ## Added by typing stub update
    Geometry: EnumValue = ...  ## Added by typing stub update
    Light: EnumValue = ...  ## Added by typing stub update
    LightAndCamera: EnumValue = ...  ## Added by typing stub update
    ViewerSetting: EnumValue = ...  ## Added by typing stub update
class viewportVisualizerCategory:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Common: EnumValue = ...  ## Added by typing stub update
    Node: EnumValue = ...  ## Added by typing stub update
    Scene: EnumValue = ...  ## Added by typing stub update
class viewportVisualizerScope:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    AllDescendents: EnumValue = ...  ## Added by typing stub update
    Global: EnumValue = ...  ## Added by typing stub update
    NodeOnly: EnumValue = ...  ## Added by typing stub update
    SameNetworkTypeDescendents: EnumValue = ...  ## Added by typing stub update
class nodeFlag:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Audio: EnumValue = ...  ## Added by typing stub update
    Bypass: EnumValue = ...  ## Added by typing stub update
    ColorDefault: EnumValue = ...  ## Added by typing stub update
    Compress: EnumValue = ...  ## Added by typing stub update
    Current: EnumValue = ...  ## Added by typing stub update
    Debug: EnumValue = ...  ## Added by typing stub update
    Display: EnumValue = ...  ## Added by typing stub update
    DisplayComment: EnumValue = ...  ## Added by typing stub update
    DisplayDescriptiveName: EnumValue = ...  ## Added by typing stub update
    Export: EnumValue = ...  ## Added by typing stub update
    Expose: EnumValue = ...  ## Added by typing stub update
    Footprint: EnumValue = ...  ## Added by typing stub update
    Highlight: EnumValue = ...  ## Added by typing stub update
    InOutDetailHigh: EnumValue = ...  ## Added by typing stub update
    InOutDetailLow: EnumValue = ...  ## Added by typing stub update
    InOutDetailMedium: EnumValue = ...  ## Added by typing stub update
    Lock: EnumValue = ...  ## Added by typing stub update
    Material: EnumValue = ...  ## Added by typing stub update
    Origin: EnumValue = ...  ## Added by typing stub update
    OutputForDisplay: EnumValue = ...  ## Added by typing stub update
    Pick: EnumValue = ...  ## Added by typing stub update
    Render: EnumValue = ...  ## Added by typing stub update
    Selectable: EnumValue = ...  ## Added by typing stub update
    SoftLock: EnumValue = ...  ## Added by typing stub update
    Template: EnumValue = ...  ## Added by typing stub update
    Unload: EnumValue = ...  ## Added by typing stub update
    Visible: EnumValue = ...  ## Added by typing stub update
    XRay: EnumValue = ...  ## Added by typing stub update
class nodeFootprint:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    InsertionPoint: EnumValue = ...  ## Added by typing stub update
class fbxCompatibilityMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    FBXStandard: EnumValue = ...  ## Added by typing stub update
    Maya: EnumValue = ...  ## Added by typing stub update
class fbxMaterialMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    FBXShaderNodes: EnumValue = ...  ## Added by typing stub update
    PrincipledShaders: EnumValue = ...  ## Added by typing stub update
    VopNetworks: EnumValue = ...  ## Added by typing stub update
class saveMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Binary: EnumValue = ...  ## Added by typing stub update
    Text: EnumValue = ...  ## Added by typing stub update
class radialItemType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Script: EnumValue = ...  ## Added by typing stub update
    Submenu: EnumValue = ...  ## Added by typing stub update
class radialItemLocation:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Bottom: EnumValue = ...  ## Added by typing stub update
    BottomLeft: EnumValue = ...  ## Added by typing stub update
    BottomRight: EnumValue = ...  ## Added by typing stub update
    Left: EnumValue = ...  ## Added by typing stub update
    Right: EnumValue = ...  ## Added by typing stub update
    Top: EnumValue = ...  ## Added by typing stub update
    TopLeft: EnumValue = ...  ## Added by typing stub update
    TopRight: EnumValue = ...  ## Added by typing stub update
class valueLadderType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Angle: EnumValue = ...  ## Added by typing stub update
    Generic: EnumValue = ...  ## Added by typing stub update
class valueLadderDataType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Float: EnumValue = ...  ## Added by typing stub update
    FloatArray: EnumValue = ...  ## Added by typing stub update
    Int: EnumValue = ...  ## Added by typing stub update
    IntArray: EnumValue = ...  ## Added by typing stub update
class promptMessageType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Error: EnumValue = ...  ## Added by typing stub update
    Message: EnumValue = ...  ## Added by typing stub update
    Prompt: EnumValue = ...  ## Added by typing stub update
    Warning: EnumValue = ...  ## Added by typing stub update
class drawableDisplayMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    CurrentViewportMode: EnumValue = ...  ## Added by typing stub update
    WireframeMode: EnumValue = ...  ## Added by typing stub update
class scaleInheritanceMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Default: EnumValue = ...  ## Added by typing stub update
    Ignore: EnumValue = ...  ## Added by typing stub update
    OffsetAndScale: EnumValue = ...  ## Added by typing stub update
    OffsetOnly: EnumValue = ...  ## Added by typing stub update
    ScaleOnly: EnumValue = ...  ## Added by typing stub update
class uiEventValueType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Float: EnumValue = ...  ## Added by typing stub update
    FloatArray: EnumValue = ...  ## Added by typing stub update
    IntArray: EnumValue = ...  ## Added by typing stub update
    Integer: EnumValue = ...  ## Added by typing stub update
    NoType: EnumValue = ...  ## Added by typing stub update
    String: EnumValue = ...  ## Added by typing stub update
    StringArray: EnumValue = ...  ## Added by typing stub update
class uiEventReason:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Active: EnumValue = ...  ## Added by typing stub update
    Changed: EnumValue = ...  ## Added by typing stub update
    ItemsChanged: EnumValue = ...  ## Added by typing stub update
    Located: EnumValue = ...  ## Added by typing stub update
    New: EnumValue = ...  ## Added by typing stub update
    NoReason: EnumValue = ...  ## Added by typing stub update
    Picked: EnumValue = ...  ## Added by typing stub update
    RangeChanged: EnumValue = ...  ## Added by typing stub update
    Start: EnumValue = ...  ## Added by typing stub update
class drawablePrimitive:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Circle: EnumValue = ...  ## Added by typing stub update
    Sphere: EnumValue = ...  ## Added by typing stub update
    Tube: EnumValue = ...  ## Added by typing stub update
class resourceEventMessage:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    NoEventType: EnumValue = ...  ## Added by typing stub update
    OnActivate: EnumValue = ...  ## Added by typing stub update
    OnCustomEvent: EnumValue = ...  ## Added by typing stub update
    OnDeactivate: EnumValue = ...  ## Added by typing stub update
    OnEnter: EnumValue = ...  ## Added by typing stub update
    OnExit: EnumValue = ...  ## Added by typing stub update
    OnGenerate: EnumValue = ...  ## Added by typing stub update
    OnInterrupt: EnumValue = ...  ## Added by typing stub update
    OnLoad: EnumValue = ...  ## Added by typing stub update
    OnPreEnter: EnumValue = ...  ## Added by typing stub update
    OnPrintMessage: EnumValue = ...  ## Added by typing stub update
    OnRegister: EnumValue = ...  ## Added by typing stub update
    OnReload: EnumValue = ...  ## Added by typing stub update
    OnResume: EnumValue = ...  ## Added by typing stub update
    OnRuntimeError: EnumValue = ...  ## Added by typing stub update
    OnUnload: EnumValue = ...  ## Added by typing stub update
    OnUnregister: EnumValue = ...  ## Added by typing stub update
class snappingPriority:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Breakpoint: EnumValue = ...  ## Added by typing stub update
    GeoEdge: EnumValue = ...  ## Added by typing stub update
    GeoPoint: EnumValue = ...  ## Added by typing stub update
    GeoPrim: EnumValue = ...  ## Added by typing stub update
    GridEdge: EnumValue = ...  ## Added by typing stub update
    GridPoint: EnumValue = ...  ## Added by typing stub update
    Midpoint: EnumValue = ...  ## Added by typing stub update
    PrimGuideEdge: EnumValue = ...  ## Added by typing stub update
    PrimGuidePoint: EnumValue = ...  ## Added by typing stub update
class triggerSelectorAction:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Start: EnumValue = ...  ## Added by typing stub update
    Stop: EnumValue = ...  ## Added by typing stub update
    Toggle: EnumValue = ...  ## Added by typing stub update
class drawableGeometryType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Face: EnumValue = ...  ## Added by typing stub update
    Line: EnumValue = ...  ## Added by typing stub update
    Point: EnumValue = ...  ## Added by typing stub update
    Vector: EnumValue = ...  ## Added by typing stub update
class drawableTextOrigin:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    BottomCenter: EnumValue = ...  ## Added by typing stub update
    BottomLeft: EnumValue = ...  ## Added by typing stub update
    BottomRight: EnumValue = ...  ## Added by typing stub update
    LeftCenter: EnumValue = ...  ## Added by typing stub update
    RightCenter: EnumValue = ...  ## Added by typing stub update
    UpperCenter: EnumValue = ...  ## Added by typing stub update
    UpperLeft: EnumValue = ...  ## Added by typing stub update
    UpperRight: EnumValue = ...  ## Added by typing stub update
class drawableGeometryFaceStyle:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Checker: EnumValue = ...  ## Added by typing stub update
    Circle: EnumValue = ...  ## Added by typing stub update
    Columns: EnumValue = ...  ## Added by typing stub update
    Plain: EnumValue = ...  ## Added by typing stub update
    Rows: EnumValue = ...  ## Added by typing stub update
class drawableGeometryLineStyle:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Dash1: EnumValue = ...  ## Added by typing stub update
    Dash2: EnumValue = ...  ## Added by typing stub update
    Dash3: EnumValue = ...  ## Added by typing stub update
    Dot1: EnumValue = ...  ## Added by typing stub update
    Dot2: EnumValue = ...  ## Added by typing stub update
    Dot3: EnumValue = ...  ## Added by typing stub update
    Dot4: EnumValue = ...  ## Added by typing stub update
    Plain: EnumValue = ...  ## Added by typing stub update
class drawableGeometryPointStyle:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    ArrowUp: EnumValue = ...  ## Added by typing stub update
    Cross: EnumValue = ...  ## Added by typing stub update
    Cube: EnumValue = ...  ## Added by typing stub update
    Diamond: EnumValue = ...  ## Added by typing stub update
    Diamond2: EnumValue = ...  ## Added by typing stub update
    Diamond3: EnumValue = ...  ## Added by typing stub update
    Flare: EnumValue = ...  ## Added by typing stub update
    Frame: EnumValue = ...  ## Added by typing stub update
    Frame2: EnumValue = ...  ## Added by typing stub update
    Frame3: EnumValue = ...  ## Added by typing stub update
    LinearCircle: EnumValue = ...  ## Added by typing stub update
    LinearSquare: EnumValue = ...  ## Added by typing stub update
    Locate: EnumValue = ...  ## Added by typing stub update
    Locate2: EnumValue = ...  ## Added by typing stub update
    Plus: EnumValue = ...  ## Added by typing stub update
    Ring: EnumValue = ...  ## Added by typing stub update
    Ring2: EnumValue = ...  ## Added by typing stub update
    Ring3: EnumValue = ...  ## Added by typing stub update
    Ring4: EnumValue = ...  ## Added by typing stub update
    Ring5: EnumValue = ...  ## Added by typing stub update
    RingsCircle: EnumValue = ...  ## Added by typing stub update
    RingsSquare: EnumValue = ...  ## Added by typing stub update
    SmoothCircle: EnumValue = ...  ## Added by typing stub update
    SmoothSquare: EnumValue = ...  ## Added by typing stub update
    Target1: EnumValue = ...  ## Added by typing stub update
    Target2: EnumValue = ...  ## Added by typing stub update
    Target3: EnumValue = ...  ## Added by typing stub update
    Target4: EnumValue = ...  ## Added by typing stub update
    TriangleDown: EnumValue = ...  ## Added by typing stub update
    TriangleUp: EnumValue = ...  ## Added by typing stub update
class drawableRampClamp:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Border: EnumValue = ...  ## Added by typing stub update
    Edge: EnumValue = ...  ## Added by typing stub update
    Mirror: EnumValue = ...  ## Added by typing stub update
    Repeat: EnumValue = ...  ## Added by typing stub update
class drawableHighlightMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Glow: EnumValue = ...  ## Added by typing stub update
    GlowMinusMatte: EnumValue = ...  ## Added by typing stub update
    Matte: EnumValue = ...  ## Added by typing stub update
    MatteOverGlow: EnumValue = ...  ## Added by typing stub update
    Transparent: EnumValue = ...  ## Added by typing stub update
class secureSelectionOption:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Ignore: EnumValue = ...  ## Added by typing stub update
    Obey: EnumValue = ...  ## Added by typing stub update
    Off: EnumValue = ...  ## Added by typing stub update
    On: EnumValue = ...  ## Added by typing stub update
class resourceType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    NoType: EnumValue = ...  ## Added by typing stub update
    Package: EnumValue = ...  ## Added by typing stub update
    ViewerHandle: EnumValue = ...  ## Added by typing stub update
    ViewerState: EnumValue = ...  ## Added by typing stub update
class geometryViewportEvent:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    CameraSwitched: EnumValue = ...  ## Added by typing stub update
class sceneViewerEvent:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    BeginResize: EnumValue = ...  ## Added by typing stub update
    ColorSchemeChanged: EnumValue = ...  ## Added by typing stub update
    EndResize: EnumValue = ...  ## Added by typing stub update
    LayoutChanged: EnumValue = ...  ## Added by typing stub update
    SelectedViewportChanged: EnumValue = ...  ## Added by typing stub update
    SizeChanged: EnumValue = ...  ## Added by typing stub update
class hudInfoState:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Maximize: EnumValue = ...  ## Added by typing stub update
    Minimize: EnumValue = ...  ## Added by typing stub update
    NoState: EnumValue = ...  ## Added by typing stub update
    Toggle: EnumValue = ...  ## Added by typing stub update
class hudPanel:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    NoPanel: EnumValue = ...  ## Added by typing stub update
    ToolInfo: EnumValue = ...  ## Added by typing stub update
    User: EnumValue = ...  ## Added by typing stub update
class scrollPosition:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Auto: EnumValue = ...  ## Added by typing stub update
    Bottom: EnumValue = ...  ## Added by typing stub update
    Center: EnumValue = ...  ## Added by typing stub update
    Top: EnumValue = ...  ## Added by typing stub update
class parmFilterMode:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    AllParms: EnumValue = ...  ## Added by typing stub update
    AllParmsAndHeadings: EnumValue = ...  ## Added by typing stub update
    AutoScopedParms: EnumValue = ...  ## Added by typing stub update
    GraphSelectedParms: EnumValue = ...  ## Added by typing stub update
    InvisibleParms: EnumValue = ...  ## Added by typing stub update
    NonDefaultParms: EnumValue = ...  ## Added by typing stub update
    ParmsWithExpressions: EnumValue = ...  ## Added by typing stub update
    ParmsWithOverrides: EnumValue = ...  ## Added by typing stub update
    ScopedParms: EnumValue = ...  ## Added by typing stub update
    SearchNoControlMenus: EnumValue = ...  ## Added by typing stub update
    TimeDependentParms: EnumValue = ...  ## Added by typing stub update
    VisibleAndInvisibleParms: EnumValue = ...  ## Added by typing stub update
class parmFilterCriteria:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    EvaluatedValue: EnumValue = ...  ## Added by typing stub update
    Label: EnumValue = ...  ## Added by typing stub update
    Name: EnumValue = ...  ## Added by typing stub update
    NameOrLabel: EnumValue = ...  ## Added by typing stub update
    RawValue: EnumValue = ...  ## Added by typing stub update
class _ik_targetType:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    All: EnumValue = ...  ## Added by typing stub update
    Orientation: EnumValue = ...  ## Added by typing stub update
    Position: EnumValue = ...  ## Added by typing stub update
class agentShapeDeformerType:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    BlendShape: EnumValue = ...  ## Added by typing stub update
    BlendShapeAndDualQuatBlendSkinning: EnumValue = ...  ## Added by typing stub update
    BlendShapeAndDualQuatSkinning: EnumValue = ...  ## Added by typing stub update
    BlendShapeAndLinearSkinning: EnumValue = ...  ## Added by typing stub update
    DualQuatBlendSkinning: EnumValue = ...  ## Added by typing stub update
    DualQuatSkinning: EnumValue = ...  ## Added by typing stub update
    LinearSkinning: EnumValue = ...  ## Added by typing stub update
class optionalBool:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    Yes: EnumValue = ...  ## Added by typing stub update
    No: EnumValue = ...  ## Added by typing stub update
    NoOpinion: EnumValue = ...  ## Added by typing stub update
class SystemExit(Exception):
    thisown: Any = ...
    def __init__(self: SystemExit, exit_code: int) -> None: ...
    def code(self: SystemExit) -> int: ...
    __swig_destroy__: Any = ...

class Error(BaseException):  ## Updated by typing stub update
    thisown: Any = ...
    def __init__(self: Error, *args: str) -> None: ...
    __swig_destroy__: Any = ...
    def exceptionTypeName(self: Error) -> str: ...
    def description(self: Error) -> str: ...
    def instanceMessage(self: Error) -> str: ...

    def __repr__(self: Error) -> Any: ...  ## Added by typing stub update
    def __str__(self: Error) -> Any: ...  ## Added by typing stub update
class NotAvailable(Error):
    thisown: Any = ...
    def __init__(self: NotAvailable, *args: str) -> None: ...
    def exceptionTypeName(self: NotAvailable) -> str: ...
    def description(self: NotAvailable) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NotAvailable) -> Any: ...  ## Added by typing stub update
    def __str__(self: NotAvailable) -> Any: ...  ## Added by typing stub update
class ObjectWasDeleted(Error):
    thisown: Any = ...
    def __init__(self: ObjectWasDeleted, *args: str) -> None: ...
    def exceptionTypeName(self: ObjectWasDeleted) -> str: ...
    def description(self: ObjectWasDeleted) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: ObjectWasDeleted) -> Any: ...  ## Added by typing stub update
    def __str__(self: ObjectWasDeleted) -> Any: ...  ## Added by typing stub update
class InvalidInput(Error):
    thisown: Any = ...
    def __init__(self: InvalidInput, *args: str) -> None: ...
    def exceptionTypeName(self: InvalidInput) -> str: ...
    def description(self: InvalidInput) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: InvalidInput) -> Any: ...  ## Added by typing stub update
    def __str__(self: InvalidInput) -> Any: ...  ## Added by typing stub update
class InvalidSize(Error):
    thisown: Any = ...
    def __init__(self: InvalidSize, *args: str) -> None: ...
    def exceptionTypeName(self: InvalidSize) -> str: ...
    def description(self: InvalidSize) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: InvalidSize) -> Any: ...  ## Added by typing stub update
    def __str__(self: InvalidSize) -> Any: ...  ## Added by typing stub update
class OperationFailed(Error):
    thisown: Any = ...
    def __init__(self: OperationFailed, message: Optional[str]="") -> None: ...
    def exceptionTypeName(self: OperationFailed) -> str: ...
    def description(self: OperationFailed) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: OperationFailed) -> Any: ...  ## Added by typing stub update
    def __str__(self: OperationFailed) -> Any: ...  ## Added by typing stub update
class InvalidNodeType(Error):
    thisown: Any = ...
    def __init__(self: InvalidNodeType, *args: str) -> None: ...
    def exceptionTypeName(self: InvalidNodeType) -> str: ...
    def description(self: InvalidNodeType) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: InvalidNodeType) -> Any: ...  ## Added by typing stub update
    def __str__(self: InvalidNodeType) -> Any: ...  ## Added by typing stub update
class InitScriptFailed(Error):
    thisown: Any = ...
    def __init__(self: InitScriptFailed, *args: str) -> None: ...
    def exceptionTypeName(self: InitScriptFailed) -> str: ...
    def description(self: InitScriptFailed) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: InitScriptFailed) -> Any: ...  ## Added by typing stub update
    def __str__(self: InitScriptFailed) -> Any: ...  ## Added by typing stub update
class MatchDefinitionError(Error):
    thisown: Any = ...
    def __init__(self: MatchDefinitionError, *args: str) -> None: ...
    def exceptionTypeName(self: MatchDefinitionError) -> str: ...
    def description(self: MatchDefinitionError) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: MatchDefinitionError) -> Any: ...  ## Added by typing stub update
    def __str__(self: MatchDefinitionError) -> Any: ...  ## Added by typing stub update
class PermissionError(Error):
    thisown: Any = ...
    def __init__(self: PermissionError, *args: str) -> None: ...
    def exceptionTypeName(self: PermissionError) -> str: ...
    def description(self: PermissionError) -> str: ...
    def instanceMessage(self: PermissionError) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: PermissionError) -> Any: ...  ## Added by typing stub update
    def __str__(self: PermissionError) -> Any: ...  ## Added by typing stub update
class GeometryPermissionError(Error):
    thisown: Any = ...
    def __init__(self: GeometryPermissionError, *args: str) -> None: ...
    def exceptionTypeName(self: GeometryPermissionError) -> str: ...
    def description(self: GeometryPermissionError) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: GeometryPermissionError) -> Any: ...  ## Added by typing stub update
    def __str__(self: GeometryPermissionError) -> Any: ...  ## Added by typing stub update
class KeyframeValueNotSet(Error):
    thisown: Any = ...
    def __init__(self: KeyframeValueNotSet, *args: str) -> None: ...
    def exceptionTypeName(self: KeyframeValueNotSet) -> str: ...
    def description(self: KeyframeValueNotSet) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: KeyframeValueNotSet) -> Any: ...  ## Added by typing stub update
    def __str__(self: KeyframeValueNotSet) -> Any: ...  ## Added by typing stub update
class OperationInterrupted(Error):
    thisown: Any = ...
    def __init__(self: OperationInterrupted, *args: str) -> None: ...
    def exceptionTypeName(self: OperationInterrupted) -> str: ...
    def description(self: OperationInterrupted) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: OperationInterrupted) -> Any: ...  ## Added by typing stub update
    def __str__(self: OperationInterrupted) -> Any: ...  ## Added by typing stub update
class LoadWarning(Error):
    thisown: Any = ...
    def __init__(self: LoadWarning, *args: str) -> None: ...
    def exceptionTypeName(self: LoadWarning) -> str: ...
    def description(self: LoadWarning) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: LoadWarning) -> Any: ...  ## Added by typing stub update
    def __str__(self: LoadWarning) -> Any: ...  ## Added by typing stub update
class NodeError(Error):
    thisown: Any = ...
    def __init__(self: NodeError, *args: str) -> None: ...
    def exceptionTypeName(self: NodeError) -> str: ...
    def description(self: NodeError) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NodeError) -> Any: ...  ## Added by typing stub update
    def __str__(self: NodeError) -> Any: ...  ## Added by typing stub update
class NodeWarning(Error):
    thisown: Any = ...
    def __init__(self: NodeWarning, *args: str) -> None: ...
    def exceptionTypeName(self: NodeWarning) -> str: ...
    def description(self: NodeWarning) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NodeWarning) -> Any: ...  ## Added by typing stub update
    def __str__(self: NodeWarning) -> Any: ...  ## Added by typing stub update
class NameConflict(Error):
    thisown: Any = ...
    def __init__(self: NameConflict, *args: str) -> None: ...
    def exceptionTypeName(self: NameConflict) -> str: ...
    def description(self: NameConflict) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NameConflict) -> Any: ...  ## Added by typing stub update
    def __str__(self: NameConflict) -> Any: ...  ## Added by typing stub update
class TypeConflict(Error):
    thisown: Any = ...
    def __init__(self: TypeConflict, *args: str) -> None: ...
    def exceptionTypeName(self: TypeConflict) -> str: ...
    def description(self: TypeConflict) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: TypeConflict) -> Any: ...  ## Added by typing stub update
    def __str__(self: TypeConflict) -> Any: ...  ## Added by typing stub update
class StateNotRegistered(Error):
    thisown: Any = ...
    def __init__(self: StateNotRegistered, *args: str) -> None: ...
    def exceptionTypeName(self: StateNotRegistered) -> str: ...
    def description(self: StateNotRegistered) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: StateNotRegistered) -> Any: ...  ## Added by typing stub update
    def __str__(self: StateNotRegistered) -> Any: ...  ## Added by typing stub update
class HandleNotRegistered(Error):
    thisown: Any = ...
    def __init__(self: HandleNotRegistered, *args: str) -> None: ...
    def exceptionTypeName(self: HandleNotRegistered) -> str: ...
    def description(self: HandleNotRegistered) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: HandleNotRegistered) -> Any: ...  ## Added by typing stub update
    def __str__(self: HandleNotRegistered) -> Any: ...  ## Added by typing stub update
class InvalidGeometry(OperationFailed):
    thisown: Any = ...
    def __init__(self: InvalidGeometry, *args: str) -> None: ...
    def exceptionTypeName(self: InvalidGeometry) -> str: ...
    def description(self: InvalidGeometry) -> str: ...
    __swig_destroy__: Any = ...

    def __repr__(self: InvalidGeometry) -> Any: ...  ## Added by typing stub update
    def __str__(self: InvalidGeometry) -> Any: ...  ## Added by typing stub update
class NetworkItem:
    thisown: Any = ...
    def __init__(self: NetworkItem, *args: NetworkItem) -> None: ...
    __swig_destroy__: Any = ...
    def networkItemType(self: NetworkItem) -> Any: ...

    def __lt__(self: NetworkItem, other: object) -> bool: ...  ## Added by typing stub update
    def __le__(self: NetworkItem, other: object) -> bool: ...  ## Added by typing stub update
    def __gt__(self: NetworkItem, other: object) -> bool: ...  ## Added by typing stub update
    def __ge__(self: NetworkItem, other: object) -> bool: ...  ## Added by typing stub update
class NetworkMovableItem(NetworkItem):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: NetworkMovableItem) -> Any: ...
    def name(self: NetworkMovableItem) -> str: ...
    def setName(self: NetworkMovableItem, name: str, unique_name: bool=False) -> None: ...
    def digitsInName(self: NetworkMovableItem) -> int: ...
    def path(self: NetworkMovableItem) -> str: ...
    def relativePathTo(self: NetworkMovableItem, base_node: NetworkMovableItem) -> str: ...
    def isSelected(self: NetworkMovableItem) -> bool: ...
    def setSelected(self: NetworkMovableItem, on: bool, clear_all_selected: bool=False, show_asset_if_selected: bool=False) -> None: ...
    def color(self: NetworkMovableItem) -> Color: ...
    def setColor(self: NetworkMovableItem, color: Color) -> None: ...
    def size(self: NetworkMovableItem) -> Vector2: ...
    def position(self: NetworkMovableItem) -> Vector2: ...
    def setPosition(self: NetworkMovableItem, vector2: Union[Sequence[float], Vector2]) -> None: ...
    def move(self: NetworkMovableItem, vector2: Union[Sequence[float], Vector2]) -> None: ...
    def parent(self: NetworkMovableItem) -> Node: ...
    def parentNetworkBox(self: NetworkMovableItem) -> Optional[NetworkBox]: ...
    def sessionId(self: NetworkMovableItem) -> None: ...

    def shiftPosition(self: NetworkMovableItem, vector2: Union[Sequence[float], Vector2]) -> None: ...  ## Added by typing stub update
class NetworkBox(NetworkMovableItem):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: NetworkBox) -> Any: ...
    def comment(self: NetworkBox) -> str: ...
    def setComment(self: NetworkBox, comment: str) -> None: ...
    def autoFit(self: NetworkBox) -> bool: ...
    def setAutoFit(self: NetworkBox, auto_fit: bool) -> None: ...
    def setBounds(self: NetworkBox, bounds: BoundingRect) -> None: ...
    def setSize(self: NetworkBox, size: Sequence[float]) -> None: ...
    def resize(self: NetworkBox, vector2: Union[Sequence[float], Vector2]) -> None: ...
    def fitAroundContents(self: NetworkBox) -> None: ...
    def minimizedSize(self: NetworkBox) -> Vector2: ...
    def restoredSize(self: NetworkBox) -> Vector2: ...
    def isMinimized(self: NetworkBox) -> bool: ...
    def setMinimized(self: NetworkBox, on: bool) -> None: ...
    def nodes(self: NetworkBox, recurse: bool=True) -> Tuple[Node, ...]: ...
    def addNode(self: NetworkBox, node: Node) -> None: ...
    def removeNode(self: NetworkBox, node: Node) -> None: ...
    def removeAllNodes(self: NetworkBox) -> None: ...
    def networkBoxes(self: NetworkBox, recurse: bool=True) -> Tuple[NetworkBox, ...]: ...
    def addNetworkBox(self: NetworkBox, netbox: NetworkBox) -> None: ...
    def removeNetworkBox(self: NetworkBox, netbox: NetworkBox) -> None: ...
    def stickyNotes(self: NetworkBox, recurse: bool=True) -> Tuple[StickyNote, ...]: ...
    def addStickyNote(self: NetworkBox, stickynote: StickyNote) -> None: ...
    def removeStickyNote(self: NetworkBox, stickynote: StickyNote) -> None: ...
    def subnetIndirectInputs(self: NetworkBox, recurse: bool=True) -> Tuple[SubnetIndirectInput, ...]: ...
    def addSubnetIndirectInput(self: NetworkBox, indirect: SubnetIndirectInput) -> None: ...
    def removeSubnetIndirectInput(self: NetworkBox, indirect: SubnetIndirectInput) -> None: ...
    def items(self: NetworkBox, recurse: bool=True) -> Tuple[NetworkMovableItem, ...]: ...
    def addItem(self: NetworkBox, item: NetworkMovableItem) -> None: ...
    def removeItem(self: NetworkBox, item: NetworkMovableItem) -> None: ...
    def removeAllItems(self: NetworkBox) -> None: ...
    def destroy(self: NetworkBox, destroy_contents: bool=False) -> None: ...
    def asCode(self: NetworkBox, brief: bool=False, recurse: bool=False, save_box_contents: bool=False, save_channels_only: bool=False, save_creation_commands: bool=False, save_keys_in_frames: bool=False, save_parm_values_only: bool=False, save_spare_parms: bool=False, save_box_membership: bool=True, function_name: Optional[str]=None) -> str: ...

    def __repr__(self: NetworkBox) -> Any: ...  ## Added by typing stub update
class StickyNote(NetworkMovableItem):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: StickyNote) -> Any: ...
    def text(self: StickyNote) -> str: ...
    def setText(self: StickyNote, str: str) -> None: ...
    def textSize(self: StickyNote) -> float: ...
    def setTextSize(self: StickyNote, size: float) -> None: ...
    def textColor(self: StickyNote) -> Color: ...
    def setTextColor(self: StickyNote, color: Color) -> None: ...
    def drawBackground(self: StickyNote) -> bool: ...
    def setDrawBackground(self: StickyNote, on: bool) -> None: ...
    def setBounds(self: StickyNote, bounds: BoundingRect) -> Any: ...
    def setSize(self: StickyNote, size: Union[Sequence[float], Vector2]) -> None: ...
    def resize(self: StickyNote, vector2: Union[Sequence[float], Vector2]) -> None: ...
    def minimizedSize(self: StickyNote) -> Vector2: ...
    def restoredSize(self: StickyNote) -> Vector2: ...
    def isMinimized(self: StickyNote) -> bool: ...
    def setMinimized(self: StickyNote, on: bool) -> None: ...
    def destroy(self: StickyNote) -> None: ...
    def asCode(self: StickyNote, brief: bool=False, recurse: bool=False, save_box_contents: bool=False, save_channels_only: bool=False, save_creation_commands: bool=False, save_keys_in_frames: bool=False, save_parm_values_only: bool=False, save_spare_parms: bool=False, save_box_membership: bool=True, function_name: Optional[str]=None) -> str: ...

    def __repr__(self: StickyNote) -> Any: ...  ## Added by typing stub update
class Node(NetworkMovableItem):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Node) -> Any: ...
    def infoTree(self: Node, verbose: bool=False, debug: bool=False, output_index: int=0, force_cook: bool=False) -> NodeInfoTree: ...
    def isNetwork(self: Node) -> bool: ...
    def type(self: Node) -> NodeType: ...
    def childTypeCategory(self: Node) -> NodeTypeCategory: ...
    def isFlagReadable(self: Node, flag: EnumValue) -> bool: ...
    def isFlagWritable(self: Node, flag: EnumValue) -> bool: ...
    def isGenericFlagSet(self: Node, flag: EnumValue) -> bool: ...
    def setGenericFlag(self: Node, flag: EnumValue, value: bool) -> None: ...
    def isDisplayDescriptiveNameFlagSet(self: Node) -> bool: ...
    def setDisplayDescriptiveNameFlag(self: Node, on: bool) -> Any: ...
    def outputForViewFlag(self: Node) -> int: ...
    def setOutputForViewFlag(self: Node, output: int) -> None: ...
    def node(self: Node, node_path: str) -> Optional[Node]: ...
    def nodes(self: Node, node_path_tuple: Sequence[str]) -> Tuple[Optional[Node], ...]: ...
    def cookPathNodes(self: Node) -> Tuple[Node, ...]: ...
    def item(self: Node, item_path: str) -> Optional[NetworkMovableItem]: ...
    def items(self: Node, item_path_tuple: Sequence[str]) -> Tuple[Optional[NetworkMovableItem], ...]: ...
    def glob(self: Node, pattern: str, ignore_case: bool=False) -> Tuple[Node, ...]: ...
    def recursiveGlob(self: Node, pattern: str, filter: EnumValue=nodeTypeFilter.NoFilter, include_subnets: bool=True) -> Tuple[Node, ...]: ...
    def createNode(self: Node, node_type_name: str, node_name: Optional[str]=None, run_init_scripts: bool=True, load_contents: bool=True, exact_type_name: bool=False, force_valid_node_name: bool=False) -> Node: ...
    def runInitScripts(self: Node) -> None: ...
    def createOrMoveVisualizer(self: Node, output_index: int) -> None: ...
    def inputIndex(self: Node, input_name: str) -> int: ...
    def outputIndex(self: Node, output_name: str) -> int: ...
    def setInput(self: Node, input_index: int, item_to_become_input: Optional[NetworkMovableItem], output_index: int=0) -> None: ...
    def setNamedInput(self: Node, input_name: str, item_to_become_input: NetworkMovableItem, output_name_or_index: Union[str, int]) -> None: ...
    def setFirstInput(self: Node, item_to_become_input: Optional[NetworkMovableItem], output_index: int=0) -> None: ...
    def setNextInput(self: Node, item_to_become_input: NetworkMovableItem, output_index: int=0, unordered_only: bool=False) -> None: ...
    def insertInput(self: Node, input_index: int, item_to_become_input: NetworkMovableItem, output_index: int=0) -> None: ...
    def numOrderedInputs(self: Node) -> int: ...
    def inputs(self: T) -> Tuple[T, ...]: ...
    def input(self: T, inputidx: int) -> T: ...
    def inputFollowingOutputs(self: Node, inputidx: int) -> Node: ...
    def inputConnections(self: Node) -> Tuple[NodeConnection, ...]: ...
    def inputConnectors(self: Node) -> Tuple[Tuple[NodeConnection, ...], ...]: ...
    def inputAncestors(self: Node, include_ref_inputs: bool=True, follow_subnets: bool=False, only_used_inputs: bool=False) -> Tuple[Node, ...]: ...
    def inputNames(self: Node) -> Tuple[str, ...]: ...
    def inputLabels(self: Node) -> Tuple[str, ...]: ...
    def editableInputStrings(self: Node, input_index: int) -> Any: ...
    def editableInputString(self: Node, input_index: int, key: str) -> Any: ...
    def setEditableInputString(self: Node, input_index: int, key: str, value: str) -> Any: ...
    def outputNames(self: Node) -> Tuple[str, ...]: ...
    def outputLabels(self: Node) -> Tuple[str, ...]: ...
    def outputs(self: T) -> Tuple[T, ...]: ...
    def outputConnections(self: Node) -> Tuple[NodeConnection, ...]: ...
    def outputConnectors(self: Node) -> Tuple[Tuple[NodeConnection, ...], ...]: ...
    def references(self: Node, include_children: bool=True) -> Tuple[Node, ...]: ...
    def dependents(self: Node, include_children: bool=True) -> Tuple[Node, ...]: ...
    def children(self: Node) -> Tuple[Node, ...]: ...
    def allSubChildren(self: Node, top_down: bool=True, recurse_in_locked_nodes: bool=True, sync_delayed_definition: bool=False) -> Tuple[Node, ...]: ...
    def selectedChildren(self: Node, include_hidden: bool=False, include_hidden_support_nodes: bool=False) -> Tuple[Node, ...]: ...
    def allItems(self: Node) -> Tuple[NetworkMovableItem, ...]: ...
    def selectedItems(self: Node, include_hidden: bool=False, include_hidden_support_nodes: bool=False) -> Tuple[NetworkMovableItem, ...]: ...
    def numItems(self: Node, item_type: Optional[EnumValue]=None, selected_only: bool=False, include_hidden: bool=False) -> Any: ...
    def deleteItems(self: Node, items: Sequence[NetworkMovableItem], disable_safety_checks: bool=False) -> None: ...
    def copyItemsToClipboard(self: Node, items: Sequence[NetworkMovableItem]) -> None: ...
    def pasteItemsFromClipboard(self: Node, position: Optional[Vector2]=None) -> None: ...
    def copyItems(self: Node, items: Sequence[NetworkMovableItem], channel_reference_originals: bool=False, relative_references: bool=True, connect_outputs_to_multi_inputs: bool=True) -> Tuple[NetworkMovableItem, ...]: ...
    def creator(self: Node) -> Node: ...
    def isInsideLockedHDA(self: Node) -> bool: ...
    def isEditableInsideLockedHDA(self: Node) -> bool: ...
    def isEditable(self: Node) -> bool: ...
    def isLockedHDA(self: Node) -> bool: ...
    def isCompiled(self: Node) -> Any: ...
    def isMaterialManager(self: Node) -> Any: ...
    def hdaModule(self: Node) -> HDAModule: ...
    def hdaViewerStateModule(self: Node) -> HDAViewerStateModule: ...
    def hdaViewerHandleModule(self: Node) -> HDAViewerHandleModule: ...
    def hm(self: Node) -> Any: ...
    def moveToGoodPosition(self: Node, relative_to_inputs: bool=True, move_inputs: bool=True, move_outputs: bool=True, move_unconnected: bool=True) -> Vector2: ...
    def layoutChildren(self: Node, items: Sequence[NetworkMovableItem]=(), horizontal_spacing: float=1.0, vertical_spacing: float=1.0) -> None: ...
    def isCurrent(self: Node) -> bool: ...
    def setCurrent(self: Node, on: bool, clear_all_selected: bool=False) -> None: ...
    def isHidden(self: Node) -> bool: ...
    def hide(self: Node, on: bool) -> None: ...
    def comment(self: Node) -> str: ...
    def setComment(self: Node, comment: str) -> None: ...
    def appendComment(self: Node, comment: str) -> None: ...
    def creatorState(self: Node) -> str: ...
    def setCreatorState(self: Node, state: str) -> None: ...
    def isBuiltExplicitly(self: Node) -> Any: ...
    def setBuiltExplicitly(self: Node, built_explicitly: bool) -> Any: ...
    def expressionLanguage(self: Node) -> EnumValue: ...
    def setExpressionLanguage(self: Node, language: EnumValue) -> None: ...
    def parm(self: Node, parm_path: str) -> Optional[Parm]: ...
    def parmTuple(self: Node, parm_path: str) -> Optional[ParmTuple]: ...
    def globParms(self: Node, pattern: str, ignore_case: bool=False, search_label: bool=False, single_pattern: bool=False) -> Tuple[Parm, ...]: ...
    def parms(self: Node) -> Tuple[Parm, ...]: ...
    def parmsReferencingThis(self: Node) -> Tuple[Parm, ...]: ...
    def parmTuples(self: Node) -> Tuple[ParmTuple, ...]: ...
    def spareParms(self: Node) -> Tuple[Parm, ...]: ...
    def removeSpareParms(self: Node) -> None: ...
    def syncNodeVersionIfNeeded(self: Node, from_version: str) -> None: ...
    def setParmTemplateGroup(self: Node, parm_template_group: ParmTemplateGroup, rename_conflicting_parms: bool=False) -> Any: ...
    def parmTuplesInFolder(self: Node, folder_names: Sequence[str]) -> Tuple[ParmTuple, ...]: ...
    def parmsInFolder(self: Node, folder_names: Sequence[str]) -> Tuple[Parm, ...]: ...
    def parmTemplateGroup(self: Node) -> ParmTemplateGroup: ...
    def localVariables(self: Node) -> None: ...
    def localAttributes(self: Node) -> None: ...
    def isTimeDependent(self: Node) -> bool: ...
    def destroy(self: Node, disable_safety_checks: bool=False) -> None: ...
    def allowEditingOfContents(self: Node, propagate: bool=False) -> None: ...
    def matchCurrentDefinition(self: Node) -> None: ...
    def matchesCurrentDefinition(self: Node) -> bool: ...
    def syncDelayedDefinition(self: Node) -> None: ...
    def isDelayedDefinition(self: Node) -> bool: ...
    def parmAliases(self: Node, recurse: bool=False) -> Dict[Parm, str]: ...
    def clearParmAliases(self: Node) -> None: ...
    def networkBoxes(self: Node) -> Iterator[NetworkBox]: ...
    def iterNetworkBoxes(self: Node) -> Any: ...
    def createNetworkBox(self: Node, name: Optional[str]=None) -> NetworkBox: ...
    def copyNetworkBox(self: Node, network_box_to_copy: NetworkBox, new_name: Optional[str]=None, channel_reference_original: bool=False) -> NetworkBox: ...
    def findNetworkBox(self: Node, name: str) -> NetworkBox: ...
    def findNetworkBoxes(self: Node, pattern: str) -> Tuple[NetworkBox, ...]: ...
    def networkDots(self: Node) -> Tuple[NetworkDot, ...]: ...
    def createNetworkDot(self: Node) -> NetworkDot: ...
    def changeNodeType(self: Node, new_node_type: str, keep_name: bool=True, keep_parms: bool=True, keep_network_contents: bool=True, force_change_on_node_type_match: bool=False) -> Node: ...
    def canCreateDigitalAsset(self: Node) -> bool: ...
    def createDigitalAsset(self: Node, name: Optional[str]=None, hda_file_name: Optional[str]=None, description: Optional[str]=None, min_num_inputs: int=0, max_num_inputs: int=0, compress_contents: bool=False, comment: Optional[str]=None, version: Optional[str]=None, save_as_embedded: bool=False, ignore_external_references: bool=False, change_node_type: bool=True, create_backup: bool=True, install_path: Optional[bool]=None) -> Node: ...
    def createCompiledDigitalAsset(self: Node, name: Optional[str]=None, hda_file_name: Optional[str]=None, description: Optional[str]=None) -> None: ...
    def collapseIntoSubnet(self: Node, child_nodes: Sequence[NetworkMovableItem], subnet_name: Optional[str]=None, subnet_type: Optional[str]=None) -> Node: ...
    def extractAndDelete(self: Node) -> Tuple[NetworkMovableItem, ...]: ...
    def indirectInputs(self: Node) -> Tuple[SubnetIndirectInput, ...]: ...
    def subnetOutputs(self: Node) -> Tuple[Node, ...]: ...
    def isSubNetwork(self: Node) -> bool: ...
    def setUserData(self: Node, name: str, value: str) -> None: ...
    def destroyUserData(self: Node, name: str, must_exist: bool=True) -> None: ...
    def clearUserDataDict(self: Node) -> None: ...
    def userDataDict(self: Node) -> Dict[str, str]: ...
    def selectNextVisibleWorkItem(self: Node) -> None: ...
    def selectPreviousVisibleWorkItem(self: Node) -> None: ...
    def deselectWorkItem(self: Node) -> None: ...
    def setCurrentTOPPage(self: Node, page_index: int) -> None: ...
    def userData(self: Node, name: str) -> Optional[str]: ...
    def destroyCachedUserData(self: Node, name: str, must_exist: bool=True) -> None: ...
    def clearCachedUserDataDict(self: Node) -> None: ...
    def cachedUserDataDict(self: Node) -> Dict[str, Any]: ...
    def setCachedUserData(self: Node, name: str, value) -> None: ...
    def cachedUserData(self: Node, name: str) -> Optional[Any]: ...
    def dataBlockKeys(self: Node, blocktype: str) -> Tuple[str, ...]: ...
    def dataBlockType(self: Node, key: str) -> str: ...
    def dataBlock(self: Node, key: str) -> str: ...
    def setDataBlock(self: Node, key: str, block: str, blocktype: str) -> None: ...
    def removeDataBlock(self: Node, key: str) -> None: ...
    def asCode(self: Node, brief: bool=False, recurse: bool=False, save_channels_only: bool=False, save_creation_commands: bool=True, save_keys_in_frames: bool=False, save_outgoing_wires: bool=False, save_parm_values_only: bool=False, save_spare_parms: bool=True, save_box_membership: bool=True, function_name: Optional[str]=None) -> str: ...
    def canGenerateCookCode(self: Node, check_parent: bool=False, check_auto_shader: bool=True) -> bool: ...
    def cookCodeGeneratorNode(self: Node, check_parent: bool=False) -> Node: ...
    def cookCodeLanguage(self: Node) -> str: ...
    def supportsMultiCookCodeContexts(self: Node) -> bool: ...
    def saveCookCodeToFile(self: Node, file_name: str, skip_header: bool=False, context_name: Optional[str]=None) -> None: ...
    def saveCodeToFile(self: Node, file_name: str, skip_header: bool=False, context_name: Optional[str]=None) -> Any: ...
    def saveCompiledCookCodeToFile(self: Node, file_name: str, context_name: Optional[str]=None) -> None: ...
    def saveToCompiledVexFile(self: Node, file_name: str, context_name: Optional[str]=None) -> Any: ...
    def cook(self: Node, force: bool=False, frame_range: Sequence[float]=()) -> None: ...
    def needsToCook(self: Node, time: float=time()) -> bool: ...
    def cookCount(self: Node) -> int: ...
    def updateParmStates(self: Node) -> None: ...
    def deleteScript(self: Node) -> str: ...
    def setDeleteScript(self: Node, script_text: str, language: EnumValue=scriptLanguage.Python) -> None: ...
    def createStickyNote(self: Node, name: Optional[str]=None) -> StickyNote: ...
    def stickyNotes(self: Node) -> Iterator[StickyNote]: ...
    def iterStickyNotes(self: Node) -> Any: ...
    def copyStickyNote(self: Node, network_box_to_copy: StickyNote, new_name: Optional[str]=None) -> StickyNote: ...
    def findStickyNote(self: Node, name: str) -> StickyNote: ...
    def findStickyNotes(self: Node, pattern: str) -> Tuple[StickyNote, ...]: ...
    def addNodeGroup(self: Node, name: Optional[str]=None) -> NodeGroup: ...
    def nodeGroups(self: Node) -> Tuple[NodeGroup, ...]: ...
    def nodeGroup(self: Node, name: str) -> NodeGroup: ...
    def errors(self: Node) -> Tuple[str, ...]: ...
    def warnings(self: Node) -> Tuple[str, ...]: ...
    def messages(self: Node) -> Tuple[str, ...]: ...
    def motionEffectsNetworkPath(self: Node) -> str: ...
    def findOrCreateMotionEffectsNetwork(self: Node, create: bool=True) -> EnumValue: ...
    def saveItemsToFile(self: Node, items: Sequence[NetworkMovableItem], file_name: str, save_hda_fallbacks: bool=False) -> None: ...
    def loadItemsFromFile(self: Node, file_name: str, ignore_load_warnings: bool=False) -> None: ...
    def removeAllEventCallbacks(self: Node) -> None: ...
    def stampValue(self: Node, parm_name: str, default_value: str) -> None: ...
    def simulation(self: Node) -> DopSimulation: ...
    def findNodesThatProcessedObject(self: Node, dop_object: DopObject) -> Any: ...
    def evalParm(self: Node, parm_path: str) -> Union[int, float, str]: ...
    def evalParmTuple(self: Node, parm_path: str) -> Union[Tuple[int, ...], Tuple[float, ...], Tuple[str, ...]]: ...
    def addEventCallback(self: Node, event_types: Sequence[EnumValue], callback) -> None: ...
    def addParmCallback(self: Node, callback, parm_names: Sequence[str]) -> None: ...
    def removeEventCallback(self: Node, event_types: Sequence[EnumValue], callback) -> None: ...
    def eventCallbacks(self: Node) -> Any: ...

    def _getArgumentAutoComplete(self: Node, method_name: str, arguments: str, meta_info_only: bool=False) -> Any: ...  ## Added by typing stub update
    def __repr__(self: Node) -> Any: ...  ## Added by typing stub update
    def __str__(self: Node) -> Any: ...  ## Added by typing stub update
    def _cookNoInterruptInternal(self: Node, *args: bool) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Node) -> Any: ...  ## Added by typing stub update
    def _parmClipData(self: Node, start: float, end: float, binary: bool=True, use_blosc_compression: bool=True, sample_rate: int=0, scoped_only: bool=False) -> Any: ...  ## Added by typing stub update
    def _setParmClipData(self: Node, *args: str, **kwargs: bool) -> Any: ...  ## Added by typing stub update
    def _saveParmClip(self: Node, file_name: str, start: float, end: float, sample_rate: int=0, scoped_only: bool=False) -> Any: ...  ## Added by typing stub update
    def _loadParmClip(self: Node, *args: str, **kwargs: float) -> Any: ...  ## Added by typing stub update
    def __creationTime(self: Node) -> Any: ...  ## Added by typing stub update
    def __modificationTime(self: Node) -> Any: ...  ## Added by typing stub update
    def setParms(self: Node, parm_dict: Dict[str, Any]) -> None: ...  ## Added by typing stub update
    def setParmExpressions(self: Node, parm_dict: Dict[str, Any], language: Optional[EnumValue]=None, replace_expressions: bool=True) -> None: ...  ## Added by typing stub update
    def addSpareParmTuple(self: Node, parm_template: ParmTemplate, in_folder: Tuple[str, ...]=(), create_missing_folders: bool=False) -> ParmTuple: ...  ## Added by typing stub update
    def createOutputNode(self: T, node_type_name: str, node_name: Optional[str]=None, run_init_scripts: bool=True, load_contents: bool=True, exact_type_name: bool=False) -> T: ...  ## Added by typing stub update
    def createInputNode(self: T, input_index: int, node_type_name: str, node_name: Optional[str]=None, run_init_scripts: bool=True, load_contents: bool=True, exact_type_name: bool=False) -> T: ...  ## Added by typing stub update
    def creationTime(self: Node) -> datetime.datetime: ...  ## Added by typing stub update
    def modificationTime(self: Node) -> datetime.datetime: ...  ## Added by typing stub update
class NodeGroup:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: NodeGroup) -> str: ...
    def nodes(self: NodeGroup) -> Tuple[Node, ...]: ...
    def parent(self: NodeGroup) -> Node: ...
    def addNode(self: NodeGroup, node: Node) -> None: ...
    def removeNode(self: NodeGroup, node: Node) -> None: ...
    def clear(self: NodeGroup) -> None: ...
    def destroy(self: NodeGroup) -> None: ...
    def asCode(self: NodeGroup, save_creation_commands: bool=False, function_name: Optional[bool]=None) -> str: ...

    def __repr__(self: NodeGroup) -> Any: ...  ## Added by typing stub update
class ObjNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def origin(self: ObjNode) -> Vector3: ...
    def localTransform(self: ObjNode) -> Matrix4: ...
    def localTransformAtTime(self: ObjNode, time: float) -> Matrix4: ...
    def worldTransform(self: ObjNode) -> Matrix4: ...
    def worldTransformAtTime(self: ObjNode, time: float) -> Matrix4: ...
    def setWorldTransform(self: ObjNode, matrix: Matrix4, fail_on_locked_parms: bool=False) -> None: ...
    def setCookTransform(self: ObjNode, matrix: Matrix4) -> None: ...
    def parmTransform(self: ObjNode) -> Matrix4: ...
    def setParmTransform(self: ObjNode, matrix: Matrix4, fail_on_locked_parms: bool=False) -> None: ...
    def parmPivotTransform(self: ObjNode) -> Matrix4: ...
    def setParmPivotTransform(self: ObjNode, matrix: Matrix4, fail_on_locked_parms: bool=False) -> None: ...
    def preTransform(self: ObjNode) -> Matrix4: ...
    def setPreTransform(self: ObjNode, matrix: Matrix4) -> None: ...
    def movePreTransformIntoParmTransform(self: ObjNode) -> None: ...
    def moveParmTransformIntoPreTransform(self: ObjNode) -> None: ...
    def moveParmTranslateIntoPreTransform(self: ObjNode) -> None: ...
    def moveParmRotateIntoPreTransform(self: ObjNode) -> None: ...
    def moveParmScaleIntoPreTransform(self: ObjNode) -> None: ...
    def parentAndSubnetTransform(self: ObjNode) -> Matrix4: ...
    def getTransformToNode(self: ObjNode, obj_node: ObjNode) -> Matrix4: ...
    def getTransformFromPointToPoint(self: ObjNode, pos3: Vector3, other_node: ObjNode, other_pos3: Vector3) -> Matrix4: ...
    def buildLookatRotation(self: ObjNode, to_node: ObjNode, up_vector: Optional[Vector3]=None) -> Matrix4: ...
    def isObjectDisplayed(self: ObjNode) -> bool: ...
    def isObjectDisplayedAtFrame(self: ObjNode, frame: float) -> bool: ...
    def isDisplayFlagSet(self: ObjNode) -> bool: ...
    def setDisplayFlag(self: ObjNode, on: bool) -> None: ...
    def isSelectableInViewport(self: ObjNode) -> bool: ...
    def setSelectableInViewport(self: ObjNode, on: bool) -> None: ...
    def isShowingOrigin(self: ObjNode) -> bool: ...
    def showOrigin(self: ObjNode, on: bool) -> None: ...
    def isUsingXray(self: ObjNode) -> bool: ...
    def useXray(self: ObjNode, on: bool) -> None: ...
    def displayNode(self: ObjNode) -> Optional[Node]: ...
    def renderNode(self: ObjNode) -> Optional[Node]: ...
    def combine(self: ObjNode, nodes: Sequence[Node]) -> None: ...
    def material(self: ObjNode, operation: str, parameter: Sequence[str]) -> None: ...

    def __repr__(self: ObjNode) -> Any: ...  ## Added by typing stub update
    def _parmClipData(self: ObjNode, start: float, end: float, binary: bool=True, use_blosc_compression: bool=True, sample_rate: int=0, scoped_only: bool=False) -> Any: ...  ## Added by typing stub update
    def _saveParmClip(self: ObjNode, file_name: str, start: float, end: float, sample_rate: int=0, scoped_only: bool=False) -> Any: ...  ## Added by typing stub update
class Prim:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Prim) -> Any: ...
    def geometry(self: Prim) -> Geometry: ...
    def number(self: Prim) -> int: ...
    def type(self: Prim) -> EnumValue: ...
    def attribType(self: Prim) -> EnumValue: ...
    def vertices(self: Prim) -> Iterator[Vertex]: ...
    def numVertices(self: Prim) -> int: ...
    def edges(self: Prim) -> Any: ...
    def numEdges(self: Prim) -> Any: ...
    def floatAttribValue(self: Prim, attrib: str) -> float: ...
    def floatListAttribValue(self: Prim, name_or_attrib: Union[str, Attrib]) -> Tuple[float, ...]: ...
    def intAttribValue(self: Prim, name_or_attrib: Union[str, Attrib]) -> int: ...
    def intListAttribValue(self: Prim, name_or_attrib: Union[str, Attrib]) -> Tuple[int, ...]: ...
    def stringAttribValue(self: Prim, name_or_attrib: Union[str, Attrib]) -> str: ...
    def stringListAttribValue(self: Prim, name_or_attrib: Union[str, Attrib]) -> Tuple[str, ...]: ...
    def dictAttribValue(self: Prim, name_or_attrib: Union[str, Attrib]) -> dict: ...
    def dictListAttribValue(self: Prim, name_or_attrib: Union[str, Attrib]) -> Tuple[str, ...]: ...
    def setAttribValue(self, name_or_attrib: Union[str, Attrib], attrib_value) -> None: ...
    def intrinsicNames(self: Prim) -> Tuple[str, ...]: ...
    @overload
    def intrinsicValue(self: Prim, intrinsic_name: Literal["transform"]) -> Tuple[float, ...]: ...
    @overload
    def intrinsicValue(self: Prim, intrinsic_name: str) -> Union[int, float, str, Tuple[int, ...], Tuple[float, ...], Tuple[str, ...]]: ...
    def intrinsicSize(self: Prim, intrinsic_name: str) -> int: ...
    def intrinsicReadOnly(self: Prim, intrinsic_name: str) -> bool: ...
    def setIntrinsicValue(self: Prim, intrinsic_name: str, value: Union[int, float, str, Iterable[int], Iterable[float], Iterable[str]]) -> None: ...
    def attribValue(self: Prim, name_or_attrib: Union[str, Attrib]) -> Union[Union[int, float, str, tuple],dict]: ...
    def positionAtInterior(self: Prim, u: float, v: float, w: float=0.0) -> Vector3: ...
    def attribValueAtInterior(self: Prim, attrib_or_name: Union[str, Attrib], u: float, v: float, w: float=0.0) -> Union[int, float, str, Tuple[int, ...], Tuple[float, ...], Tuple[str, ...]]: ...
    def boundingBox(self: Prim) -> BoundingBox: ...
    def nearestToPosition(self: Prim, pos3: Sequence[float]) -> None: ...
    def groups(self: Prim) -> Tuple[PrimGroup, ...]: ...
    def primuvConvert(self: Prim, u: Vector2, mode: int, tol: float) -> None: ...
    def primuConvert(self: Prim, *args: float) -> Any: ...

    def __repr__(self: Prim) -> Any: ...  ## Added by typing stub update
    def _nearestPointOnPrimToPosition(self: Prim, uvw: Vector3, position: Union[Sequence[float], Vector3]) -> Any: ...  ## Added by typing stub update
    def _attribInfo(self: Prim, name: str, attr_data_type: int, attr_size: int, is_array_type: bool) -> Any: ...  ## Added by typing stub update
class Face(Prim):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isClosed(self: Face) -> bool: ...
    def closed(self: Face) -> bool: ...
    def setIsClosed(self: Face, on: bool) -> None: ...
    def normal(self: Face) -> Vector3: ...
    def positionAt(self: Face, u: float) -> Vector3: ...
    def attribValueAt(self: Face, attrib_or_name: Union[str, Attrib], u: float, du: int=0) -> Union[int, float, str, Tuple[int, ...], Tuple[float, ...], Tuple[str, ...]]: ...
    def vertex(self: Face, index: int) -> None: ...
    def addVertex(self: Face, point: Point) -> Vertex: ...
    def arcLength(self: Face, u_start: float, u_stop: float, divs: int=10) -> None: ...

    def __repr__(self: Face) -> Any: ...  ## Added by typing stub update
class PackedPrim(Prim):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def transform(self: PackedPrim) -> Matrix3: ...
    def fullTransform(self: PackedPrim) -> Matrix4: ...
    def setTransform(self: PackedPrim, m4: Matrix4) -> None: ...
    def vertex(self: PackedPrim, index: int) -> None: ...

    def __repr__(self: PackedPrim) -> Any: ...  ## Added by typing stub update
class BaseKeyframe:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: BaseKeyframe) -> Any: ...
    def evaluatedType(self: BaseKeyframe) -> EnumValue: ...
    def setExpression(self: BaseKeyframe, expression: str, language: Optional[EnumValue]=None) -> None: ...
    def expression(self: BaseKeyframe) -> str: ...
    def isExpressionSet(self: BaseKeyframe) -> bool: ...
    def expressionLanguage(self: BaseKeyframe) -> EnumValue: ...
    def isExpressionLanguageSet(self: BaseKeyframe) -> bool: ...
    def setTime(self: BaseKeyframe, time: float) -> None: ...
    def isTimeSet(self: BaseKeyframe) -> bool: ...
    def time(self: BaseKeyframe) -> float: ...
    def setFrame(self: BaseKeyframe, frame: float) -> None: ...
    def frame(self: BaseKeyframe) -> float: ...
    def asCode(self: BaseKeyframe, brief: bool=False, save_keys_in_frames: bool=False, function_name: Optional[str]=None) -> str: ...

    def __repr__(self: BaseKeyframe) -> Any: ...  ## Added by typing stub update
class ChannelGraphSelection:
    thisown: Any = ...
    def __init__(self: ChannelGraphSelection, *args: str) -> None: ...
    __swig_destroy__: Any = ...
    def parm(self: ChannelGraphSelection) -> str: ...
    def path(self: ChannelGraphSelection) -> Any: ...
    def keyframes(self: ChannelGraphSelection) -> Tuple[BaseKeyframe, ...]: ...
    def flags(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def setFlags(self: ChannelGraphSelection, flags: Sequence[int]) -> Any: ...
    def values(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def timeMarks(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def slopes(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def accelerations(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def segments(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def inValues(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def inSlopes(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def inAccelerations(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def outValues(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def outSlopes(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def outAccelerations(self: ChannelGraphSelection) -> Tuple[int, ...]: ...
    def selectValues(self: ChannelGraphSelection, selections: Sequence[int], sel_incoming: bool, sel_outgoing: bool) -> None: ...
    def selectTimeMarks(self: ChannelGraphSelection, selections: Sequence[int]) -> None: ...
    def selectSlopes(self: ChannelGraphSelection, selections: Sequence[int], sel_incoming: bool, sel_outgoing: bool) -> None: ...
    def selectAccelerations(self: ChannelGraphSelection, selections: Sequence[int], sel_incoming: bool, sel_outgoing: bool) -> None: ...
    def selectSegments(self: ChannelGraphSelection, selections: Sequence[int]) -> None: ...
    def deselectValues(self: ChannelGraphSelection, selections: Sequence[int], sel_incoming: bool, sel_outgoing: bool) -> None: ...
    def deselectTimeMarks(self: ChannelGraphSelection, selections: Sequence[int]) -> None: ...
    def deselectSlopes(self: ChannelGraphSelection, selections: Sequence[int], sel_incoming: bool, sel_outgoing: bool) -> None: ...
    def deselectAccelerations(self: ChannelGraphSelection, selections: Sequence[int], sel_incoming: bool, sel_outgoing: bool) -> None: ...
    def deselectSegments(self: ChannelGraphSelection, selections: Sequence[int]) -> None: ...

    def __repr__(self: ChannelGraphSelection) -> Any: ...  ## Added by typing stub update
class NodeType:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: NodeType) -> Any: ...
    def category(self: NodeType) -> NodeTypeCategory: ...
    def name(self: NodeType) -> str: ...
    def nameComponents(self: NodeType) -> Tuple[str, ...]: ...
    def description(self: NodeType) -> str: ...
    def nameWithCategory(self: NodeType) -> str: ...
    def namespaceOrder(self: NodeType) -> Tuple[str, ...]: ...
    def sectionData(self: NodeType, section_name: str) -> str: ...
    def binarySectionData(self: NodeType, section_name: str) -> str: ...
    def hasSectionData(self: NodeType, section_name: str) -> bool: ...
    def source(self: NodeType) -> EnumValue: ...
    def sourcePath(self: NodeType) -> str: ...
    def sourceNetwork(self: NodeType) -> Optional[Node]: ...
    def definition(self: NodeType) -> HDADefinition: ...
    def allInstalledDefinitions(self: NodeType) -> Tuple[HDADefinition, ...]: ...
    def icon(self: NodeType) -> str: ...
    def minNumInputs(self: NodeType) -> int: ...
    def maxNumInputs(self: NodeType) -> int: ...
    def maxNumOutputs(self: NodeType) -> int: ...
    def isGenerator(self: NodeType) -> bool: ...
    def generatorFlag(self: NodeType) -> Any: ...
    def isManager(self: NodeType, include_management_types: bool=True) -> bool: ...
    def managerFlag(self: NodeType) -> Any: ...
    def hasUnorderedInputs(self: NodeType) -> bool: ...
    def unorderedInputsFlag(self: NodeType) -> Any: ...
    def hasEditableInputData(self: NodeType) -> bool: ...
    def aliases(self: NodeType) -> Tuple[str, ...]: ...
    def addAlias(self: NodeType, alias: str) -> None: ...
    def removeAlias(self: NodeType, alias: str) -> None: ...
    def hidden(self: NodeType) -> bool: ...
    def setHidden(self: NodeType, hidden: bool) -> None: ...
    def deprecated(self: NodeType) -> bool: ...
    def deprecationInfo(self: NodeType) -> Union[Dict[str, str],NodeType]: ...
    def instances(self: NodeType) -> Tuple[Node, ...]: ...
    def parmTemplates(self: NodeType) -> Tuple[ParmTemplate, ...]: ...
    def parmTemplateGroup(self: NodeType) -> ParmTemplateGroup: ...
    def uninstallFromPath(self: NodeType, path: str) -> Any: ...
    def hdaModule(self: NodeType) -> HDAModule: ...
    def hdaViewerStateModule(self: NodeType) -> Any: ...
    def hdaViewerHandleModule(self: NodeType) -> Any: ...
    def hasPermanentUserDefaults(self: NodeType) -> bool: ...
    def isReadable(self: NodeType) -> bool: ...
    def isWritable(self: NodeType) -> bool: ...
    def areContentsViewable(self: NodeType) -> Any: ...
    def containedNodeTypes(self: NodeType) -> Tuple[str, ...]: ...
    def childTypeCategory(self: NodeType) -> Any: ...
    def helpUrl(self: NodeType) -> str: ...
    def defaultHelpUrl(self: NodeType) -> str: ...
    def embeddedHelp(self: NodeType) -> str: ...
    def defaultShape(self: NodeType) -> str: ...
    def setDefaultShape(self: NodeType, shape: str) -> None: ...
    def defaultColor(self: NodeType) -> Color: ...
    def setDefaultColor(self: NodeType, color: Color) -> None: ...

    def __repr__(self: NodeType) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: NodeType) -> Any: ...  ## Added by typing stub update
class ParmTemplate:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: ParmTemplate) -> Any: ...
    def clone(self: ParmTemplate) -> ParmTemplate: ...
    def name(self: ParmTemplate) -> str: ...
    def setName(self: ParmTemplate, name: str) -> None: ...
    def label(self: ParmTemplate) -> str: ...
    def setLabel(self: ParmTemplate, label: str) -> None: ...
    def type(self: ParmTemplate) -> EnumValue: ...
    def dataType(self: ParmTemplate) -> EnumValue: ...
    def look(self: ParmTemplate) -> EnumValue: ...
    def setLook(self: ParmTemplate, look: EnumValue) -> None: ...
    def namingScheme(self: ParmTemplate) -> EnumValue: ...
    def setNamingScheme(self: ParmTemplate, naming_scheme: EnumValue) -> None: ...
    def numComponents(self: ParmTemplate) -> int: ...
    def setNumComponents(self: ParmTemplate, num_components: int) -> int: ...
    def disableWhen(self: ParmTemplate) -> str: ...
    def setDisableWhen(self: ParmTemplate, disable_when: str) -> None: ...
    def conditionals(self: ParmTemplate) -> Dict[EnumValue, str]: ...
    def setConditional(self: ParmTemplate, type: EnumValue, conditional: str) -> None: ...
    def isHidden(self: ParmTemplate) -> bool: ...
    def hide(self: ParmTemplate, on: bool) -> None: ...
    def isLabelHidden(self: ParmTemplate) -> bool: ...
    def hideLabel(self: ParmTemplate, on: bool) -> None: ...
    def joinsWithNext(self: ParmTemplate) -> bool: ...
    def setJoinWithNext(self: ParmTemplate, on: bool) -> None: ...
    def joinWithNext(self: ParmTemplate) -> bool: ...
    def help(self: ParmTemplate) -> str: ...
    def setHelp(self: ParmTemplate, help: str) -> None: ...
    def scriptCallback(self: ParmTemplate) -> str: ...
    def setScriptCallback(self: ParmTemplate, script_callback: str) -> None: ...
    def scriptCallbackLanguage(self: ParmTemplate) -> EnumValue: ...
    def setScriptCallbackLanguage(self: ParmTemplate, script_callback_language: EnumValue) -> None: ...
    def tags(self: ParmTemplate) -> Dict[str, str]: ...
    def setTags(self: ParmTemplate, tags: Dict[str, str]) -> None: ...
    def asCode(self: ParmTemplate, function_name: Optional[str]=None, variable_name: Optional[str]=None) -> str: ...

    def __repr__(self: ParmTemplate) -> Any: ...  ## Added by typing stub update
class ParmTemplateGroup:
    thisown: Any = ...
    def __init__(self: ParmTemplateGroup, parm_templates: Sequence[ParmTemplate]=()) -> None: ...
    def find(self: ParmTemplateGroup, name: str) -> Optional[ParmTemplate]: ...
    def findIndices(self: ParmTemplateGroup, name_or_parm_template: Union[str, ParmTemplate]) -> Tuple[int, ...]: ...
    def findFolder(self: ParmTemplateGroup, label_or_labels: Union[str, Sequence[str]]) -> Optional[FolderParmTemplate]: ...
    def findIndicesForFolder(self: ParmTemplateGroup, label_or_labels: Union[str, Sequence[str]]) -> Tuple[int, ...]: ...
    def entryAtIndices(self: ParmTemplateGroup, indices: Sequence[int]) -> ParmTemplate: ...
    def containingFolderIndices(self: ParmTemplateGroup, name_or_parm_template_or_indices: Union[str, ParmTemplate, Sequence[int]]) -> Tuple[int, ...]: ...
    def containingFolder(self: ParmTemplateGroup, name_or_parm_template: Union[str, ParmTemplate]) -> FolderParmTemplate: ...
    def entries(self: ParmTemplateGroup) -> Tuple[ParmTemplate, ...]: ...
    def parmTemplates(self: ParmTemplateGroup) -> Tuple[ParmTemplate, ...]: ...
    def entriesWithoutFolders(self: ParmTemplateGroup) -> Tuple[ParmTemplate, ...]: ...
    def replace(self: ParmTemplateGroup, name_or_parm_template_or_indices: Union[str, ParmTemplate, Sequence[int]], parm_template: ParmTemplate) -> None: ...
    def insertBefore(self: ParmTemplateGroup, name_or_parm_template_or_indices: Union[str, ParmTemplate, Sequence[int]], parm_template: ParmTemplate) -> None: ...
    def insertAfter(self: ParmTemplateGroup, name_or_parm_template_or_indices: Union[str, ParmTemplate, Sequence[int]], parm_template: ParmTemplate) -> None: ...
    def append(self: ParmTemplateGroup, parm_template: ParmTemplate) -> None: ...
    def appendToFolder(self: ParmTemplateGroup, label_or_labels_or_parm_template_or_indices: Union[str, Sequence[str], ParmTemplate, Sequence[int]], parm_template: ParmTemplate) -> None: ...
    def addParmTemplate(self: ParmTemplateGroup, parm_template: ParmTemplate) -> None: ...
    def remove(self: ParmTemplateGroup, name_or_parm_template_or_indices: Union[str, ParmTemplate, Sequence[int]]) -> None: ...
    def hide(self: ParmTemplateGroup, name_or_parm_template_or_indices: Union[str, ParmTemplate, Sequence[int]], on: bool) -> None: ...
    def hideFolder(self: ParmTemplateGroup, label_or_labels: Union[str, Sequence[str]], on: bool) -> None: ...
    def isHidden(self: ParmTemplateGroup, name_or_parm_template_or_indices: Union[str, ParmTemplate, Sequence[int]]) -> bool: ...
    def isFolderHidden(self: ParmTemplateGroup, label_or_labels: Union[str, Sequence[str]]) -> bool: ...
    def clear(self: ParmTemplateGroup) -> None: ...
    def asDialogScript(self: ParmTemplateGroup, rename_conflicting_parms: bool=False, full_info: bool=False, script_name: Optional[str]=None, script_label: Optional[str]=None, script_tags: dict={}) -> str: ...
    def setToDialogScript(self: ParmTemplateGroup, dialog_script: str) -> None: ...
    def asCode(self: ParmTemplateGroup, function_name: Optional[str]=None, variable_name: Optional[str]=None) -> str: ...
    def sourceNode(self: ParmTemplateGroup) -> Optional[Node]: ...
    def sourceNodeType(self: ParmTemplateGroup) -> Optional[NodeType]: ...
    def name(self: ParmTemplateGroup) -> str: ...
    def setName(self: ParmTemplateGroup, name: str) -> None: ...
    def label(self: ParmTemplateGroup) -> str: ...
    def setLabel(self: ParmTemplateGroup, label: str) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: ParmTemplateGroup) -> Any: ...  ## Added by typing stub update
class Pane:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def desktop(self: Pane) -> Optional[Desktop]: ...
    def id(self: Pane) -> Any: ...
    def isMaximized(self: Pane) -> bool: ...
    def floatingPanel(self: Pane) -> Any: ...
    def setIsMaximized(self: Pane, on: bool) -> None: ...
    def tabs(self: Pane) -> Tuple[PaneTab, ...]: ...
    def createTab(self: Pane, type: EnumValue) -> PaneTab: ...
    def currentTab(self: Pane) -> PaneTab: ...
    def tabOfType(self: Pane, type: EnumValue, index: int=0) -> Optional[PaneTab]: ...
    def splitHorizontally(self: Pane) -> Pane: ...
    def splitVertically(self: Pane) -> Pane: ...
    def getSplitParent(self: Pane) -> Optional[Pane]: ...
    def getSplitChild(self: Pane, index: int) -> Optional[Pane]: ...
    def splitSwap(self: Pane) -> None: ...
    def splitRotate(self: Pane) -> None: ...
    def isSplitMaximized(self: Pane) -> bool: ...
    def isSplitMinimized(self: Pane) -> bool: ...
    def setIsSplitMaximized(self: Pane, on: bool) -> bool: ...
    def isSplit(self: Pane) -> bool: ...
    def setSplitFraction(self: Pane, fraction: float) -> None: ...
    def getSplitFraction(self: Pane, fraction) -> float: ...
    def setSplitDirection(self: Pane, dir: int) -> None: ...
    def getSplitDirection(self: Pane, dir) -> float: ...
    def setShowPaneTabs(self: Pane, on: bool) -> None: ...
    def showPaneTabs(self: Pane, on: bool) -> None: ...
    def isShowingPaneTabs(self: Pane) -> bool: ...
    def showPaneTabsStow(self: Pane, on: bool) -> None: ...
    def isShowingPaneTabsStow(self: Pane) -> bool: ...

    def __repr__(self: Pane) -> Any: ...  ## Added by typing stub update
class PaneTab:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: PaneTab) -> Any: ...
    def pane(self: PaneTab) -> Optional[Pane]: ...
    def floatingPanel(self: PaneTab) -> Optional[FloatingPanel]: ...
    def name(self: PaneTab) -> str: ...
    def setName(self: PaneTab, name: str) -> None: ...
    def isCurrentTab(self: PaneTab) -> bool: ...
    def setIsCurrentTab(self: PaneTab) -> None: ...
    def isFloating(self: PaneTab) -> bool: ...
    def clone(self: PaneTab) -> PaneTab: ...
    def close(self: PaneTab) -> None: ...
    def type(self: PaneTab) -> EnumValue: ...
    def setType(self: PaneTab, type: EnumValue) -> PaneTab: ...
    def linkGroup(self: PaneTab) -> EnumValue: ...
    def setLinkGroup(self: PaneTab, group: EnumValue) -> None: ...
    def isPin(self: PaneTab) -> bool: ...
    def setPin(self: PaneTab, pin: bool) -> None: ...
    def size(self: PaneTab) -> Tuple[int, ...]: ...
    def contentSize(self: PaneTab) -> Any: ...
    def hasNetworkControls(self: PaneTab) -> bool: ...
    def isShowingNetworkControls(self: PaneTab) -> bool: ...
    def setShowNetworkControls(self: PaneTab, pin: bool) -> None: ...
    def showNetworkControls(self: PaneTab, pin: bool) -> None: ...
    def displayRadialMenu(self: PaneTab, menu: str) -> None: ...

    def __repr__(self: PaneTab) -> Any: ...  ## Added by typing stub update
    def _getValueNames(self: PaneTab) -> Any: ...  ## Added by typing stub update
    def _getValue(self: PaneTab, name: str) -> Any: ...  ## Added by typing stub update
    def _setValue(self: PaneTab, name: str, value: str) -> Any: ...  ## Added by typing stub update
    def _pressButton(self: PaneTab, name: str) -> Any: ...  ## Added by typing stub update
class PathBasedPaneTab(PaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def pwd(self: PathBasedPaneTab) -> Node: ...
    def setPwd(self: PathBasedPaneTab, node: Node) -> None: ...
    def cd(self: PathBasedPaneTab, path: str) -> None: ...
    def currentNode(self: PathBasedPaneTab) -> Node: ...
    def setCurrentNode(self: PathBasedPaneTab, node: Node, pick_node: bool=True) -> None: ...

    def __repr__(self: PathBasedPaneTab) -> Any: ...  ## Added by typing stub update
class DopData:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def freeze(self: DopData) -> DopData: ...
    def isFrozen(self: DopData) -> bool: ...
    def path(self: DopData) -> str: ...
    def selectionPath(self: DopData) -> str: ...
    def __hash__(self: DopData) -> Any: ...
    def dopNetNode(self: DopData) -> Node: ...
    def simulation(self: DopData) -> DopSimulation: ...
    def creator(self: DopData) -> DopNode: ...
    def id(self: DopData) -> str: ...
    def dataType(self: DopData) -> str: ...
    def recordTypes(self: DopData) -> Tuple[str, ...]: ...
    def record(self: DopData, record_type: str, record_index: int=0) -> DopRecord: ...
    def records(self: DopData, record_type: str) -> Tuple[DopRecord, ...]: ...
    def options(self: DopData) -> DopRecord: ...
    def subData(self: DopData) -> Dict[str, DopData]: ...
    def findSubData(self: DopData, data_spec: str) -> Optional[DopData]: ...
    def findAllSubData(self: DopData, data_spec: str, recurse: bool=False) -> Dict[str, DopData]: ...
    def createSubData(self: DopData, data_name: str, data_type: str="Any", avoid_name_collisions: bool=False) -> DopData: ...
    def attachSubData(self: DopData, data: DopData, new_data_name: str, avoid_name_collisions: bool=False) -> None: ...
    def removeSubData(self: DopData, data_spec: str) -> None: ...
    def copyContentsFrom(self: DopData, data: DopData) -> None: ...
    def fieldGeometry(self: DopData, data_name: str) -> Any: ...
    def geometry(self: DopData, data_name: Optional[str]=None) -> Any: ...
    def editableGeometry(self: DopData, data_name: Optional[str]=None) -> Any: ...

    def __repr__(self: DopData) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: DopData) -> Any: ...  ## Added by typing stub update
class ShelfElement:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def filePath(self: ShelfElement) -> str: ...
    def setFilePath(self: ShelfElement, file_path: str) -> None: ...
    def name(self: ShelfElement) -> str: ...
    def setName(self: ShelfElement, name: str) -> None: ...
    def label(self: ShelfElement) -> str: ...
    def setLabel(self: ShelfElement, label: str) -> None: ...
    def fileLocation(self: ShelfElement) -> str: ...
    def isReadOnly(self: ShelfElement) -> bool: ...
    def setReadOnly(self: ShelfElement, on: bool) -> None: ...

    def __repr__(self: ShelfElement) -> Any: ...  ## Added by typing stub update
class _logging_Sink:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def connectedSources(self) -> Tuple[str, ...]: ...
    def connect(self, source_name) -> None: ...
    def disconnect(self, source_name) -> None: ...
    def setFilterCallback(self, callback) -> None: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class Agent(PackedPrim):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def definition(self: Agent) -> AgentDefinition: ...
    def setDefinition(self: Agent, definition: AgentDefinition) -> None: ...
    def currentLayer(self: Agent) -> AgentLayer: ...
    def setCurrentLayer(self: Agent, layer: AgentLayer) -> None: ...
    def collisionLayer(self: Agent) -> AgentLayer: ...
    def setCollisionLayer(self: Agent, layer: AgentLayer) -> None: ...
    def currentLayers(self: Agent) -> Tuple[AgentLayer, ...]: ...
    def setCurrentLayers(self: Agent, layers: Sequence[AgentLayer]) -> None: ...
    def collisionLayers(self: Agent) -> Tuple[AgentLayer, ...]: ...
    def setCollisionLayers(self: Agent, layers: Sequence[AgentLayer]) -> None: ...
    def clips(self: Agent) -> Tuple[AgentClip, ...]: ...
    def setClips(self: Agent, clips: Sequence[AgentClip]) -> None: ...
    def clipTimes(self: Agent) -> Tuple[float, ...]: ...
    def setClipTimes(self: Agent, times: Sequence[float]) -> None: ...
    def clipWeights(self: Agent) -> Any: ...
    def setClipWeights(self: Agent, weights: Sequence[float]) -> None: ...
    def localTransform(self: Agent, transform: int) -> Matrix4: ...
    def setLocalTransform(self: Agent, xform: Matrix4, index: int) -> None: ...
    def worldTransform(self: Agent, transform: int) -> Matrix4: ...
    def setWorldTransform(self: Agent, xform: Matrix4, index: int) -> None: ...
    def channelValue(self: Agent, channel_index: int) -> float: ...
    def setChannelValue(self: Agent, value: float, channel_index: int) -> None: ...

    def __repr__(self: Agent) -> Any: ...  ## Added by typing stub update
class AgentClip:
    thisown: Any = ...
    def __init__(self: AgentClip, clip: str, rig: str, name: str="Any") -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentClip) -> Any: ...
    def freeze(self: AgentClip) -> AgentClip: ...
    def name(self: AgentClip) -> str: ...
    def fileName(self: AgentClip, expanded: bool=False) -> str: ...
    def isLoaded(self: AgentClip) -> bool: ...
    def loadFromFile(self: AgentClip) -> None: ...
    def length(self: AgentClip) -> float: ...
    def startTime(self: AgentClip) -> float: ...
    def sampleCount(self: AgentClip) -> int: ...
    def sampleRate(self: AgentClip) -> float: ...
    def addChannel(self: AgentClip, name: str, samples: Sequence[float]) -> None: ...
    def sampleLocal(self: AgentClip, time: float, transform: int) -> Matrix4: ...
    def sampleWorld(self: AgentClip, time: float, transform: int) -> Matrix4: ...
    def localTransforms(self: AgentClip, sample: int) -> Tuple[Matrix4, ...]: ...
    def worldTransforms(self: AgentClip, sample: int) -> Tuple[Matrix4, ...]: ...
    def setLocalTransforms(self: AgentClip, sample: int, xforms: Sequence[Matrix4]) -> None: ...
    def sample(self: AgentClip, time: float, channel_name: str) -> float: ...
    def channelNames(self: AgentClip) -> Tuple[str, ...]: ...
    def data(self: AgentClip, binary: bool, worldspace: bool=False) -> str: ...
    def extractLocomotion(self: AgentClip, cog_transform: int, cog_lookat_transform: int=-1, convert_inplace: bool=True, project_on_dominant_axis: bool=False) -> None: ...

    def __repr__(self: AgentClip) -> Any: ...  ## Added by typing stub update
class AgentDefinition:
    thisown: Any = ...
    def __init__(self: AgentDefinition, rig: AgentRig, shapelib: AgentShapeLibrary) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentDefinition) -> Any: ...
    def freeze(self: AgentDefinition, new_shapelib: Optional[AgentShapeLibrary]=None, new_rig: Optional[AgentRig]=None) -> AgentDefinition: ...
    def rig(self: AgentDefinition) -> AgentRig: ...
    def shapeLibrary(self: AgentDefinition) -> AgentShapeLibrary: ...
    def layers(self: AgentDefinition) -> Tuple[AgentLayer, ...]: ...
    def findLayer(self: AgentDefinition, name: str) -> AgentLayer: ...
    def clips(self: AgentDefinition) -> Tuple[AgentClip, ...]: ...
    def findClip(self: AgentDefinition, name: str) -> AgentClip: ...
    def transformGroups(self: AgentDefinition) -> Tuple[AgentTransformGroup, ...]: ...
    def findTransformGroup(self: AgentDefinition, name: str) -> AgentTransformGroup: ...
    def addClip(self: AgentDefinition, clip: AgentClip) -> None: ...
    def removeClip(self: AgentDefinition, name: str) -> None: ...
    def addLayer(self: AgentDefinition, layer: AgentLayer) -> None: ...
    def removeLayer(self: AgentDefinition, name: str) -> None: ...
    def addTransformGroup(self: AgentDefinition, group: AgentTransformGroup) -> None: ...
    def removeTransformGroup(self: AgentDefinition, name: str) -> None: ...
    def metadata(self: AgentDefinition, metadata) -> None: ...
    def setMetadata(self: AgentDefinition, metadata: AgentMetadata) -> Any: ...

    def __repr__(self: AgentDefinition) -> Any: ...  ## Added by typing stub update
class AgentLayer:
    thisown: Any = ...
    def __init__(self: AgentLayer, name: str, rig: AgentRig, shapelib: AgentShapeLibrary, shape_bindings: bool, source_layer: Optional[AgentLayer]=None) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentLayer) -> Any: ...
    def asJSON(self: AgentLayer) -> str: ...
    def name(self: AgentLayer) -> str: ...
    def fileName(self: AgentLayer, expanded: bool=False) -> str: ...
    def bindings(self: AgentLayer, transform: Optional[int]=None) -> Tuple[AgentShapeBinding, ...]: ...
    def staticBindings(self: AgentLayer) -> Tuple[AgentShapeBinding, ...]: ...
    def deformingBindings(self: AgentLayer) -> Tuple[AgentShapeBinding, ...]: ...

    def __repr__(self: AgentLayer) -> Any: ...  ## Added by typing stub update
class AgentMetadata:
    thisown: Any = ...
    def __init__(self: AgentMetadata, data: Dict[str, Any]) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentMetadata) -> Any: ...
    def freeze(self: AgentMetadata) -> AgentMetadata: ...
    def isReadOnly(self: AgentMetadata) -> bool: ...
    def asJSON(self: AgentMetadata) -> str: ...
    def fileName(self: AgentMetadata, expanded: bool=False) -> str: ...
    def data(self: AgentMetadata) -> Dict[str, Any]: ...
    def setData(self: AgentMetadata, data: Dict[str, Any]) -> None: ...

    def __repr__(self: AgentMetadata) -> Any: ...  ## Added by typing stub update
class AgentRig:
    thisown: Any = ...
    def __init__(self: AgentRig, name: str, transform_names: Sequence[str], hierarchy: Sequence[Sequence[int]]) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentRig) -> Any: ...
    def freeze(self: AgentRig) -> AgentRig: ...
    def asJSON(self: AgentRig) -> str: ...
    def name(self: AgentRig) -> str: ...
    def fileName(self: AgentRig, expanded: bool=False) -> str: ...
    def transformCount(self: AgentRig) -> int: ...
    def transformName(self: AgentRig, transform: int) -> str: ...
    def findTransform(self: AgentRig, transform_name: str) -> int: ...
    def parentIndex(self: AgentRig, transform: int) -> int: ...
    def childIndices(self: AgentRig, transform: int) -> Tuple[int, ...]: ...
    def setRestLocalTransforms(self: AgentRig, xforms: Sequence[Matrix4]) -> None: ...
    def restLocalTransform(self: AgentRig, transform: int) -> Matrix4: ...
    def restWorldTransform(self: AgentRig, transform: int) -> Matrix4: ...
    def channelCount(self: AgentRig) -> int: ...
    def channelName(self: AgentRig, channel_index: int) -> str: ...
    def channelDefaultValue(self: AgentRig, channel_index: int) -> float: ...
    def channelTransform(self: AgentRig, channel_index: int) -> int: ...
    def findChannel(self: AgentRig, channel_name: str) -> int: ...
    def addChannel(self: AgentRig, name: str, default_value: float=0.0, transform: int=-1) -> None: ...

    def __repr__(self: AgentRig) -> Any: ...  ## Added by typing stub update
class AgentShape:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentShape) -> Any: ...
    def name(self: AgentShape) -> str: ...
    def uniqueId(self: AgentShape) -> int: ...
    def geometry(self: AgentShape) -> Geometry: ...
    def freeze(self: AgentShape) -> AgentShape: ...
    def setGeometry(self: AgentShape, geometry: Geometry) -> None: ...

    def __repr__(self: AgentShape) -> Any: ...  ## Added by typing stub update
class AgentShapeBinding:
    thisown: Any = ...
    def __init__(self: AgentShapeBinding, shape: int, deformer: AgentShape, bounds_scale: float=1.0) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentShapeBinding) -> Any: ...
    def shapeName(self: AgentShapeBinding) -> str: ...
    def shapeId(self: AgentShapeBinding) -> int: ...
    def transformId(self: AgentShapeBinding) -> int: ...
    def isDeforming(self: AgentShapeBinding) -> bool: ...
    def boundsScale(self: AgentShapeBinding) -> Vector3: ...
    def shape(self: AgentShapeBinding) -> AgentShape: ...
    def deformer(self: AgentShapeBinding) -> AgentShapeDeformer: ...

    def __repr__(self: AgentShapeBinding) -> Any: ...  ## Added by typing stub update
class AgentShapeDeformer:
    thisown: Any = ...
    def __init__(self: AgentShapeDeformer, name: str) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentShapeDeformer) -> Any: ...
    def name(self: AgentShapeDeformer) -> str: ...

    def __repr__(self: AgentShapeDeformer) -> Any: ...  ## Added by typing stub update
class AgentShapeLibrary:
    thisown: Any = ...
    def __init__(self: AgentShapeLibrary, filename: str, keep_external_ref: bool=True) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentShapeLibrary) -> Any: ...
    def freeze(self: AgentShapeLibrary, keep_external_ref: bool=False) -> AgentShapeLibrary: ...
    def name(self: AgentShapeLibrary) -> str: ...
    def fileName(self: AgentShapeLibrary, expanded: bool=False) -> str: ...
    def findShape(self: AgentShapeLibrary, shape_name: str) -> AgentShape: ...
    def shapes(self: AgentShapeLibrary) -> Tuple[AgentShape, ...]: ...
    def data(self: AgentShapeLibrary) -> Geometry: ...
    def addShape(self: AgentShapeLibrary, name: str, geometry: Geometry) -> AgentShape: ...

    def __repr__(self: AgentShapeLibrary) -> Any: ...  ## Added by typing stub update
class AgentTransformGroup:
    thisown: Any = ...
    def __init__(self: AgentTransformGroup, name: str, transforms: Sequence[int], rig: AgentRig, weights: Sequence[float], channels: Sequence[int]) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AgentTransformGroup) -> Any: ...
    def asJSON(self: AgentTransformGroup) -> str: ...
    def name(self: AgentTransformGroup) -> str: ...
    def fileName(self: AgentTransformGroup, expanded: bool=False) -> str: ...
    def transformIndices(self: AgentTransformGroup) -> Tuple[int, ...]: ...
    def weights(self: AgentTransformGroup) -> Tuple[float, ...]: ...
    def channelIndices(self: AgentTransformGroup) -> Tuple[int, ...]: ...

    def __repr__(self: AgentTransformGroup) -> Any: ...  ## Added by typing stub update
class anonstats:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def recordOccurrence(key: str) -> Any: ...
    @staticmethod
    def recordString(key: str, value: str) -> Any: ...
    @staticmethod
    def hasString(key: str) -> Any: ...
    @staticmethod
    def getString(key: str) -> Any: ...
    @staticmethod
    def incrementCount(key: str, count: int=1) -> Any: ...
    @staticmethod
    def logEvent(key: str, message: str) -> Any: ...
    @staticmethod
    def addSum(key: str, stat_value: float, count: int=1) -> Any: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class AssetBrowser(PathBasedPaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def reload(self: AssetBrowser) -> Any: ...
    def installRequiredDefinitionsForNodeTypeName(self: AssetBrowser, node_type_name: str) -> Any: ...
    def storeUpdateSessionKey(self: AssetBrowser, session_key: str) -> Any: ...
    def updateAssetDownloadFraction(self: AssetBrowser, node_type_name: str, downloaded_bytes: int, total_bytes: int) -> Any: ...
    def storeSyncSessionKey(self: AssetBrowser, session_key: str) -> Any: ...

    def __repr__(self: AssetBrowser) -> Any: ...  ## Added by typing stub update
class AssetGalleryDataSource:
    thisown: Any = ...
    def __init__(self: AssetGalleryDataSource, source_identifier: str, args: Optional[str]=None) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AssetGalleryDataSource) -> Any: ...
    def isValid(self: AssetGalleryDataSource) -> bool: ...
    def isReadOnly(self: AssetGalleryDataSource) -> bool: ...
    def sourceIdentifier(self: AssetGalleryDataSource) -> str: ...
    def sourceArgs(self: AssetGalleryDataSource) -> str: ...
    def startTransaction(self: AssetGalleryDataSource) -> None: ...
    def endTransaction(self: AssetGalleryDataSource, commit: bool=True) -> None: ...
    def getItemIds(self: AssetGalleryDataSource) -> Tuple[str, ...]: ...
    def sourceTypeName(self: AssetGalleryDataSource, item_id: Optional[str]=None) -> str: ...
    def typeName(self: AssetGalleryDataSource, item_id: str) -> str: ...
    def label(self: AssetGalleryDataSource, item_id: str) -> str: ...
    def thumbnail(self: AssetGalleryDataSource, item_id: str) -> str: ...
    def creationDate(self: AssetGalleryDataSource, item_id: str) -> int: ...
    def modificationDate(self: AssetGalleryDataSource, item_id: str) -> int: ...
    def isStarred(self: AssetGalleryDataSource, item_id: str) -> bool: ...
    def colorTag(self: AssetGalleryDataSource, item_id: str) -> str: ...
    def tags(self: AssetGalleryDataSource, item_id: str) -> Tuple[str, ...]: ...
    def filePath(self: AssetGalleryDataSource, item_id: str) -> str: ...
    def ownsFile(self: AssetGalleryDataSource, item_id: str) -> bool: ...
    def blindData(self: AssetGalleryDataSource, item_id: str) -> str: ...
    def setLabel(self: AssetGalleryDataSource, item_id: str, label: str) -> bool: ...
    def setThumbnail(self: AssetGalleryDataSource, item_id: str, thumbnail: str) -> bool: ...
    def setModificationDate(self: AssetGalleryDataSource, item_id: str, timestamp: int) -> bool: ...
    def setIsStarred(self: AssetGalleryDataSource, item_id: str, isstarred: bool) -> bool: ...
    def setColorTag(self: AssetGalleryDataSource, item_id: str, color_tag: str) -> bool: ...
    def setMetadata(self: AssetGalleryDataSource, item_id: str, metadata: Dict[str, Any]) -> None: ...
    def setFilePath(self: AssetGalleryDataSource, item_id: str, file_path: str) -> bool: ...
    def setOwnsFile(self: AssetGalleryDataSource, item_id: str, owns_file: bool) -> bool: ...
    def setBlindData(self: AssetGalleryDataSource, item_id: str, data: str) -> bool: ...
    def createTag(self: AssetGalleryDataSource, tag: str) -> bool: ...
    def deleteTag(self: AssetGalleryDataSource, tag: str, delete_if_assigned: bool) -> bool: ...
    def addTag(self: AssetGalleryDataSource, item_id: str, tag: str) -> bool: ...
    def removeTag(self: AssetGalleryDataSource, item_id: str, tag: str) -> bool: ...
    def generateItemFilePath(self: AssetGalleryDataSource, item_id: str, file_ext: str) -> str: ...
    def addItem(self: AssetGalleryDataSource, label: str, file_path: Optional[str]=None, thumbnail: bytes=b"Any", type_name: str="Any", blind_data: bytes=b"Any", creation_date: int=0) -> str: ...
    def markItemsForDeletion(self: AssetGalleryDataSource, item_ids: Sequence[str]) -> bool: ...
    def unmarkItemsForDeletion(self: AssetGalleryDataSource, item_ids: Sequence[str]) -> bool: ...
    def saveAs(self: AssetGalleryDataSource, source_identifier: str) -> bool: ...
    def metadata(self: AssetGalleryDataSource, item_id: str) -> Union[Dict[str, str],float]: ...

    def __repr__(self: AssetGalleryDataSource) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: AssetGalleryDataSource) -> Any: ...  ## Added by typing stub update
class Attrib:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Attrib) -> Any: ...
    def destroy(self: Attrib) -> None: ...
    def geometry(self: Attrib) -> Geometry: ...
    def name(self: Attrib) -> str: ...
    def dataType(self: Attrib) -> EnumValue: ...
    def type(self: Attrib) -> EnumValue: ...
    def isArrayType(self: Attrib) -> bool: ...
    def qualifier(self: Attrib) -> str: ...
    def size(self: Attrib) -> int: ...
    def setSize(self: Attrib) -> None: ...
    def isTransformedAsVector(self: Attrib) -> Any: ...
    def isTransformedAsNormal(self: Attrib) -> bool: ...
    def boostAnyDefaultValue(self: Attrib) -> Any: ...
    def strings(self: Attrib) -> Tuple[str, ...]: ...
    def replaceString(self: Attrib, before: str, after: str) -> Any: ...
    def dicts(self: Attrib) -> Tuple[dict, ...]: ...
    def indexPairPropertyTables(self: Attrib) -> Tuple[IndexPairPropertyTable, ...]: ...
    def optionType(self: Attrib, name: str) -> EnumValue: ...
    def setOption(self: Attrib, name: str, value, type_hint: EnumValue=fieldType.NoSuchField) -> None: ...
    def removeOption(self: Attrib, name: str) -> None: ...
    def dataId(self: Attrib) -> None: ...
    def incrementDataId(self: Attrib) -> None: ...
    def defaultValue(self: Attrib) -> Union[int,float,str,Tuple[int, ...]]: ...
    def options(self: Attrib, name: str) -> Union[bool, int, float, str, Vector2, Vector4, Quaternion, Matrix3, Matrix4, Tuple[int, ...], Tuple[float, ...]]: ...
    def option(self: Attrib, option_name: str) -> Any: ...

    def __repr__(self: Attrib) -> Any: ...  ## Added by typing stub update
class AttribDataId:
    thisown: Any = ...
    def __init__(self) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: AttribDataId) -> Any: ...
    def isValid(self: AttribDataId) -> bool: ...
    def vexAttribDataId(self: AttribDataId) -> Tuple[int, ...]: ...

    def __repr__(self: AttribDataId) -> Any: ...  ## Added by typing stub update
    def _getstate(self: AttribDataId) -> Tuple[int, ...]: ...  ## Added by typing stub update
    def _setstate(self: AttribDataId, state: Tuple[int, int]) -> None: ...  ## Added by typing stub update
    def __getstate__(self) -> None: ...  ## Added by typing stub update
    def __setstate__(self, state) -> None: ...  ## Added by typing stub update
class audio:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def turnOffAudio() -> None: ...
    @staticmethod
    def useTimeLineMode() -> None: ...
    @staticmethod
    def useTimeSliceMode() -> None: ...
    @staticmethod
    def useTestMode() -> None: ...
    @staticmethod
    def setMono(on: bool) -> None: ...
    @staticmethod
    def setVolumeTied(on: bool) -> None: ...
    @staticmethod
    def setMeter(on: bool) -> None: ...
    @staticmethod
    def setLeftVolume(value: float) -> None: ...
    @staticmethod
    def setRightVolume(value: float) -> None: ...
    @staticmethod
    def useChops() -> None: ...
    @staticmethod
    def useAudioFile() -> None: ...
    @staticmethod
    def setChopPath(path: str) -> None: ...
    @staticmethod
    def setAudioFileName(path: str) -> None: ...
    @staticmethod
    def setAudioOffset(offset: float) -> None: ...
    @staticmethod
    def setAudioFrame(frame: float) -> None: ...
    @staticmethod
    def setScrubRepeat(on: bool) -> None: ...
    @staticmethod
    def setScrubSustain(value: float) -> None: ...
    @staticmethod
    def setScrubRate(value: float) -> None: ...
    @staticmethod
    def reverse() -> None: ...
    @staticmethod
    def stop() -> None: ...
    @staticmethod
    def play() -> None: ...
    @staticmethod
    def setLooping(on: bool) -> None: ...
    @staticmethod
    def setRewind(on: bool) -> None: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class BoundingBox:
    thisown: Any = ...
    def __init__(self: BoundingBox, xmin: float=0.0, ymin: float=0.0, zmin: float=0.0, xmax: float=0.0, ymax: float=0.0, zmax: float=0.0) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: BoundingBox, bbox: BoundingBox, tolerance: float=0.00001) -> bool: ...
    def almostEqual(self: BoundingBox, bbox: BoundingBox, tolerance: float=0.00001) -> Any: ...
    def __hash__(self: BoundingBox) -> Any: ...
    def __mul__(self: BoundingBox, matrix4: Matrix4) -> BoundingBox: ...
    def isValid(self: BoundingBox) -> bool: ...
    def setTo(self: BoundingBox, bounds_sequence: Sequence[float]) -> None: ...
    def minvec(self: BoundingBox) -> Vector3: ...
    def maxvec(self: BoundingBox) -> Vector3: ...
    def sizevec(self: BoundingBox) -> Vector3: ...
    def center(self: BoundingBox) -> Vector3: ...
    def enlargeToContain(self: BoundingBox, point_or_bbox: Union[Sequence[float], Vector3, BoundingBox]) -> None: ...
    def contains(self: BoundingBox, point: Sequence[float]) -> None: ...

    def __str__(self: BoundingBox) -> Any: ...  ## Added by typing stub update
    def __repr__(self: BoundingBox) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: BoundingBox) -> Any: ...  ## Added by typing stub update
class BoundingRect:
    thisown: Any = ...
    @overload
    def __init__(self: BoundingRect, p1: Iterable[float]=(0.0, 0.0), p2: Iterable[float]=(0.0, 0.0)) -> None: ...
    @overload
    def __init__(self: BoundingRect, xmin: float=0.0, ymin: float=0.0, xmax: float=0.0, ymax: float=0.0) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: BoundingRect, rect: BoundingRect, tolerance: float=0.00001) -> bool: ...
    def __hash__(self: BoundingRect) -> Any: ...
    def isValid(self: BoundingRect) -> bool: ...
    def setTo(self: BoundingRect, bounds_sequence: Sequence[float]) -> None: ...
    def translate(self: BoundingRect, offset: Sequence[float]) -> None: ...
    def scale(self: BoundingRect, scale: Sequence[float]) -> None: ...
    def expand(self: BoundingRect, offset: Sequence[float]) -> None: ...
    def min(self: BoundingRect) -> Vector2: ...
    def max(self: BoundingRect) -> Vector2: ...
    def size(self: BoundingRect) -> Vector2: ...
    def center(self: BoundingRect) -> Vector2: ...
    def getOffsetToAvoid(self: BoundingRect, bounds: BoundingRect, direction: Optional[Vector2]=None) -> Vector2: ...
    def enlargeToContain(self: BoundingRect, point_or_rect: Union[Sequence[float], Vector2, BoundingRect]) -> None: ...
    def intersect(self: BoundingRect, rect: BoundingRect) -> None: ...
    def intersects(self: BoundingRect, rect: Sequence[float]) -> bool: ...
    def contains(self: BoundingRect, rect: Sequence[float]) -> bool: ...
    def closestPoint(self: BoundingRect, point: Sequence[float]) -> Vector2: ...

    def __str__(self: BoundingRect) -> Any: ...  ## Added by typing stub update
    def __repr__(self: BoundingRect) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: BoundingRect) -> Any: ...  ## Added by typing stub update
class ButtonParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, label: str, disable_when: Optional[str]=None, is_hidden: bool=False, is_label_hidden: bool=False, join_with_next: bool=False, help: Optional[str]=None, script_callback: Optional[str]=None, script_callback_language: EnumValue=scriptLanguage.Hscript, tags: dict={}) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: ButtonParmTemplate) -> Any: ...  ## Added by typing stub update
class ChannelEditorPane(PaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def graph(self: ChannelEditorPane) -> ChannelGraph: ...
    def channelListSplitFraction(self: ChannelEditorPane) -> float: ...
    def setChannelListSplitFraction(self: ChannelEditorPane, value: float) -> None: ...
    def displayFilter(self: ChannelEditorPane) -> str: ...
    def setDisplayFilter(self: ChannelEditorPane, filter: str) -> None: ...
    def editorMode(self: ChannelEditorPane) -> EnumValue: ...
    def setEditorMode(self: ChannelEditorPane, mode: EnumValue) -> None: ...
    def templateFilter(self: ChannelEditorPane) -> str: ...
    def setTemplateFilter(self: ChannelEditorPane, filter: str) -> None: ...
    def colorsCallback(self: ChannelEditorPane) -> str: ...
    def setColorsCallback(self: ChannelEditorPane, callback_name: str) -> bool: ...
    def unregisterColorsCallback(self: ChannelEditorPane, callback_name: str) -> bool: ...
    def colorsCallbacks(self: ChannelEditorPane) -> Tuple[str, ...]: ...
    def registerColorsCallback(self: ChannelEditorPane, callback_name: str, callback_object) -> bool: ...
    def channelList(self: ChannelEditorPane) -> Any: ...
    def setChannelList(self: ChannelEditorPane, l: ChannelList) -> Any: ...
    def channelListPinned(self: ChannelEditorPane) -> Any: ...
    def setChannelListPinned(self: ChannelEditorPane, pinned: bool) -> Any: ...

    def __repr__(self: ChannelEditorPane) -> Any: ...  ## Added by typing stub update
class ChannelGraph:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: ChannelGraph) -> Any: ...
    def selectedKeyframes(self: ChannelGraph) -> Dict[Parm, Tuple[BaseKeyframe, ...]]: ...
    def selection(self: ChannelGraph) -> Tuple[ChannelGraphSelection, ...]: ...
    def setSelection(self: ChannelGraph, chan_graph_selections: Sequence[ChannelGraphSelection]) -> None: ...

    def __repr__(self: ChannelGraph) -> Any: ...  ## Added by typing stub update
class ChannelList:
    thisown: Any = ...
    def __init__(self) -> None: ...
    __swig_destroy__: Any = ...
    def clear(self: ChannelList) -> None: ...
    def parms(self: ChannelList) -> Tuple[Parm, ...]: ...
    def selected(self: ChannelList) -> Tuple[Parm, ...]: ...
    def deselected(self: ChannelList) -> Tuple[Parm, ...]: ...
    def pinned(self: ChannelList) -> Tuple[Parm, ...]: ...
    def unpinned(self: ChannelList) -> Tuple[Parm, ...]: ...
    def selectedValue(self: ChannelList) -> Tuple[Parm, ...]: ...
    def deselectedValue(self: ChannelList) -> Tuple[Parm, ...]: ...
    def addParm(self: ChannelList, parms: Parm, selected: bool, pinned: bool, valueselected: bool) -> None: ...
    def addPath(self: ChannelList, path: str, selected: bool, pinned: bool, valueselected: bool) -> None: ...
    def addParms(self: ChannelList, parms: Sequence[Parm], selected: bool=True, pinned: bool=False, valueselected: bool=False) -> Any: ...
    def addPaths(self: ChannelList, paths: Sequence[str], selected: bool, pinned: bool, valueselected: bool) -> None: ...
    def remove(self: ChannelList, parm: Parm) -> None: ...
    def select(self: ChannelList, parm: Parm) -> None: ...
    def deselect(self: ChannelList, parm: Parm) -> None: ...
    def pin(self: ChannelList, parm: Parm) -> None: ...
    def unpin(self: ChannelList, parm: Parm) -> None: ...
    def selectValue(self: ChannelList, parm: Parm) -> None: ...
    def deselectValue(self: ChannelList, parm: Parm) -> None: ...
    def contains(self: ChannelList, parm: Parm) -> bool: ...
    def isSelected(self: ChannelList, parm: Parm) -> bool: ...
    def isPinned(self: ChannelList, parm: Parm) -> bool: ...
    def isValueSelected(self: ChannelList, parm: Parm) -> bool: ...
    def filter(self: ChannelList) -> str: ...
    def keepSelection(self: ChannelList) -> bool: ...
    def enableFilter(self: ChannelList) -> bool: ...
    def filterTranslates(self: ChannelList) -> bool: ...
    def filterRotates(self: ChannelList) -> bool: ...
    def filterScales(self: ChannelList) -> bool: ...
    def setFilter(self: ChannelList, pattern: str) -> None: ...
    def setKeepSelection(self: ChannelList, on: bool) -> None: ...
    def setEnableFilter(self: ChannelList, on: bool) -> None: ...
    def setFilterTranslates(self: ChannelList, on: bool) -> None: ...
    def setFilterRotates(self: ChannelList, on: bool) -> None: ...
    def setFilterScales(self: ChannelList, on: bool) -> None: ...
    def asCode(self: ChannelList, var_name: str) -> str: ...

    def __repr__(self: ChannelList) -> Any: ...  ## Added by typing stub update
class ChopNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isBypassed(self: ChopNode) -> bool: ...
    def bypass(self: ChopNode, on: bool) -> None: ...
    def isLocked(self: ChopNode) -> bool: ...
    def setLocked(self: ChopNode, on: bool) -> None: ...
    def isDisplayFlagSet(self: ChopNode) -> bool: ...
    def setDisplayFlag(self: ChopNode, on: bool) -> None: ...
    def isAudioFlagSet(self: ChopNode) -> bool: ...
    def setAudioFlag(self: ChopNode, on: bool) -> None: ...
    def isExportFlagSet(self: ChopNode) -> bool: ...
    def setExportFlag(self: ChopNode, on: bool) -> None: ...
    def isUnloadFlagSet(self: ChopNode) -> bool: ...
    def setUnloadFlag(self: ChopNode, on: bool) -> None: ...
    def isCurrentFlagSet(self: ChopNode) -> bool: ...
    def setCurrentFlag(self: ChopNode, on: bool) -> None: ...
    def tracks(self: ChopNode) -> Tuple[Track, ...]: ...
    def track(self: ChopNode, track_name: str) -> Optional[Track]: ...
    def clip(self: ChopNode, output_index: int=0) -> Clip: ...
    def sampleRate(self: ChopNode) -> float: ...
    def sampleRange(self: ChopNode) -> Tuple[float, float]: ...
    def frameToSamples(self: ChopNode, frame: float) -> float: ...
    def samplesToFrame(self: ChopNode, samples: float) -> float: ...
    def timeToSamples(self: ChopNode, time: float) -> float: ...
    def samplesToTime(self: ChopNode, samples: float) -> float: ...
    def clipData(self: ChopNode, binary: bool) -> str: ...
    def setClipData(self: ChopNode, data: str, binary: bool) -> None: ...
    def saveClip(self: ChopNode, file_name: str) -> None: ...

    def __repr__(self: ChopNode) -> Any: ...  ## Added by typing stub update
class Clip:
    thisown: Any = ...
    def __init__(self) -> None: ...
    __swig_destroy__: Any = ...
    def chopNode(self: Clip) -> ChopNode: ...
    def chopNodeOutputIndex(self: Clip) -> int: ...
    def tracks(self: Clip) -> Tuple[Track, ...]: ...
    def track(self: Clip, track_name: str) -> Optional[Track]: ...
    def sampleRate(self: Clip) -> float: ...
    def sampleRange(self: Clip) -> Tuple[float, float]: ...
    def numSamples(self: Clip) -> int: ...
    def frameToSamples(self: Clip, frame: float) -> float: ...
    def samplesToFrame(self: Clip, samples: float) -> float: ...
    def timeToSamples(self: Clip, time: float) -> float: ...
    def samplesToTime(self: Clip, samples: float) -> float: ...
    def loadFromFile(self: Clip, file_name: str) -> None: ...
    def saveToFile(self: Clip, file_name: str) -> None: ...

    def __repr__(self: Clip) -> Any: ...  ## Added by typing stub update
class Color:
    thisown: Any = ...
    @overload
    def __init__(self: Color, rgb_tuple: Sequence[float]=(0.0, 0.0, 0.0)) -> None: ...
    @overload
    def __init__(self: Color, r: float=0.0, g: float=0.0, b: float=0.0) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Color) -> Any: ...
    def rgb(self: Color) -> Tuple[float, float, float]: ...
    def hsv(self: Color) -> Tuple[float, float, float]: ...
    def hsl(self: Color) -> Tuple[float, float, float]: ...
    def xyz(self: Color) -> Tuple[float, float, float]: ...
    def lab(self: Color) -> Tuple[float, float, float]: ...
    def tmi(self: Color) -> Tuple[float, float, float]: ...
    def setRGB(self: Color, tuple: Sequence[float]) -> None: ...
    def setHSV(self: Color, tuple: Sequence[float]) -> None: ...
    def setHSL(self: Color, tuple: Sequence[float]) -> None: ...
    def setXYZ(self: Color, tuple: Sequence[float]) -> None: ...
    def setLAB(self: Color, tuple: Sequence[float]) -> None: ...
    def setTMI(self: Color, tuple: Sequence[float]) -> None: ...
    @staticmethod
    def ocio_configPath(self) -> str: ...
    @staticmethod
    def ocio_spaces(self) -> None: ...
    @staticmethod
    def ocio_activeDisplays(self) -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_activeViews(self) -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_looks(self) -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_roles(self) -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_views(self: str, display) -> Tuple[str, ...]: ...
    @staticmethod
    def ocio_defaultDisplay(self) -> str: ...
    @staticmethod
    def ocio_defaultView(self) -> str: ...
    def ocio_transform(self: Color, src_colorspace: str, dest_colorspace: str, looks: str) -> Color: ...
    def ocio_viewTransform(self: Color, src_colorspace: str, display_name: str, view_name: str) -> Color: ...
    @staticmethod
    def reloadOCIO(self) -> None: ...

    def __repr__(self: Color) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Color) -> Any: ...  ## Added by typing stub update
def Color_ocio_configPath() -> str: ...
def Color_ocio_spaces() -> None: ...
def Color_ocio_activeDisplays() -> Tuple[str, ...]: ...
def Color_ocio_activeViews() -> Tuple[str, ...]: ...
def Color_ocio_looks() -> Tuple[str, ...]: ...
def Color_ocio_roles() -> Tuple[str, ...]: ...
def Color_ocio_views(display) -> Tuple[str, ...]: ...
def Color_ocio_defaultDisplay() -> str: ...
def Color_ocio_defaultView() -> str: ...
def Color_reloadOCIO() -> None: ...

class CompositorViewer(PathBasedPaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def currentState(self: CompositorViewer) -> str: ...
    def enterViewState(self: CompositorViewer, wait_for_exit: bool=False) -> None: ...
    def setCurrentState(self: CompositorViewer, state: str, wait_for_exit: bool=False) -> None: ...
    def usingOCIO(self: CompositorViewer) -> bool: ...
    def setUsingOCIO(self: CompositorViewer, enable: bool) -> None: ...
    def setOCIODisplayView(self: CompositorViewer, display: str="Any", view: str="Any") -> None: ...
    def getOCIODisplay(self: CompositorViewer) -> str: ...
    def getOCIOView(self: CompositorViewer) -> str: ...

    def __repr__(self: CompositorViewer) -> Any: ...  ## Added by typing stub update
class ConstructionPlane:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def sceneViewer(self: ConstructionPlane) -> SceneViewer: ...
    def isVisible(self: ConstructionPlane) -> bool: ...
    def setIsVisible(self: ConstructionPlane, on: bool) -> None: ...
    def transform(self: ConstructionPlane) -> Matrix4: ...
    def setTransform(self: ConstructionPlane, matrix: Matrix4) -> None: ...
    def cellSize(self: ConstructionPlane) -> Tuple[float, ...]: ...
    def setCellSize(self: ConstructionPlane, size: Sequence[float]) -> None: ...
    def numberOfCells(self: ConstructionPlane) -> Tuple[int, ...]: ...
    def setNumberOfCells(self: ConstructionPlane, number: Sequence[int]) -> Any: ...
    def numberOfCellsPerRulerLine(self: ConstructionPlane) -> Tuple[int, ...]: ...
    def setNumberOfCellsPerRulerLine(self: ConstructionPlane, number: Sequence[int]) -> Any: ...

    def __repr__(self: ConstructionPlane) -> Any: ...  ## Added by typing stub update
class ContextViewer(PathBasedPaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def sceneViewer(self: ContextViewer) -> SceneViewer: ...
    def compositorViewer(self: ContextViewer) -> CompositorViewer: ...
    def findViewport(self: ContextViewer, viewport_name: str) -> GeometryViewport: ...

    def __repr__(self: ContextViewer) -> Any: ...  ## Added by typing stub update
class CopNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isBypassed(self: CopNode) -> bool: ...
    def bypass(self: CopNode, on: bool) -> None: ...
    def isDisplayFlagSet(self: CopNode) -> bool: ...
    def setDisplayFlag(self: CopNode, on: bool) -> None: ...
    def isRenderFlagSet(self: CopNode) -> bool: ...
    def setRenderFlag(self: CopNode, on: bool) -> None: ...
    def isTemplateFlagSet(self: CopNode) -> bool: ...
    def setTemplateFlag(self: CopNode, on: bool) -> None: ...
    def isCompressFlagSet(self: CopNode) -> bool: ...
    def setCompressFlag(self: CopNode, on: bool) -> None: ...
    def planes(self: CopNode) -> Tuple[str, ...]: ...
    def components(self: CopNode, plane: str) -> Tuple[str, ...]: ...
    def depth(self: CopNode, plane: str) -> EnumValue: ...
    def maskInputIndex(self: CopNode) -> int: ...
    def getPixelByUV(self: CopNode, plane: str, u: float, v: float, component: Optional[str]=None, interpolate: bool=True) -> Tuple[float, ...]: ...
    def getPixelHSVByUV(self: CopNode, u: float, v: float, interpolate: bool=True) -> Tuple[float, ...]: ...
    def getPixelLuminanceByUV(self: CopNode, u: float, v: float, interpolate: bool=True) -> float: ...
    def allPixels(self: CopNode, plane: str="Any", component: Optional[str]=None, interleaved: bool=True, time: float=-1.0) -> Tuple[float, ...]: ...
    def allPixelsAsString(self: CopNode, plane: str="Any", component: Optional[str]=None, interleaved: bool=True, time: float=-1.0, depth: Optional[EnumValue]=None) -> str: ...
    def setPixelsOfCookingPlane(self: CopNode, values: Sequence[float], component: Optional[str]=None, interleaved: bool=True, flip_vertically: bool=False) -> None: ...
    def imageBounds(self: CopNode, plane: str="Any") -> Tuple[int, ...]: ...
    def xRes(self: CopNode) -> None: ...
    def yRes(self: CopNode) -> None: ...
    def sequenceStartFrame(self: CopNode) -> float: ...
    def sequenceEndFrame(self: CopNode) -> float: ...
    def sequenceFrameLength(self: CopNode) -> float: ...
    def isSingleImage(self: CopNode) -> bool: ...
    def saveImage(self: CopNode, file_name: str, frame_range: Sequence[int]=()) -> None: ...
    def hasMetaData(self: CopNode, metadata_name: str) -> bool: ...
    def getMetaDataInt(self: CopNode, metadata_name: str, index: int=0) -> int: ...
    def getMetaDataFloat(self: CopNode, metadata_name: str, index: int=0) -> float: ...
    def getMetaDataString(self: CopNode, metadata_name: str) -> str: ...
    def getMetaDataIntArray(self: CopNode, metadata_name: str) -> Tuple[int, ...]: ...
    def getMetaDataFloatArray(self: CopNode, metadata_name: str) -> Tuple[float, ...]: ...
    def setPixelsOfCookingPlaneFromString(self: CopNode, values, component: Optional[str]=None, interleaved: bool=True, depth: Optional[EnumValue]=None, flip_vertically: bool=False) -> None: ...

    def __repr__(self: CopNode) -> Any: ...  ## Added by typing stub update
class crowds:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def addBlendshapeInputs(base_shape_geo: Geometry, shapes: Sequence[AgentShape], channel_names: Sequence[str]) -> None: ...
    @staticmethod
    def addInBetweenShapes(primary_shape_geo: Geometry, shapes: Sequence[AgentShape], weights: Sequence[float]) -> None: ...
    @staticmethod
    def setBlendshapeDeformerParms(base_shape_geo: Geometry, attribs: str="Any", point_id_attrib: str="Any", prim_id_attrib: str="Any") -> None: ...
    @staticmethod
    def findAgentDefinitions(geometry: Geometry, group: str="Any") -> Tuple[AgentDefinition, ...]: ...
    @staticmethod
    def replaceAgentDefinitions(geometry: Geometry, new_definition_map: Dict[AgentDefinition, AgentDefinition], group: str="Any") -> None: ...
    @staticmethod
    def computeLocalTransforms(rig: AgentRig, xforms: Sequence[Matrix4]) -> Tuple[Matrix4, ...]: ...
    @staticmethod
    def computeWorldTransforms(rig: AgentRig, xforms: Sequence[Matrix4]) -> Tuple[Matrix4, ...]: ...
    @staticmethod
    def computeRotationLimits(rig: AgentRig, clips: Sequence[AgentClip], transform: int, parent_transform: int) -> Dict[str, Union[int, EnumValue, List[AgentClip], Vector2, Vector3]]: ...
    @staticmethod
    def shapeDeformers() -> Tuple[AgentShapeDeformer, ...]: ...
    @staticmethod
    def findShapeDeformer(name: str) -> AgentShapeDeformer: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class DataParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self: DataParmTemplate, name, label, num_components: int, look: EnumValue=parmLook.Regular, naming_scheme: EnumValue=parmNamingScheme.XYZW, unknown_str: Optional[str]=None, disable_when: Optional[str]=None, is_hidden: bool=False, is_label_hidden: bool=False, join_with_next: bool=False, help: Optional[str]=None, script_callback: Optional[str]=None, script_callback_language: EnumValue=scriptLanguage.Hscript, tags: Dict[str, str]={}, unknown_dict: Dict[EnumValue, str]={}, default_expression: Sequence[str]=(), default_expression_language: Sequence[EnumValue]=()) -> None: ...
    __swig_destroy__: Any = ...
    def dataParmType(self: DataParmTemplate) -> EnumValue: ...
    def setDataParmType(self: DataParmTemplate, data_type: EnumValue) -> Any: ...
    def defaultExpression(self: DataParmTemplate) -> Tuple[str, ...]: ...
    def setDefaultExpression(self: DataParmTemplate, default_expression: Sequence[str]) -> None: ...
    def defaultExpressionLanguage(self: DataParmTemplate) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self: DataParmTemplate, default_expression_language: Sequence[EnumValue]) -> None: ...

    def __repr__(self: DataParmTemplate) -> Any: ...  ## Added by typing stub update
class DataTree(PaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def treeTypes(self: DataTree) -> Tuple[str, ...]: ...
    def treeType(self: DataTree) -> str: ...
    def setTreeType(self: DataTree, tree_type: str) -> bool: ...
    def currentPath(self: DataTree) -> str: ...
    def clearCurrentPath(self: DataTree) -> str: ...
    def setCurrentPath(self: DataTree, path: str, multi: bool=False, index: int=-1) -> None: ...
    def setCurrentPaths(self: DataTree, paths: Sequence[str], expand: bool) -> None: ...
    def setTreeExpanded(self: DataTree, expanded: bool) -> None: ...
    def setCurrentNodeExpanded(self: DataTree, expanded: bool) -> None: ...

    def __repr__(self: DataTree) -> Any: ...  ## Added by typing stub update
class Desktop:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def panes(self: Desktop) -> Tuple[Pane, ...]: ...
    def paneTabs(self: Desktop) -> Tuple[PaneTab, ...]: ...
    def currentPaneTabs(self: Desktop) -> Tuple[PaneTab, ...]: ...
    def floatingPaneTabs(self: Desktop) -> Tuple[PaneTab, ...]: ...
    def paneTabOfType(self: Desktop, type: EnumValue, index: int=0) -> Optional[PaneTab]: ...
    def findPane(self: Desktop, pane_id: int) -> Optional[Pane]: ...
    def findPaneTab(self: Desktop, name: str) -> Optional[PaneTab]: ...
    def createFloatingPaneTab(self: Desktop, pane_tab_type: EnumValue, position: Sequence[int]=(), size: Sequence[int]=(), python_panel_interface: Optional[str]=None, immediate: bool=False) -> PaneTab: ...
    def createFloatingPane(self: Desktop, *args: EnumValue) -> Any: ...
    def floatingPanels(self: Desktop) -> Tuple[FloatingPanel, ...]: ...
    def createFloatingPanel(self: Desktop, pane_tab_type: EnumValue, position: Sequence[int]=(), size: Sequence[int]=(), python_panel_interface: Optional[str]=None, immediate: bool=False) -> FloatingPanel: ...
    def paneUnderCursor(self: Desktop) -> None: ...
    def paneTabUnderCursor(self: Desktop) -> None: ...
    def name(self: Desktop) -> str: ...
    def shelfDock(self: Desktop) -> ShelfDock: ...
    def displaySideHelp(self: Desktop, show: bool=True) -> PaneTab: ...
    def displayHelp(self: Desktop, node_type: NodeType) -> None: ...
    def displayHelpPath(self: Desktop, help_path: str) -> None: ...
    def displayHelpPyPanel(self: Desktop, interface_name: str) -> None: ...
    def setAsCurrent(self: Desktop) -> None: ...

    def __repr__(self: Desktop) -> Any: ...  ## Added by typing stub update
class Dialog:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def destroy(self: Dialog) -> None: ...
    def setValue(self: Dialog, name: str, value: str) -> None: ...
    def enableValue(self: Dialog, name: str, onoff: bool) -> None: ...
    def waitForValueToChangeTo(self: Dialog, name: str, new_value: str) -> None: ...
    def menuItems(self: Dialog, name: str) -> Tuple[str, ...]: ...
    def setMenuItems(self: Dialog, name: str, items: Sequence[str]) -> None: ...
    def value(self: Dialog, name: str) -> None: ...
    def addCallback(self: Dialog, name: str, callback) -> None: ...
    def removeCallback(self: Dialog, name: str, callback) -> None: ...
    def callbacks(self: Dialog, name: str) -> Tuple[Callable, ...]: ...

    def __repr__(self: Dialog) -> Any: ...  ## Added by typing stub update
class dop:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def isScriptSolverRunning() -> bool: ...
    @staticmethod
    def scriptSolverData() -> DopData: ...
    @staticmethod
    def scriptSolverNetwork() -> Optional[Node]: ...
    @staticmethod
    def scriptSolverSimulation() -> Any: ...
    @staticmethod
    def scriptSolverObjects() -> Tuple[DopObject, ...]: ...
    @staticmethod
    def scriptSolverNewObjects() -> Tuple[DopObject, ...]: ...
    @staticmethod
    def scriptSolverTimestepSize() -> float: ...
    @staticmethod
    def scriptSolverTime() -> Any: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class DopNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def dopNetNode(self: DopNode) -> Node: ...
    def simulation(self: DopNode) -> DopSimulation: ...
    def processedObjects(self: DopNode) -> Tuple[DopObject, ...]: ...
    def createdObjects(self: DopNode) -> Tuple[DopObject, ...]: ...
    def isBypassed(self: DopNode) -> bool: ...
    def bypass(self: DopNode, on: bool) -> None: ...
    def isDisplayFlagSet(self: DopNode) -> bool: ...
    def setDisplayFlag(self: DopNode, on: bool) -> None: ...
    def isTemplateFlagSet(self: DopNode) -> bool: ...
    def setTemplateFlag(self: DopNode, on: bool) -> None: ...
    def displayNode(self: DopNode) -> Optional[Node]: ...
    def renderNode(self: DopNode) -> Any: ...
    def objectsToProcess(self: DopNode) -> Tuple[DopObject, ...]: ...
    def pythonSolverData(self: DopNode) -> DopData: ...

    def __repr__(self: DopNode) -> Any: ...  ## Added by typing stub update
class DopObject(DopData):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: DopObject) -> str: ...
    def objid(self: DopObject) -> int: ...
    def matches(self: DopObject, pattern: str) -> bool: ...
    def transform(self: DopObject, include_geometry_transform: bool=True) -> Matrix4: ...

    def __repr__(self: DopObject) -> Any: ...  ## Added by typing stub update
class DopRecord:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: DopRecord) -> Any: ...
    def recordType(self: DopRecord) -> str: ...
    def recordIndex(self: DopRecord) -> int: ...
    def fieldNames(self: DopRecord) -> Tuple[str, ...]: ...
    def fieldType(self: DopRecord, field_name: str) -> EnumValue: ...
    def field(self: DopRecord) -> Union[int, bool, float, str, Vector2, Vector3, Vector4, Quaternion, Matrix3, Matrix4]: ...
    def setFieldBool(self: DopRecord, field_name: str, value: bool) -> None: ...
    def setField(self: DopRecord, field_name: str, value: str) -> None: ...

    def __repr__(self: DopRecord) -> Any: ...  ## Added by typing stub update
class DopRelationship(DopData):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: DopRelationship) -> str: ...
    def matches(self: DopRelationship, pattern: str) -> bool: ...
    def setGroup(self: DopRelationship, objects: Sequence[DopObject]) -> None: ...
    def setAffectorGroup(self: DopRelationship, objects: Sequence[DopObject]) -> None: ...

    def __repr__(self: DopRelationship) -> Any: ...  ## Added by typing stub update
class DopSimulation:
    thisown: Any = ...
    def __init__(self) -> None: ...
    __swig_destroy__: Any = ...
    def createObject(self: DopSimulation, name: str, solve_on_creation_frame: bool) -> DopObject: ...
    def removeObject(self: DopSimulation, object: DopObject) -> None: ...
    def createRelationship(self: DopSimulation, name: str) -> DopRelationship: ...
    def removeRelationship(self: DopSimulation, rel: DopRelationship) -> None: ...
    def dopNetNode(self: DopSimulation) -> Node: ...
    def objects(self: DopSimulation) -> Tuple[DopData, ...]: ...
    def relationships(self: DopSimulation) -> Tuple[DopRelationship, ...]: ...
    def findObject(self: DopSimulation, obj_spec: str) -> Optional[DopObject]: ...
    def findRelationship(self: DopSimulation, rel_spec: str) -> DopRelationship: ...
    def findData(self: DopSimulation, data_spec: str) -> Optional[DopData]: ...
    def findAllObjects(self: DopSimulation, obj_spec: str) -> Tuple[DopObject, ...]: ...
    def findAllRelationships(self: DopSimulation, rel_spec: str) -> Tuple[DopRelationship, ...]: ...
    def findAllData(self: DopSimulation, data_spec: str) -> Tuple[DopData, ...]: ...
    def time(self: DopSimulation) -> None: ...
    def setTime(self: DopSimulation, t: float, resim_last_timestep: bool=False, force_reset_sim: bool=False, allow_simulation: bool=True) -> None: ...
    def timestep(self: DopSimulation) -> None: ...
    def setTimestep(self: DopSimulation, t: float) -> None: ...
    def memoryUsage(self: DopSimulation) -> None: ...

    def __repr__(self: DopSimulation) -> Any: ...  ## Added by typing stub update
class Drawable:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: Drawable) -> None: ...
    def label(self: Drawable) -> None: ...
    def show(self: Drawable, value: bool) -> None: ...
    def visible(self: Drawable) -> bool: ...
    def transform(self: Drawable) -> None: ...
    def setTransform(self: Drawable, xform: Matrix4) -> None: ...
    def setLabel(self: Drawable, label: str) -> None: ...

class AdvancedDrawable(Drawable):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def setParams(self: AdvancedDrawable, params) -> None: ...
    def draw(self: AdvancedDrawable, handle, params: Optional[Any]=None) -> None: ...

class SimpleDrawable(Drawable):
    thisown: Any = ...
    def __init__(self: SimpleDrawable, scene_viewer: SceneViewer, geometry: Geometry, name: str) -> None: ...
    __swig_destroy__: Any = ...
    def enable(self: SimpleDrawable, value: bool) -> None: ...
    def enabled(self: SimpleDrawable, value) -> bool: ...
    def setDisplayMode(self: SimpleDrawable) -> None: ...
    def displayMode(self: SimpleDrawable) -> Any: ...
    def setWireframeColor(self: SimpleDrawable, color: Color) -> None: ...
    def setXray(self: SimpleDrawable, value: bool) -> None: ...
    def isXray(self: SimpleDrawable) -> None: ...
    def setShowMaterials(self: SimpleDrawable, value: bool) -> None: ...
    def isShowMaterials(self: SimpleDrawable) -> None: ...
    def setCastShadows(self: SimpleDrawable, value: bool) -> None: ...
    def isCastShadows(self: SimpleDrawable) -> None: ...
    def geometry(self: SimpleDrawable) -> None: ...
    def setGeometry(self: SimpleDrawable, geometry: Geometry) -> None: ...
    def setVisibleInViewport(self: SimpleDrawable, viewport: GeometryViewport) -> None: ...
    def setVisibleInAllViewports(self: SimpleDrawable) -> None: ...
    def isVisibleInViewport(self: SimpleDrawable, viewport: GeometryViewport) -> bool: ...

    def __repr__(self: SimpleDrawable) -> Any: ...  ## Added by typing stub update
class Edge:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Edge) -> Any: ...
    def geometry(self: Edge) -> Any: ...
    def points(self: Edge) -> Tuple[Point, ...]: ...
    def edgeId(self: Edge) -> str: ...
    def length(self: Edge) -> float: ...
    def prims(self: Edge) -> Tuple[Prim, ...]: ...

    def __repr__(self: Edge) -> Any: ...  ## Added by typing stub update
class EdgeGroup:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: EdgeGroup) -> Any: ...
    def geometry(self: EdgeGroup) -> Geometry: ...
    def name(self: EdgeGroup) -> None: ...
    def iterEdges(self: EdgeGroup) -> Iterator[Edge]: ...
    def edges(self: EdgeGroup) -> Tuple[Edge, ...]: ...
    def contains(self: EdgeGroup, edge: Edge) -> bool: ...
    def add(self: EdgeGroup, edge_or_list_or_edge_group: Union[Edge, Sequence[Edge], EdgeGroup]) -> None: ...
    def remove(self: EdgeGroup, edge_or_list_or_edge_group: Union[Edge, Sequence[Edge], EdgeGroup]) -> None: ...
    def clear(self: EdgeGroup) -> Any: ...
    def destroy(self: EdgeGroup) -> None: ...
    def edgeCount(self: EdgeGroup) -> int: ...
    def dataId(self: EdgeGroup) -> None: ...
    def incrementDataId(self: EdgeGroup) -> None: ...

    def __repr__(self: EdgeGroup) -> Any: ...  ## Added by typing stub update
class EditableDopGeometryGuard:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __enter__(self: EditableDopGeometryGuard) -> Any: ...
    def __exit__(self: EditableDopGeometryGuard, type, value, traceback) -> Any: ...

    def __repr__(self: EditableDopGeometryGuard) -> Any: ...  ## Added by typing stub update
class FlipbookSettings:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def stash(self: FlipbookSettings) -> FlipbookSettings: ...
    def copy(self: FlipbookSettings, from_settings: FlipbookSettings) -> None: ...
    @overload
    def outputToMPlay(self: FlipbookSettings) -> bool: ...
    @overload
    def outputToMPlay(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def leaveFrameAtEnd(self: FlipbookSettings) -> bool: ...
    @overload
    def leaveFrameAtEnd(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def output(self: FlipbookSettings) -> str: ...
    @overload
    def output(self: FlipbookSettings, value: str) -> None: ...
    @overload
    def sessionLabel(self: FlipbookSettings) -> str: ...
    @overload
    def sessionLabel(self: FlipbookSettings, value: str) -> None: ...
    @overload
    def visibleObjects(self: FlipbookSettings) -> str: ...
    @overload
    def visibleObjects(self: FlipbookSettings, value: str) -> None: ...
    @overload
    def visibleTypes(self: FlipbookSettings) -> EnumValue: ...
    @overload
    def visibleTypes(self: FlipbookSettings, value: EnumValue) -> None: ...
    @overload
    def frameRange(self: FlipbookSettings) -> Tuple[float, float]: ...
    @overload
    def frameRange(self: FlipbookSettings, value: Tuple[float, float]) -> None: ...
    @overload
    def frameIncrement(self: FlipbookSettings) -> int: ...
    @overload
    def frameIncrement(self: FlipbookSettings, value: int) -> None: ...
    @overload
    def beautyPassOnly(self: FlipbookSettings) -> bool: ...
    @overload
    def beautyPassOnly(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def renderAllViewports(self: FlipbookSettings) -> bool: ...
    @overload
    def renderAllViewports(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def appendFramesToCurrent(self: FlipbookSettings) -> bool: ...
    @overload
    def appendFramesToCurrent(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def scopeChannelKeyframesOnly(self: FlipbookSettings) -> bool: ...
    @overload
    def scopeChannelKeyframesOnly(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def blockEditing(self: FlipbookSettings) -> bool: ...
    @overload
    def blockEditing(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def initializeSimulations(self: FlipbookSettings) -> bool: ...
    @overload
    def initializeSimulations(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def audioFilename(self: FlipbookSettings) -> str: ...
    @overload
    def audioFilename(self: FlipbookSettings, value: str) -> None: ...
    @overload
    def audioFrameStart(self: FlipbookSettings) -> float: ...
    @overload
    def audioFrameStart(self: FlipbookSettings, value: float) -> None: ...
    @overload
    def audioTimeOffset(self: FlipbookSettings) -> float: ...
    @overload
    def audioTimeOffset(self: FlipbookSettings, value: float) -> None: ...
    @overload
    def backgroundImage(self: FlipbookSettings) -> str: ...
    @overload
    def backgroundImage(self: FlipbookSettings, value: str) -> None: ...
    @overload
    def overrideGamma(self: FlipbookSettings) -> bool: ...
    @overload
    def overrideGamma(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def gamma(self: FlipbookSettings) -> float: ...
    @overload
    def gamma(self: FlipbookSettings, value: float) -> None: ...
    @overload
    def overrideLUT(self: FlipbookSettings) -> bool: ...
    @overload
    def overrideLUT(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def LUT(self: FlipbookSettings) -> str: ...
    @overload
    def LUT(self: FlipbookSettings, value: str) -> None: ...
    def setUseFrameTimeLimit(self: FlipbookSettings, limit: bool) -> None: ...
    def useFrameTimeLimit(self: FlipbookSettings) -> bool: ...
    def setFrameTimeLimit(self: FlipbookSettings, t: float) -> None: ...
    def frameTimeLimit(self: FlipbookSettings) -> float: ...
    def setUseFrameProgressLimit(self: FlipbookSettings, limit: bool) -> None: ...
    def useFrameProgressLimit(self: FlipbookSettings) -> bool: ...
    def setFrameProgessLimit(self: FlipbookSettings, t: float) -> None: ...
    def frameProgressLimit(self: FlipbookSettings) -> float: ...
    @overload
    def antialias(self: FlipbookSettings) -> EnumValue: ...
    @overload
    def antialias(self: FlipbookSettings, value: EnumValue) -> None: ...
    @overload
    def useMotionBlur(self: FlipbookSettings) -> bool: ...
    @overload
    def useMotionBlur(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def motionBlurSegments(self: FlipbookSettings) -> int: ...
    @overload
    def motionBlurSegments(self: FlipbookSettings, value: int) -> None: ...
    @overload
    def motionBlurFrameRange(self: FlipbookSettings) -> EnumValue: ...
    @overload
    def motionBlurFrameRange(self: FlipbookSettings, value: EnumValue) -> None: ...
    @overload
    def shutterFromCamera(self: FlipbookSettings) -> bool: ...
    @overload
    def shutterFromCamera(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def shutter(self: FlipbookSettings) -> float: ...
    @overload
    def shutter(self: FlipbookSettings, value: float) -> None: ...
    @overload
    def useDepthOfField(self: FlipbookSettings) -> bool: ...
    @overload
    def useDepthOfField(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def depthOfFieldFromCamera(self: FlipbookSettings) -> bool: ...
    @overload
    def depthOfFieldFromCamera(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def depthOfFieldQuality(self: FlipbookSettings) -> float: ...
    @overload
    def depthOfFieldQuality(self: FlipbookSettings, value: float) -> None: ...
    @overload
    def focusDistance(self: FlipbookSettings) -> float: ...
    @overload
    def focusDistance(self: FlipbookSettings, value: float) -> None: ...
    @overload
    def aperture(self: FlipbookSettings) -> float: ...
    @overload
    def aperture(self: FlipbookSettings, value: float) -> None: ...
    @overload
    def fStop(self: FlipbookSettings) -> float: ...
    @overload
    def fStop(self: FlipbookSettings, value: float) -> None: ...
    @overload
    def outputZoom(self: FlipbookSettings) -> int: ...
    @overload
    def outputZoom(self: FlipbookSettings, value: int) -> None: ...
    @overload
    def useResolution(self: FlipbookSettings) -> bool: ...
    @overload
    def useResolution(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def resolution(self: FlipbookSettings) -> Tuple[int, int]: ...
    @overload
    def resolution(self: FlipbookSettings, value: Tuple[int, int]) -> None: ...
    @overload
    def useSheetSize(self: FlipbookSettings) -> bool: ...
    @overload
    def useSheetSize(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def sheetSize(self: FlipbookSettings) -> Tuple[int, int]: ...
    @overload
    def sheetSize(self: FlipbookSettings, value: Tuple[int, int]) -> None: ...
    @overload
    def cropOutMaskOverlay(self: FlipbookSettings) -> bool: ...
    @overload
    def cropOutMaskOverlay(self: FlipbookSettings, value: bool) -> None: ...
    @overload
    def fromAudioPanel(self: FlipbookSettings) -> bool: ...
    @overload
    def fromAudioPanel(self: FlipbookSettings, value: bool) -> None: ...

    def __repr__(self: FlipbookSettings) -> Any: ...  ## Added by typing stub update
class FloatingPanel:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def panes(self: FloatingPanel) -> Tuple[Pane, ...]: ...
    def paneTabs(self: FloatingPanel) -> Tuple[PaneTab, ...]: ...
    def paneTabOfType(self: FloatingPanel, type: EnumValue, index: int=0) -> Optional[PaneTab]: ...
    def findPaneTab(self: FloatingPanel, name: str) -> Optional[PaneTab]: ...
    def name(self: FloatingPanel) -> str: ...
    def setName(self: FloatingPanel, name: str) -> None: ...
    def containsPlaybar(self: FloatingPanel) -> bool: ...
    def setContainsPlaybar(self: FloatingPanel, on: bool) -> None: ...
    def containsShelf(self: FloatingPanel) -> bool: ...
    def setContainsShelf(self: FloatingPanel, on: bool) -> None: ...
    def containsStatusBar(self: FloatingPanel) -> bool: ...
    def setContainsStatusBar(self: FloatingPanel, on: bool) -> None: ...
    def containsMenuBar(self: FloatingPanel) -> bool: ...
    def setContainsMenuBar(self: FloatingPanel, on: bool) -> None: ...
    def isAttachedToDesktop(self: FloatingPanel) -> bool: ...
    def attachToDesktop(self: FloatingPanel, on: bool) -> None: ...
    def isFullscreen(self: FloatingPanel) -> bool: ...
    def setIsFullscreen(self: FloatingPanel, on: bool) -> None: ...
    def position(self: FloatingPanel) -> Vector2: ...
    def setPosition(self: FloatingPanel, position: Union[Sequence[float], Vector3]) -> None: ...
    def size(self: FloatingPanel) -> Vector2: ...
    def setSize(self: FloatingPanel, size: Sequence[int]) -> None: ...
    def close(self: FloatingPanel) -> None: ...

    def __repr__(self: FloatingPanel) -> Any: ...  ## Added by typing stub update
class FloatParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, label: str, num_components, default_value: Iterable[Any]=(), min: float=0.0, max: float=10.0, min_is_strict: bool=False, max_is_strict: bool=False, look: EnumValue=parmLook.Regular, naming_scheme: EnumValue=parmNamingScheme.XYZW, disable_when: Optional[str]=None, is_hidden: bool=False, is_label_hidden: bool=False, join_with_next: bool=False, help: Optional[str]=None, script_callback: Optional[str]=None, script_callback_language: EnumValue=scriptLanguage.Hscript, tags: dict={}, default_expression: Iterable[Any]=(), default_expression_language: Iterable[Any]=()) -> None: ...
    __swig_destroy__: Any = ...
    def minValue(self: FloatParmTemplate) -> float: ...
    def setMinValue(self: FloatParmTemplate, min_value: float) -> None: ...
    def maxValue(self: FloatParmTemplate) -> float: ...
    def setMaxValue(self: FloatParmTemplate, max_value: float) -> None: ...
    def minIsStrict(self: FloatParmTemplate) -> bool: ...
    def setMinIsStrict(self: FloatParmTemplate, on: bool) -> None: ...
    def maxIsStrict(self: FloatParmTemplate) -> bool: ...
    def setMaxIsStrict(self: FloatParmTemplate, on: bool) -> None: ...
    def defaultValue(self: FloatParmTemplate) -> Tuple[float, ...]: ...
    def setDefaultValue(self: FloatParmTemplate, tuple_of_default_values: Sequence[float]) -> None: ...
    def defaultExpression(self: FloatParmTemplate) -> Tuple[str, ...]: ...
    def setDefaultExpression(self: FloatParmTemplate, tuple_of_default_expressions: Sequence[str]) -> None: ...
    def defaultExpressionLanguage(self: FloatParmTemplate) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self: FloatParmTemplate, tuple_of_default_expression_languages: Sequence[EnumValue]) -> None: ...

    def __repr__(self: FloatParmTemplate) -> Any: ...  ## Added by typing stub update
class FolderParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, label: str, parm_templates: Iterable[Any]=(), folder_type: EnumValue=folderType.Tabs, is_hidden: bool=False, ends_tab_group: bool=False, tags: dict={}, conditionals: dict={}, tab_conditionals: dict={}) -> None: ...
    __swig_destroy__: Any = ...
    def folderStyle(self: FolderParmTemplate) -> Any: ...
    def folderType(self: FolderParmTemplate) -> EnumValue: ...
    def setFolderType(self: FolderParmTemplate, folder_type: EnumValue) -> None: ...
    def isActualFolder(self: FolderParmTemplate) -> bool: ...
    def defaultValue(self: FolderParmTemplate) -> int: ...
    def setDefaultValue(self: FolderParmTemplate, tuple_of_default_values: int) -> None: ...
    def tabConditionals(self: FolderParmTemplate) -> Dict[parmCondType , str]: ...
    def setTabConditional(self: FolderParmTemplate, type: EnumValue, conditional: str) -> None: ...
    def endsTabGroup(self: FolderParmTemplate) -> bool: ...
    def setEndsTabGroup(self: FolderParmTemplate, on: bool) -> None: ...
    def parmTemplates(self: FolderParmTemplate) -> Tuple[ParmTemplate, ...]: ...
    def setParmTemplates(self: FolderParmTemplate, parm_templates: Sequence[ParmTemplate]) -> None: ...
    def addParmTemplate(self: FolderParmTemplate, parm_template: ParmTemplate) -> None: ...

    def __repr__(self: FolderParmTemplate) -> Any: ...  ## Added by typing stub update
class FolderSetParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def folderNames(self: FolderSetParmTemplate) -> List[str]: ...
    def setFolderNames(self: FolderSetParmTemplate, folder_names: Sequence[str]) -> None: ...
    def folderType(self: FolderSetParmTemplate) -> EnumValue: ...
    def setFolderType(self: FolderSetParmTemplate, folder_type: EnumValue) -> None: ...
    def folderStyle(self: FolderSetParmTemplate) -> EnumValue: ...

    def __repr__(self: FolderSetParmTemplate) -> Any: ...  ## Added by typing stub update
class GadgetContext:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def gadget(self: GadgetContext) -> str: ...
    def gadgetLabel(self: GadgetContext) -> str: ...
    def component1(self: GadgetContext) -> int: ...
    def component2(self: GadgetContext) -> int: ...
    def isLocating(self: GadgetContext) -> bool: ...
    def isPicking(self: GadgetContext) -> bool: ...
    def isDrawing(self: GadgetContext) -> bool: ...
    def isLocated(self: GadgetContext, gadget_name: str) -> bool: ...
    def isPicked(self: GadgetContext, gadget_name: str) -> bool: ...

class galleries:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def galleries() -> Tuple[Gallery, ...]: ...
    @staticmethod
    def galleryEntries(name_pattern: Optional[str]=None, label_pattern: Optional[str]=None, keyword_pattern: Optional[str]=None, category: Optional[str]=None, node_type: Optional[NodeType]=None) -> Tuple[GalleryEntry, ...]: ...
    @staticmethod
    def installGallery(gallery_path: str) -> Optional[Gallery]: ...
    @staticmethod
    def removeGallery(gallery_path: str) -> bool: ...
    @staticmethod
    def createGalleryEntry(gallery_path: str, entry_name: str, node: Node) -> Optional[GalleryEntry]: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class Gallery:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def galleryEntries(self: Gallery, name_pattern: Optional[str]=None, label_pattern: Optional[str]=None, keyword_pattern: Optional[str]=None, category: Optional[str]=None, node_type: Optional[NodeType]=None) -> Tuple[GalleryEntry, ...]: ...
    def createEntry(self: Gallery, entry_name: str, node: Optional[Node]=None) -> Any: ...
    def deleteEntry(self: Gallery, entry_name: str) -> Any: ...

    def __repr__(self: Gallery) -> Any: ...  ## Added by typing stub update
class GalleryEntry:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def canApplyToNode(self: GalleryEntry, node: Node) -> bool: ...
    def applyToNode(self: GalleryEntry, node: Node) -> None: ...
    def canCreateChildNode(self: GalleryEntry, parent: Node) -> bool: ...
    def createChildNode(self: GalleryEntry, parent: Node) -> Node: ...
    def setEqual(self: GalleryEntry, entry: GalleryEntry) -> None: ...
    def name(self: GalleryEntry) -> str: ...
    def setName(self: GalleryEntry, name: str) -> None: ...
    def label(self: GalleryEntry) -> str: ...
    def setLabel(self: GalleryEntry, label: str) -> None: ...
    def description(self: GalleryEntry) -> str: ...
    def setDescription(self: GalleryEntry, description: str) -> None: ...
    def helpURL(self: GalleryEntry) -> str: ...
    def setHelpURL(self: GalleryEntry, helpurl: str) -> None: ...
    def requiredHDAFile(self: GalleryEntry) -> str: ...
    def setRequiredHDAFile(self: GalleryEntry, hda_file: str) -> None: ...
    def icon(self: GalleryEntry) -> str: ...
    def setIcon(self: GalleryEntry, icon: str) -> None: ...
    def allowIconRegeneration(self: GalleryEntry) -> bool: ...
    def setAllowIconRegeneration(self: GalleryEntry, allow: bool) -> None: ...
    def isHidden(self: GalleryEntry) -> bool: ...
    def setHidden(self: GalleryEntry, hide: bool) -> None: ...
    def bestNodeType(self: GalleryEntry) -> Optional[NodeType]: ...
    def nodeTypeNames(self: GalleryEntry) -> Tuple[str, ...]: ...
    def setNodeTypeNames(self: GalleryEntry, nodetypes: Sequence[str]) -> None: ...
    def categories(self: GalleryEntry) -> Tuple[str, ...]: ...
    def setCategories(self: GalleryEntry, categories: Sequence[str]) -> None: ...
    def keywords(self: GalleryEntry) -> Tuple[str, ...]: ...
    def setKeywords(self: GalleryEntry, keywords: Sequence[str]) -> None: ...
    def nodeTypeCategory(self: GalleryEntry) -> NodeTypeCategory: ...
    def setNodeTypeCategory(self: GalleryEntry, category: NodeTypeCategory) -> None: ...
    def script(self: GalleryEntry) -> str: ...
    def setScript(self: GalleryEntry, script: str) -> None: ...
    def setScriptFromNode(self: GalleryEntry, node: Node) -> None: ...
    def setContentsFromNode(self: GalleryEntry, node: Node) -> None: ...

    def __repr__(self: GalleryEntry) -> Any: ...  ## Added by typing stub update
class Geometry:
    thisown: Any = ...
    def __init__(self: Geometry) -> None: ...
    __swig_destroy__: Any = ...
    def sopNode(self: Geometry) -> SopNode: ...
    def sopNodeOutputIndex(self: Geometry) -> int: ...
    def isValid(self: Geometry) -> Any: ...
    def freeze(self: Geometry, read_only: bool=False, clone_data_ids: bool=False) -> Geometry: ...
    def iterPoints(self: Geometry) -> Iterator[Point]: ...
    def points(self: Geometry) -> Tuple[Point, ...]: ...
    def point(self: Geometry, index: int) -> Point: ...
    def iterPrims(self: Geometry) -> Iterator[Prim]: ...
    def prims(self: Geometry) -> Tuple[Prim, ...]: ...
    def prim(self: Geometry, index: int) -> Prim: ...
    def containsPrimType(self: Geometry, type_or_name: Union[EnumValue, str]) -> bool: ...
    def countPrimType(self: Geometry, type_or_name: Union[EnumValue, str]) -> int: ...
    def preferredPrecision(self: Geometry) -> int: ...
    def setPreferredPrecision(self: Geometry, int: int) -> None: ...
    def averageMinDistance(self: Geometry, local_transform: Matrix4, geometry: Geometry, geometry_transform: Matrix4) -> float: ...
    def averageEdgeLength(self: Geometry) -> float: ...
    def globPoints(self: Geometry, pattern: str, ordered: bool=False) -> Tuple[Point, ...]: ...
    def globPrims(self: Geometry, pattern: str) -> Tuple[Vertex, ...]: ...
    def globVertices(self: Geometry, pattern: str) -> Any: ...
    def globEdges(self: Geometry, pattern: str) -> Any: ...
    def pointAttribs(self: Geometry, include_private: bool=False) -> Tuple[Attrib, ...]: ...
    def primAttribs(self: Geometry, include_private: bool=False) -> Tuple[Attrib, ...]: ...
    def vertexAttribs(self: Geometry, include_private: bool=False) -> Tuple[Attrib, ...]: ...
    def globalAttribs(self: Geometry, include_private: bool=False) -> Tuple[Attrib, ...]: ...
    def findPointAttrib(self: Geometry, name: str) -> Optional[Attrib]: ...
    def findPrimAttrib(self: Geometry, name: str) -> Optional[Attrib]: ...
    def findVertexAttrib(self: Geometry, name: str) -> Optional[Attrib]: ...
    def findGlobalAttrib(self: Geometry, name: str) -> Optional[Attrib]: ...
    def attribType(self: Geometry) -> EnumValue: ...
    def floatAttribValue(self: Geometry, name_or_attrib: Union[str, Attrib]) -> float: ...
    def floatListAttribValue(self: Geometry, name_or_attrib: Union[str, Attrib]) -> Tuple[float, ...]: ...
    def intAttribValue(self: Geometry, name_or_attrib: Union[str, Attrib]) -> int: ...
    def intListAttribValue(self: Geometry, name_or_attrib: Union[str, Attrib]) -> Tuple[int, ...]: ...
    def stringAttribValue(self: Geometry, name_or_attrib: Union[str, Attrib]) -> str: ...
    def stringListAttribValue(self: Geometry, name_or_attrib: Union[str, Attrib]) -> Tuple[str, ...]: ...
    def dictAttribValue(self: Geometry, name_or_attrib: Union[str, Attrib]) -> dict: ...
    def dictListAttribValue(self: Geometry, name_or_attrib: Union[str, Attrib]) -> Tuple[str, ...]: ...
    def pointFloatAttribValues(self: Geometry, name: str) -> Tuple[float, ...]: ...
    def pointFloatAttribValuesAsString(self: Geometry, name: str, float_type: EnumValue=numericData.Float32) -> str: ...
    def primFloatAttribValues(self: Geometry, name: str) -> Tuple[float, ...]: ...
    def primFloatAttribValuesAsString(self: Geometry, name: str) -> str: ...
    def vertexFloatAttribValues(self: Geometry, name: str) -> Tuple[float, ...]: ...
    def vertexFloatAttribValuesAsString(self: Geometry, name: str, float_type: EnumValue=numericData.Float32) -> str: ...
    def pointIntAttribValues(self: Geometry, name: str) -> Tuple[int, ...]: ...
    def pointIntAttribValuesAsString(self: Geometry, name: str, int_type: EnumValue=numericData.Int32) -> str: ...
    def primIntAttribValues(self: Geometry, name: str) -> Tuple[int, ...]: ...
    def primIntAttribValuesAsString(self: Geometry, name: str, int_type: EnumValue=numericData.Int32) -> str: ...
    def vertexIntAttribValues(self: Geometry, name: str) -> Tuple[int, ...]: ...
    def vertexIntAttribValuesAsString(self: Geometry, name: str, int_type: EnumValue=numericData.Int32) -> str: ...
    def pointStringAttribValues(self: Geometry, name: str) -> Tuple[str, ...]: ...
    def primStringAttribValues(self: Geometry, name: str) -> Tuple[str, ...]: ...
    def vertexStringAttribValues(self: Geometry, name: str) -> Tuple[str, ...]: ...
    def setPointFloatAttribValues(self: Geometry, name: str, values: Sequence[float]) -> None: ...
    def setPrimFloatAttribValues(self: Geometry, name: str, values: Sequence[float]) -> None: ...
    def setVertexFloatAttribValues(self: Geometry, name: str, values: Sequence[float]) -> None: ...
    def setPointFloatAttribValuesFromString(self: Geometry, *args: str, **kwargs) -> Any: ...
    def setPrimFloatAttribValuesFromString(self: Geometry, *args: str, **kwargs) -> Any: ...
    def setVertexFloatAttribValuesFromString(self: Geometry, *args: str, **kwargs) -> Any: ...
    def setPointIntAttribValues(self: Geometry, name: str, values: Sequence[int]) -> None: ...
    def setPrimIntAttribValues(self: Geometry, name: str, values: Sequence[int]) -> None: ...
    def setVertexIntAttribValues(self: Geometry, name: str, values: Sequence[int]) -> None: ...
    def setPointIntAttribValuesFromString(self: Geometry, *args: str, **kwargs) -> Any: ...
    def setPrimIntAttribValuesFromString(self: Geometry, *args: str, **kwargs) -> Any: ...
    def setVertexIntAttribValuesFromString(self: Geometry, *args: str, **kwargs) -> Any: ...
    def setPointStringAttribValues(self: Geometry, name: str, values: Sequence[str]) -> None: ...
    def setPrimStringAttribValues(self: Geometry, name: str, values: Sequence[str]) -> None: ...
    def setVertexStringAttribValues(self: Geometry, name: str, values: Sequence[str]) -> None: ...
    def renamePointAttrib(self: Geometry, old_name: str, new_name: str) -> None: ...
    def renamePrimAttrib(self: Geometry, old_name: str, new_name: str) -> None: ...
    def renameVertexAttrib(self: Geometry, old_name: str, new_name: str) -> None: ...
    def renameGlobalAttrib(self: Geometry, old_name: str, new_name: str) -> None: ...
    def createPoint(self: Geometry) -> Point: ...
    def createPoints(self: Geometry, point_positions: Sequence[Vector3]) -> Tuple[Point, ...]: ...
    def createPolygon(self: Geometry, is_closed: bool=True) -> Polygon: ...
    def createPolygons(self: Geometry, points: Sequence[Sequence[int]], is_closed: bool=True) -> Tuple[Polygon, ...]: ...
    def createPacked(self: Geometry, typename: str, point: Optional[Point]=None) -> PackedPrim: ...
    def createTetrahedron(self: Geometry) -> Prim: ...
    def createTetrahedronInPlace(self: Geometry, p0: Point, p1: Point, p2: Point, p3: Point) -> Prim: ...
    def createHexahedron(self: Geometry) -> Prim: ...
    def createHexahedronInPlace(self: Geometry, p0: Point, p1: Point, p2: Point, p3: Point, p4: Point, p5: Point, p6: Point, p7: Point) -> Prim: ...
    def createNURBSCurve(self: Geometry, num_vertices: int=4, is_closed: bool=False, order: int=4) -> Face: ...
    def createBezierCurve(self: Geometry, num_vertices: int=4, is_closed: bool=False, order: int=4) -> Face: ...
    def createNURBSSurface(self: Geometry, rows: int, cols: int, is_closed_in_u: bool=False, is_closed_in_v: bool=False) -> Surface: ...
    def createBezierSurface(self: Geometry, rows: int, cols: int, is_closed_in_u: bool=False, is_closed_in_v: bool=False) -> Surface: ...
    def createMeshSurface(self: Geometry, rows: int, cols: int, is_closed_in_u: bool=False, is_closed_in_v: bool=False) -> Surface: ...
    def createVolume(self: Geometry, xres: int, yres: int, zres: int, bounding_box: Optional[BoundingBox]=None) -> Volume: ...
    def transform(self: Geometry, matrix: Matrix4) -> None: ...
    def transformPrims(self: Geometry, prims: Sequence[Prim], matrix: Matrix4) -> None: ...
    def deletePrims(self: Geometry, prims: Sequence[Prim], keep_points: bool=False) -> None: ...
    def deletePrimsOutsideBoundingBox(self: Geometry, bbox: BoundingBox) -> None: ...
    def deletePoints(self: Geometry, points: Sequence[Point]) -> None: ...
    def addAttrib(self: Geometry, type: EnumValue, name: str, default_value, transform_as_normal: bool=True, create_local_variable: bool=True) -> Attrib: ...
    def addArrayAttrib(self: Geometry, type: EnumValue, name: str, data_type: EnumValue, tuple_size: int=1) -> Attrib: ...
    def setGlobalAttribValue(self: Geometry, name_or_attrib: Union[str, Attrib], attrib_value) -> None: ...
    def copyAttrib(self: Geometry, attribs: Attrib) -> None: ...
    def copyAttribs(self: Geometry, attribs: Sequence[Attrib]) -> Any: ...
    def copy(self: Geometry, geometry: Geometry, clone_data_ids: bool=False) -> None: ...
    def attribValue(self: Geometry, name_or_attrib: Union[str, Attrib]) -> Union[Union[int, float, str, tuple],dict]: ...
    def attributeCaptureRegions(self: Geometry) -> Tuple[str, ...]: ...
    def attributeCaptureObjectPaths(self: Geometry) -> Tuple[str, ...]: ...
    def intrinsicNames(self: Geometry) -> Tuple[str, ...]: ...
    def intrinsicValue(self: Geometry, intrinsic_name: str) -> Union[int, float, str, tuple]: ...
    def intrinsicSize(self: Geometry, intrinsic_name: str) -> Any: ...
    def intrinsicReadOnly(self: Geometry, intrinsic_name: str) -> Any: ...
    def setIntrinsicValue(self: Geometry, intrinsic_name: str, value: Sequence[str]) -> None: ...
    def data(self: Geometry) -> str: ...
    def load(self: Geometry, data: str) -> None: ...
    def saveToFile(self: Geometry, file_name: str) -> None: ...
    def loadFromFile(self: Geometry, file_name: str) -> None: ...
    def merge(self: Geometry, geometry: Geometry, clone_data_ids: bool=False) -> None: ...
    def clear(self: Geometry) -> None: ...
    def intersect(self: Geometry, ray_origin: Vector3, ray_direction: Vector3, position_out: Vector3, normal_out: Vector3, uvw_out: Vector3, pattern: Optional[str]=None, min_hit: float=0.01, max_hit: float=1E18, tolerance: float=0.01) -> int: ...
    def pointGroups(self: Geometry) -> Tuple[PointGroup, ...]: ...
    def findPointGroup(self: Geometry, name: str) -> Optional[PointGroup]: ...
    def createPointGroup(self: Geometry, name: str, is_ordered: bool=False) -> PointGroup: ...
    def primGroups(self: Geometry) -> Tuple[PrimGroup, ...]: ...
    def findPrimGroup(self: Geometry, name: str) -> Optional[PrimGroup]: ...
    def createPrimGroup(self: Geometry, name: str, is_ordered: bool=False) -> PrimGroup: ...
    def edgeGroups(self: Geometry) -> Tuple[EdgeGroup, ...]: ...
    def findEdgeGroup(self: Geometry, name: str) -> Optional[EdgeGroup]: ...
    def createEdgeGroup(self: Geometry, name: str) -> EdgeGroup: ...
    def vertexGroups(self: Geometry) -> Tuple[VertexGroup, ...]: ...
    def findVertexGroup(self: Geometry, name: str) -> Optional[VertexGroup]: ...
    def createVertexGroup(self: Geometry, name: str, is_ordered: bool=False) -> VertexGroup: ...
    def findEdge(self: Geometry, p0: Point, p1: Point) -> Edge: ...
    def boundingBox(self: Geometry, transform: Optional[Matrix4]=None) -> BoundingBox: ...
    def pointBoundingBox(self: Geometry, pointpattern: str) -> BoundingBox: ...
    def primBoundingBox(self: Geometry, primpattern: str) -> BoundingBox: ...
    def orientedBoundingBox(self: Geometry) -> EnumValue: ...
    def orientedPointBoundingBox(self: Geometry, pointpattern: str) -> OrientedBoundingBox: ...
    def orientedPrimBoundingBox(self: Geometry, primpattern: str) -> OrientedBoundingBox: ...
    def nearestPrim(self: Geometry, position: Union[Sequence[float], Vector3]) -> Tuple[Optional[Prim], float, float, float]: ...
    def nearestPoint(self: Geometry, position: Union[Sequence[float], Vector3], ptgroup: Optional[str]=None, max_radius: float=1E18) -> Optional[Point]: ...
    def nearestPoints(self: Geometry, position: Union[Sequence[float], Vector3], max_points: int, ptgroup: Optional[str]=None, max_radius: float=1E18) -> Tuple[Point, ...]: ...
    def primLoop(self: Geometry, prims: Sequence[Prim], loop_type: EnumValue) -> Tuple[Prim, ...]: ...
    def pointLoop(self: Geometry, points: Sequence[Point], full_loop: EnumValue) -> Tuple[Point, ...]: ...
    def edgeLoop(self: Geometry, edges: Sequence[Edge], loop_type: EnumValue, full_loop_per_edge: bool, force_ring: bool, allow_ring: bool) -> Tuple[Edge, ...]: ...
    def pointNormals(self: Geometry, points: Sequence[Point]) -> Tuple[Vector3, ...]: ...
    def importLop(self: Geometry, lopnode: LopNode, selectionrule: LopSelectionRule, purpose: Optional[str]=None, traversal: Optional[str]=None, path_attrib_name: Optional[str]=None, name_attrib_name: Optional[str]=None, strip_layers: bool=False, frame: Optional[Any]=None) -> LopLockedStage: ...
    def importUsdStage(self: Geometry, stage, selectionrule: LopSelectionRule, purpose: Optional[str]=None, traversal: Optional[str]=None, path_attrib_name: Optional[str]=None, name_attrib_name: Optional[str]=None, frame: Optional[Any]=None) -> None: ...
    def selection(self: Geometry) -> Selection: ...
    def vexAttribDataId(self: Geometry) -> Tuple[int, ...]: ...
    def modificationCounter(self: Geometry) -> int: ...
    def incrementModificationCounter(self: Geometry) -> None: ...
    def incrementAllDataIds(self: Geometry) -> None: ...
    def incrementDataIdsForAddOrRemove(self: Geometry, for_points: bool=True, for_prims: bool=True) -> None: ...
    def primitiveIntrinsicsDataId(self: Geometry) -> None: ...
    def incrementPrimitiveIntrinsicsDataId(self: Geometry) -> None: ...
    def topologyDataId(self: Geometry) -> None: ...
    def incrementTopologyDataId(self: Geometry) -> None: ...
    def generateAttribMenu(self: Geometry, attrib_type: Optional[EnumValue]=None, data_type: Optional[EnumValue]=None, min_size: int=1, max_size: int=-1, array_type: bool=True, scalar_type: bool=True, case_sensitive: bool=True, pattern: str="Any", decode_tokens: bool=False) -> Tuple[str, ...]: ...
    def isReadOnly(self: Geometry) -> bool: ...

    def __repr__(self: Geometry) -> Any: ...  ## Added by typing stub update
    def _getPointChildren(self: Geometry, pt: Point) -> Any: ...  ## Added by typing stub update
    def _orderedPoints(self: Geometry, groupname: str, corner_groupname: str, dimensions: Vector2) -> Any: ...  ## Added by typing stub update
    def _guDetailHandle(self: Geometry) -> Any: ...  ## Added by typing stub update
    def _geometryHandle(self: Geometry) -> Any: ...  ## Added by typing stub update
    def _generateGroupMenu(self: Geometry, group_types: Sequence[EnumValue], include_selection: bool, include_name_attrib: bool, case_sensitive: bool, pattern: str, decode_tokens: bool, parm: Parm) -> Any: ...  ## Added by typing stub update
    def _attribInfo(self: Geometry, name: str, attr_data_type: int, attr_size: int, is_array_type: bool) -> Any: ...  ## Added by typing stub update
class GeometryDelta:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def setPointPositionsFromString(self: GeometryDelta, positions) -> None: ...

    def __repr__(self: GeometryDelta) -> Any: ...  ## Added by typing stub update
class GeometryDrawable(AdvancedDrawable):
    thisown: Any = ...
    def __init__(self: GeometryDrawable, scene_viewer: SceneViewer, geo_type: EnumValue, name: str, label: Optional[Geometry]=None, geometry: Optional[Any]=None, params: Optional[str]=None) -> None: ...
    __swig_destroy__: Any = ...
    def geometry(self: GeometryDrawable) -> Geometry: ...
    def setGeometry(self: GeometryDrawable, geometry: Geometry) -> None: ...
    def type(self: GeometryDrawable) -> EnumValue: ...
    def useClipPlane(self: GeometryDrawable, value: bool) -> None: ...

    def __repr__(self: GeometryDrawable) -> Any: ...  ## Added by typing stub update
class GeometryDrawableGroup(AdvancedDrawable):
    thisown: Any = ...
    def __init__(self: GeometryDrawableGroup, name: str, label: Optional[str]=None) -> None: ...
    __swig_destroy__: Any = ...
    def addDrawable(self: GeometryDrawableGroup, geometry_drawable: GeometryDrawable) -> None: ...
    def drawable(self: GeometryDrawableGroup, name: str) -> None: ...
    def drawables(self: GeometryDrawableGroup) -> None: ...
    def geometry(self: GeometryDrawableGroup) -> None: ...
    def setGeometry(self: GeometryDrawableGroup, geometry: Geometry) -> None: ...
    def useClipPlane(self: GeometryDrawableGroup, value: bool) -> None: ...

    def __repr__(self: GeometryDrawableGroup) -> Any: ...  ## Added by typing stub update
class GadgetDrawable(GeometryDrawable):
    thisown: Any = ...
    def __init__(self: GadgetDrawable, widget: int, gadget_context: int) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: GadgetDrawable) -> Any: ...  ## Added by typing stub update
class GeometryRayCache:
    thisown: Any = ...
    def __init__(self) -> None: ...
    __swig_destroy__: Any = ...
    def intersect(self: GeometryRayCache, ray_origin: Geometry, ray_direction: Vector3, position_out: Vector3, normal_out: Vector3, uvw_out: Vector3, min_hit: float=0.01, max_hit: float=1E18, tolerance: float=0.01) -> int: ...
    def findAllInTube(self: GeometryRayCache, line_origin: Geometry, line_direction: Vector3, radius: Vector3, min_hit: int=0, max_hit: float=1E18, tolerance: float=5E-3) -> Tuple[Point, ...]: ...

    def __repr__(self: GeometryRayCache) -> Any: ...  ## Added by typing stub update
class GeometrySelection:
    thisown: Any = ...
    def __init__(self: GeometrySelection, *args: int) -> None: ...
    __swig_destroy__: Any = ...
    def ordered(self: GeometrySelection) -> bool: ...
    def geometryType(self: GeometrySelection) -> EnumValue: ...
    def setGeometryType(self: GeometrySelection, type: EnumValue) -> None: ...
    def connectivity(self: GeometrySelection) -> EnumValue: ...
    def setConnectivity(self: GeometrySelection, connectivity: EnumValue) -> None: ...
    def primitiveTypes(self: GeometrySelection) -> EnumValue: ...
    def setPrimitiveTypes(self: GeometrySelection, primitive_types: Sequence[EnumValue]) -> None: ...
    def nodes(self: GeometrySelection) -> Tuple[Node, ...]: ...
    def selectionStrings(self: GeometrySelection, empty_string_selects_all: bool=True, force_numeric: bool=False) -> Tuple[str, ...]: ...
    def selections(self: GeometrySelection) -> Tuple[Selection, ...]: ...
    def needsMergedNode(self: GeometrySelection, parent: Node) -> bool: ...
    def mergedNode(self: GeometrySelection, parent: Node, creator_name: str, force_keep_original_objects: bool=False, display_original_objects: bool=False) -> Node: ...
    def mergedSelectionString(self: GeometrySelection, empty_string_selects_all: bool=True, force_numeric: bool=False) -> str: ...
    def shrinkSelection(self: GeometrySelection, checkuv: bool=True) -> None: ...
    def growSelection(self: GeometrySelection) -> None: ...
    def boundingBox(self: GeometrySelection) -> BoundingBox: ...
    def orientedBoundingBox(self: GeometrySelection) -> OrientedBoundingBox: ...

    def __repr__(self: GeometrySelection) -> Any: ...  ## Added by typing stub update
    def __str__(self: GeometrySelection) -> Any: ...  ## Added by typing stub update
class GeometrySpreadsheet(PathBasedPaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def numRows(self: GeometrySpreadsheet) -> int: ...
    def numColumns(self: GeometrySpreadsheet) -> int: ...
    def cellText(self: GeometrySpreadsheet, row: int, col: int) -> str: ...
    def groupFilter(self: GeometrySpreadsheet) -> str: ...
    def setGroupFilter(self: GeometrySpreadsheet, group: str) -> None: ...
    def groupFilterEnabled(self: GeometrySpreadsheet) -> bool: ...
    def setGroupFilterEnabled(self: GeometrySpreadsheet, enable: bool) -> None: ...
    def attribFilter(self: GeometrySpreadsheet) -> str: ...
    def setAttribFilter(self: GeometrySpreadsheet, filter: str) -> None: ...
    def attribFilterEnabled(self: GeometrySpreadsheet) -> bool: ...
    def setAttribFilterEnabled(self: GeometrySpreadsheet, enable: bool) -> None: ...
    def viewDecomposedMatrices(self: GeometrySpreadsheet) -> bool: ...
    def setViewDecomposedMatrices(self: GeometrySpreadsheet, enable: bool) -> None: ...

    def __repr__(self: GeometrySpreadsheet) -> Any: ...  ## Added by typing stub update
class GeometryViewport:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def type(self: GeometryViewport) -> EnumValue: ...
    def changeType(self: GeometryViewport, type: EnumValue) -> None: ...
    def settings(self: GeometryViewport) -> GeometryViewportSettings: ...
    def name(self: GeometryViewport) -> str: ...
    def changeName(self: GeometryViewport, str: str) -> None: ...
    def home(self: GeometryViewport) -> None: ...
    def homeAll(self: GeometryViewport) -> None: ...
    def homeSelected(self: GeometryViewport) -> None: ...
    def homeGrid(self: GeometryViewport) -> None: ...
    def homeNonTemplated(self: GeometryViewport) -> None: ...
    def homeBoundingBox(self: GeometryViewport, bbox: BoundingBox, center_to_origin: bool=False) -> None: ...
    def frameAll(self: GeometryViewport) -> None: ...
    def frameBoundingBox(self: GeometryViewport, bbox: BoundingBox) -> None: ...
    def frameSelected(self: GeometryViewport) -> None: ...
    def frameGrid(self: GeometryViewport) -> None: ...
    def frameNonTemplated(self: GeometryViewport) -> None: ...
    def draw(self: GeometryViewport) -> None: ...
    def viewTransform(self: GeometryViewport) -> Matrix4: ...
    def modelToGeometryTransform(self: GeometryViewport) -> Matrix4: ...
    def cameraToModelTransform(self: GeometryViewport) -> Matrix4: ...
    def ndcToCameraTransform(self: GeometryViewport) -> Matrix4: ...
    def viewportToNDCTransform(self: GeometryViewport) -> Matrix4: ...
    def windowToViewportTransform(self: GeometryViewport) -> Matrix4: ...
    def viewPivot(self: GeometryViewport) -> Vector3: ...
    def resolutionInPixels(self: GeometryViewport) -> Tuple[int, int]: ...
    def camera(self: GeometryViewport) -> Any: ...
    def cameraPath(self: GeometryViewport) -> str: ...
    def setCamera(self: GeometryViewport, camera_node: str) -> None: ...
    def saveViewToCamera(self: GeometryViewport, camera_node: ObjNode) -> None: ...
    def defaultCamera(self: GeometryViewport) -> GeometryViewportCamera: ...
    def setDefaultCamera(self: GeometryViewport, stashed_cam: GeometryViewportCamera) -> None: ...
    def useDefaultCamera(self: GeometryViewport) -> None: ...
    def isCameraLockedToView(self: GeometryViewport) -> bool: ...
    def lockCameraToView(self: GeometryViewport) -> None: ...
    def isActive2D(self: GeometryViewport) -> bool: ...
    def isActive3D(self: GeometryViewport) -> bool: ...
    def usesConstructionPlane(self: GeometryViewport) -> bool: ...
    def queryNodeAtPixel(self: GeometryViewport, x: int, y: int, pick_templates: bool=False) -> Optional[Union[ObjNode, SopNode]]: ...
    def queryPrimAtPixel(self: GeometryViewport, node: Node, x: int, y: int) -> Optional[Prim]: ...
    def queryInspectedGeometry(self: GeometryViewport) -> Optional[Geometry]: ...
    def queryInspectedPrim(self: GeometryViewport) -> Optional[Prim]: ...
    def mapToWorld(self: GeometryViewport, x: float, y: float) -> Tuple[Vector3, Vector3]: ...
    def mapToScreen(self: GeometryViewport, position: Union[Sequence[float], Vector3]) -> Vector2: ...
    def mapFromMouseChop(self: GeometryViewport, x: float, y: float) -> Tuple[int, int]: ...
    def queryWorldPositionAndNormal(self: GeometryViewport, x: int, y: int, selectionRestriction: EnumValue) -> Tuple[Vector3, Vector3, bool]: ...
    def size(self: GeometryViewport) -> Tuple[float, ...]: ...
    def geometry(self: GeometryViewport) -> Tuple[int, ...]: ...
    def addEventCallback(self: GeometryViewport, callback) -> None: ...
    def removeEventCallback(self: GeometryViewport, callback) -> None: ...
    def clearEventCallbacks(self: GeometryViewport) -> None: ...
    def eventCallbacks(self: GeometryViewport) -> Tuple[Callable, ...]: ...

    def __repr__(self: GeometryViewport) -> Any: ...  ## Added by typing stub update
    def _queryPrimOnDrawables(self: GeometryViewport, drawables: Sequence[Drawable], x: int, y: int, enable_occlusion: bool) -> Any: ...  ## Added by typing stub update
    def _queryComponentsOnDrawables(self: GeometryViewport, drawables: Sequence[Drawable], start: Vector2, end_inclusive: Optional[Vector2]=None, enable_occlusion: bool=False, contained: bool=False) -> Any: ...  ## Added by typing stub update
class GeometryViewportCamera:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def stash(self: GeometryViewportCamera) -> GeometryViewportCamera: ...
    def setPerspective(self: GeometryViewportCamera, perspective: bool) -> None: ...
    def isPerspective(self: GeometryViewportCamera) -> bool: ...
    def isOrthographic(self: GeometryViewportCamera) -> bool: ...
    def setAperture(self: GeometryViewportCamera, ap: float) -> None: ...
    def aperture(self: GeometryViewportCamera) -> float: ...
    def setFocalLength(self: GeometryViewportCamera, fl: float) -> None: ...
    def focalLength(self: GeometryViewportCamera) -> float: ...
    def focalUnitScale(self: GeometryViewportCamera) -> float: ...
    def setAspectRatio(self: GeometryViewportCamera, ar: float) -> None: ...
    def aspectRatio(self: GeometryViewportCamera) -> float: ...
    def setOrthoWidth(self: GeometryViewportCamera, ow: float) -> None: ...
    def orthoWidth(self: GeometryViewportCamera) -> float: ...
    def setRotation(self: GeometryViewportCamera, mat: Matrix3) -> Any: ...
    def rotation(self: GeometryViewportCamera) -> Any: ...
    def setTranslation(self: GeometryViewportCamera, xyz: Sequence[float]) -> None: ...
    def translation(self: GeometryViewportCamera) -> Tuple[float, float, float]: ...
    def setPivot(self: GeometryViewportCamera, xyz: Sequence[float]) -> None: ...
    def pivot(self: GeometryViewportCamera) -> Tuple[float, float, float]: ...
    def setClipPlanes(self: GeometryViewportCamera, near_far: Sequence[float]) -> None: ...
    def clipPlanes(self: GeometryViewportCamera) -> Tuple[float, float]: ...
    def setWindowOffset(self: GeometryViewportCamera, xy: Sequence[float]) -> None: ...
    def windowOffset(self: GeometryViewportCamera) -> Tuple[float, float]: ...
    def setWindowSize(self: GeometryViewportCamera, size: Sequence[float]) -> None: ...
    def windowSize(self: GeometryViewportCamera) -> Tuple[float, float]: ...

    def __repr__(self: GeometryViewportCamera) -> Any: ...  ## Added by typing stub update
class GeometryViewportDisplaySet:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def displaySetType(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def showPointMarkers(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPointMarkers(self: GeometryViewportDisplaySet) -> bool: ...
    def showPointNumbers(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPointNumbers(self: GeometryViewportDisplaySet) -> bool: ...
    def showPointNormals(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPointNormals(self: GeometryViewportDisplaySet) -> bool: ...
    def showPointPositions(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPointPositions(self: GeometryViewportDisplaySet) -> bool: ...
    def showPointUVs(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPointUVs(self: GeometryViewportDisplaySet) -> bool: ...
    def showPointTrails(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPointTrails(self: GeometryViewportDisplaySet) -> bool: ...
    def showCoincidentPoints(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingCoincidentPoints(self: GeometryViewportDisplaySet) -> bool: ...
    def showPrimHulls(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPrimHulls(self: GeometryViewportDisplaySet) -> bool: ...
    def showPrimNumbers(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPrimNumbers(self: GeometryViewportDisplaySet) -> bool: ...
    def showPrimNormals(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPrimNormals(self: GeometryViewportDisplaySet) -> bool: ...
    def showPrimProfiles(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPrimProfiles(self: GeometryViewportDisplaySet) -> bool: ...
    def showPrimBreakpoints(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPrimBreakpoints(self: GeometryViewportDisplaySet) -> bool: ...
    def showPrimProfileNumbers(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPrimProfileNumbers(self: GeometryViewportDisplaySet) -> bool: ...
    def showPrimBackfaces(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingPrimBackfaces(self: GeometryViewportDisplaySet) -> bool: ...
    def showVertexMarkers(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingVertexMarkers(self: GeometryViewportDisplaySet) -> bool: ...
    def showVertexNumbers(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingVertexNumbers(self: GeometryViewportDisplaySet) -> bool: ...
    def showVertexNormals(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingVertexNormals(self: GeometryViewportDisplaySet) -> bool: ...
    def showVertexUVs(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingVertexUVs(self: GeometryViewportDisplaySet) -> Any: ...
    def showUVBackfaces(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingUVBackfaces(self: GeometryViewportDisplaySet) -> bool: ...
    def showUVOverlap(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShowingUVOverlap(self: GeometryViewportDisplaySet) -> bool: ...
    def setPointMarkerVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def pointMarkerVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setPointNumberVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def pointNumberVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setPointNormalVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def pointNormalVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setPointPositionVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def pointPositionVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setPointUVVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def pointUVVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setPointTrailVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def pointTrailVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setPrimNumberVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def primNumberVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setPrimNormalVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def primNormalVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setPrimBreakpointVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def primBreakpointVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setVertexMarkerVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def vertexMarkerVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setVertexNormalVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def vertexNormalVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setVertexNumberVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def vertexNumberVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setVertexUVVisibility(self: GeometryViewportDisplaySet, visibility: EnumValue) -> None: ...
    def vertexUVVisibility(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def useGhostedLook(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isUsingGhostedLook(self: GeometryViewportDisplaySet) -> bool: ...
    def useFadedLook(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isUsingFadedLook(self: GeometryViewportDisplaySet) -> bool: ...
    def useXRay(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isUsingXRay(self: GeometryViewportDisplaySet) -> bool: ...
    def useLighting(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isUsingLighting(self: GeometryViewportDisplaySet) -> bool: ...
    def useUVMap(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isUsingUVMap(self: GeometryViewportDisplaySet) -> bool: ...
    def setShadingModeLocked(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isShadingModeLocked(self: GeometryViewportDisplaySet) -> bool: ...
    def setToolbarLinked(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isToolbarLinked(self: GeometryViewportDisplaySet) -> bool: ...
    def setUniqueDisplaySet(self: GeometryViewportDisplaySet, on: bool) -> None: ...
    def isUniqueDisplaySet(self: GeometryViewportDisplaySet) -> bool: ...
    def setShadedMode(self: GeometryViewportDisplaySet, shaded_mode: EnumValue) -> None: ...
    def shadedMode(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setBoundaryMode(self: GeometryViewportDisplaySet, boundary_display: EnumValue) -> None: ...
    def boundaryMode(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setUVBoundaryMode(self: GeometryViewportDisplaySet, boundary_display: EnumValue) -> None: ...
    def uvBoundaryMode(self: GeometryViewportDisplaySet) -> EnumValue: ...
    def setLinkToDisplaySet(self: GeometryViewportDisplaySet, view_display_set: EnumValue) -> None: ...
    def linkedToDisplaySet(self: GeometryViewportDisplaySet) -> EnumValue: ...

    def __repr__(self: GeometryViewportDisplaySet) -> Any: ...  ## Added by typing stub update
class GeometryViewportSettings:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def viewportType(self: GeometryViewportSettings) -> EnumValue: ...
    def displaySet(self: GeometryViewportSettings, display_set: EnumValue) -> GeometryViewportDisplaySet: ...
    def viewAspectRatio(self: GeometryViewportSettings, masked: bool) -> float: ...
    def normalScale(self: GeometryViewportSettings) -> Any: ...
    def setNormalScale(self: GeometryViewportSettings, normal_scale: float) -> None: ...
    def vectorScale(self: GeometryViewportSettings) -> float: ...
    def setVectorScale(self: GeometryViewportSettings, scale: float) -> None: ...
    def pointMarkerSize(self: GeometryViewportSettings) -> float: ...
    def setPointMarkerSize(self: GeometryViewportSettings, point_size: float) -> None: ...
    def originGnomonSize(self: GeometryViewportSettings) -> float: ...
    def setOriginGnomonSize(self: GeometryViewportSettings, size: float) -> None: ...
    def camera(self: GeometryViewportSettings) -> Optional[ObjNode]: ...
    def setCamera(self: GeometryViewportSettings, camera_node: str) -> None: ...
    def saveViewToCamera(self: GeometryViewportSettings, camera_node: ObjNode) -> None: ...
    def geometryInfo(self: GeometryViewportSettings, viewport_geometry_info: EnumValue) -> None: ...
    def handleHighlight(self: GeometryViewportSettings, viewport_handle_highlight: EnumValue) -> None: ...
    def closureSelection(self: GeometryViewportSettings, viewport_closure_selection: EnumValue) -> None: ...
    def guideFontSize(self: GeometryViewportSettings, *args: EnumValue) -> Any: ...
    def setOffsetVertexMarkers(self: GeometryViewportSettings, enable: bool) -> None: ...
    def offsetVertexMarkers(self: GeometryViewportSettings) -> bool: ...
    def enableGuide(self: GeometryViewportSettings, guide: EnumValue, on: bool) -> None: ...
    def guideEnabled(self: GeometryViewportSettings, guide: EnumValue) -> bool: ...
    def levelOfDetail(self: GeometryViewportSettings) -> float: ...
    def volumeQuality(self: GeometryViewportSettings) -> EnumValue: ...
    def volumeAmbientShadows(self: GeometryViewportSettings) -> float: ...
    def volumeBSplines(self: GeometryViewportSettings) -> EnumValue: ...
    def volumeWireAsPoints(self: GeometryViewportSettings) -> bool: ...
    def polygonConvexQuality(self: GeometryViewportSettings) -> bool: ...
    def subdivsionLimit(self: GeometryViewportSettings) -> int: ...
    def wireWidth(self: GeometryViewportSettings) -> float: ...
    def wireBlend(self: GeometryViewportSettings) -> float: ...
    def interiorWireAlpha(self: GeometryViewportSettings) -> float: ...
    def shadeOpenCurves(self: GeometryViewportSettings) -> bool: ...
    def selectWireframeAsSolid(self: GeometryViewportSettings) -> bool: ...
    def setWireOverPackedGeo(self: GeometryViewportSettings, wire_over_packed: bool) -> None: ...
    def wireOverPackedGeo(self: GeometryViewportSettings) -> bool: ...
    def particleDisplayType(self: GeometryViewportSettings) -> EnumValue: ...
    def allowParticleSprites(self: GeometryViewportSettings) -> bool: ...
    def particlePointSize(self: GeometryViewportSettings) -> float: ...
    def particleDiscSize(self: GeometryViewportSettings) -> float: ...
    def orientDiscToNormal(self: GeometryViewportSettings) -> bool: ...
    def spriteTextureLimit(self: GeometryViewportSettings) -> Tuple[int, ...]: ...
    def pointInstancing(self: GeometryViewportSettings) -> bool: ...
    def pointInstancingPercent(self: GeometryViewportSettings) -> float: ...
    def pointInstancingLimit(self: GeometryViewportSettings) -> int: ...
    def instanceStandInGeometry(self: GeometryViewportSettings) -> EnumValue: ...
    def autoGenerateVertexNormals(self: GeometryViewportSettings) -> bool: ...
    def vertexNormalCuspAngle(self: GeometryViewportSettings) -> float: ...
    def vertexNormalLimit(self: GeometryViewportSettings) -> int: ...
    def setSceneAntialias(self: GeometryViewportSettings, aalevel: int) -> None: ...
    def sceneAntialias(self: GeometryViewportSettings) -> None: ...
    def setHdrRendering(self: GeometryViewportSettings) -> bool: ...
    def hdrRendering(self: GeometryViewportSettings) -> Any: ...
    def setXrayDrawing(self: GeometryViewportSettings, global_enable: bool) -> None: ...
    def xrayDrawing(self: GeometryViewportSettings) -> bool: ...
    def setXrayQuality(self: GeometryViewportSettings, quality: bool) -> None: ...
    def xrayQuality(self: GeometryViewportSettings) -> bool: ...
    def setXrayStrength(self: GeometryViewportSettings, strength: float) -> None: ...
    def xrayStrength(self: GeometryViewportSettings) -> float: ...
    def setObjectOrigins(self: GeometryViewportSettings, globel_enable: bool) -> None: ...
    def objectOrigins(self: GeometryViewportSettings) -> bool: ...
    def setOnionSkinning(self: GeometryViewportSettings, global_enable: bool) -> None: ...
    def onionSkinning(self: GeometryViewportSettings) -> bool: ...
    def setOnionSkinFramesBeforeCount(self: GeometryViewportSettings, num_frames: int) -> None: ...
    def onionSkinFramesBeforeCount(self: GeometryViewportSettings) -> int: ...
    def setOnionSkinFramesBeforeTint(self: GeometryViewportSettings, tint: Color) -> None: ...
    def onionSkinFramesBeforeTint(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setOnionSkinFramesAfterCount(self: GeometryViewportSettings, num_frames: int) -> None: ...
    def onionSkinFramesAfterCount(self: GeometryViewportSettings) -> int: ...
    def setOnionSkinFramesAfterTint(self: GeometryViewportSettings, tint: Color) -> None: ...
    def onionSkinFramesAfterTint(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setOnionSkinFrameIncrement(self: GeometryViewportSettings, frame_increment: int) -> None: ...
    def onionSkinFrameIncrement(self: GeometryViewportSettings) -> int: ...
    def setOnionSkinOpacity(self: GeometryViewportSettings, opacity: float) -> None: ...
    def onionSkinOpacity(self: GeometryViewportSettings) -> float: ...
    def setSceneGamma(self: GeometryViewportSettings, gamma: float) -> None: ...
    def sceneGamma(self: GeometryViewportSettings) -> float: ...
    def setUseSceneLUT(self: GeometryViewportSettings, enable: bool) -> None: ...
    def useSceneLUT(self: GeometryViewportSettings) -> bool: ...
    def setSceneLUT(self: GeometryViewportSettings, lut_file: str) -> None: ...
    def sceneLUT(self: GeometryViewportSettings) -> str: ...
    def setBackgroundImageGammaLUT(self: GeometryViewportSettings, apply_to_bg: bool) -> None: ...
    def backgroundImageGammaLUT(self: GeometryViewportSettings) -> bool: ...
    def setDepthOfField(self: GeometryViewportSettings, enable: bool) -> None: ...
    def getDepthOfField(self: GeometryViewportSettings) -> bool: ...
    def setDepthOfFieldBokeh(self: GeometryViewportSettings, viewportDOFBokeh: EnumValue) -> None: ...
    def getDepthOfFieldBokeh(self: GeometryViewportSettings) -> EnumValue: ...
    def setDepthOfFieldBokehTexture(self: GeometryViewportSettings, file_or_node: str) -> None: ...
    def getDepthOfFieldBokehTexture(self: GeometryViewportSettings) -> str: ...
    def setDepthOfFieldBokehBoost(self: GeometryViewportSettings, boost: float) -> None: ...
    def getDepthOfFieldBokehBoost(self: GeometryViewportSettings) -> float: ...
    def setDepthOfFieldBokehAspect(self: GeometryViewportSettings, aspect: float) -> None: ...
    def getDepthOfFieldBokehAspect(self: GeometryViewportSettings) -> float: ...
    def showsName(self: GeometryViewportSettings, show: bool) -> None: ...
    def showName(self: GeometryViewportSettings) -> bool: ...
    def showsCameraName(self: GeometryViewportSettings, show: bool) -> None: ...
    def showCameraName(self: GeometryViewportSettings) -> bool: ...
    def showsStateStatus(self: GeometryViewportSettings, show: bool) -> None: ...
    def showStateStatus(self: GeometryViewportSettings) -> bool: ...
    def showsBadges(self: GeometryViewportSettings, show: bool) -> None: ...
    def showBadges(self: GeometryViewportSettings) -> bool: ...
    def useAspectRatio(self: GeometryViewportSettings, enable: bool) -> None: ...
    def usingAspectRatio(self: GeometryViewportSettings) -> bool: ...
    def setAspectRatio(self: GeometryViewportSettings, aspect: float) -> None: ...
    def aspectRatio(self: GeometryViewportSettings) -> float: ...
    def setViewMaskOpacity(self: GeometryViewportSettings, opacity: float) -> None: ...
    def viewMaskOpacity(self: GeometryViewportSettings) -> float: ...
    def setStereoMode(self: GeometryViewportSettings, viewportStereoMode: EnumValue) -> None: ...
    def stereoMode(self: GeometryViewportSettings) -> EnumValue: ...
    def setHomeAutoAdjustsClip(self: GeometryViewportSettings, viewportHomeClipMode: EnumValue) -> None: ...
    def homeAutoAdjustClip(self: GeometryViewportSettings) -> EnumValue: ...
    def setClipPlanes(self: GeometryViewportSettings, clip: Sequence[float]) -> None: ...
    def clipPlanes(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setMinHomeSize(self: GeometryViewportSettings, min_size: float) -> None: ...
    def minHomeSize(self: GeometryViewportSettings) -> float: ...
    def setUVDisplayAttribute(self: GeometryViewportSettings, uv: str) -> Any: ...
    def uvDisplayAttribute(self: GeometryViewportSettings) -> str: ...
    def setUVAutoAttribute(self: GeometryViewportSettings, detect: bool) -> Any: ...
    def uvAutoAttribute(self: GeometryViewportSettings) -> bool: ...
    def setUVVertexType(self: GeometryViewportSettings, is_vertex_uv: bool) -> Any: ...
    def uvVertexType(self: GeometryViewportSettings) -> bool: ...
    def setUVMapTexture(self: GeometryViewportSettings, uv: str) -> None: ...
    def uvMapTexture(self: GeometryViewportSettings) -> str: ...
    def setUVMapScale(self: GeometryViewportSettings, scale: float) -> None: ...
    def uvMapScale(self: GeometryViewportSettings) -> float: ...
    def setLighting(self: GeometryViewportSettings, viewportLighting: EnumValue) -> None: ...
    def lighting(self: GeometryViewportSettings) -> EnumValue: ...
    def showDiffuse(self: GeometryViewportSettings, enable: bool) -> None: ...
    def showingDiffuse(self: GeometryViewportSettings) -> bool: ...
    def showSpecular(self: GeometryViewportSettings, enable: bool) -> None: ...
    def showingSpecular(self: GeometryViewportSettings) -> bool: ...
    def showAmbient(self: GeometryViewportSettings, enable: bool) -> None: ...
    def showingAmbient(self: GeometryViewportSettings) -> bool: ...
    def showEmission(self: GeometryViewportSettings, enable: bool) -> None: ...
    def showingEmission(self: GeometryViewportSettings) -> bool: ...
    def setLightSampling(self: GeometryViewportSettings, num_samples: int) -> None: ...
    def lightSampling(self: GeometryViewportSettings) -> int: ...
    def setMaxLightSamples(self: GeometryViewportSettings, samples: int) -> None: ...
    def maxLightSamples(self: GeometryViewportSettings) -> int: ...
    def setLightLimit(self: GeometryViewportSettings, limit: int) -> None: ...
    def getLightLimit(self: GeometryViewportSettings) -> int: ...
    def setHeadlightIntensity(self: GeometryViewportSettings, intensity: float) -> None: ...
    def headlightIntensity(self: GeometryViewportSettings) -> float: ...
    def setHeadlightDirection(self: GeometryViewportSettings, dir: Sequence[float]) -> None: ...
    def headlightDirection(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setHeadlightSpecular(self: GeometryViewportSettings, enable: bool) -> None: ...
    def headlightSpecular(self: GeometryViewportSettings) -> bool: ...
    def setHeadlightOcclusion(self: GeometryViewportSettings, enable: bool) -> None: ...
    def headlightOcclusion(self: GeometryViewportSettings) -> bool: ...
    def setAmbientOcclusion(self: GeometryViewportSettings, enable: bool) -> None: ...
    def ambientOcclusion(self: GeometryViewportSettings) -> bool: ...
    def setAmbientOcclusionLevel(self: GeometryViewportSettings, level: int) -> None: ...
    def ambientOcclusionLevel(self: GeometryViewportSettings) -> int: ...
    def setShadowQuality(self: GeometryViewportSettings, viewportShadowQuality: EnumValue) -> None: ...
    def shadowQuality(self: GeometryViewportSettings) -> EnumValue: ...
    def setShadowSensitivity(self: GeometryViewportSettings, offset: Sequence[int]) -> None: ...
    def shadowSensitivity(self: GeometryViewportSettings) -> Tuple[int, ...]: ...
    def setShadowMapSize(self: GeometryViewportSettings, size: int) -> None: ...
    def shadowMapSize(self: GeometryViewportSettings) -> int: ...
    def setShadowMapSizeFromLight(self: GeometryViewportSettings, enable: bool) -> None: ...
    def shadowMapSizeFromLight(self: GeometryViewportSettings) -> bool: ...
    def setShadowMapMem(self: GeometryViewportSettings, mem_in_mb: int) -> None: ...
    def getShadowMapMem(self: GeometryViewportSettings) -> int: ...
    def setShadowMapTime(self: GeometryViewportSettings, time_in_sec: float) -> None: ...
    def getShadowMapTime(self: GeometryViewportSettings) -> int: ...
    def useReflections(self: GeometryViewportSettings, enable: bool) -> None: ...
    def usingReflections(self: GeometryViewportSettings) -> bool: ...
    def setHdrReflections(self: GeometryViewportSettings, hdr_reflect: bool) -> None: ...
    def hdrReflections(self: GeometryViewportSettings) -> bool: ...
    def setReflectMapSize(self: GeometryViewportSettings, size: int) -> None: ...
    def reflectMapSize(self: GeometryViewportSettings) -> int: ...
    def setMinReflectAmount(self: GeometryViewportSettings, min_reflect: float) -> None: ...
    def minReflectAmount(self: GeometryViewportSettings) -> float: ...
    def setFastInteractiveSampling(self: GeometryViewportSettings, fast: bool) -> None: ...
    def fastInteractiveSampling(self: GeometryViewportSettings) -> bool: ...
    def showMaterials(self: GeometryViewportSettings, enable: bool) -> None: ...
    def showingMaterials(self: GeometryViewportSettings) -> bool: ...
    def showGeometryColor(self: GeometryViewportSettings, enable: bool) -> None: ...
    def showingGeometryColor(self: GeometryViewportSettings) -> bool: ...
    def useTransparency(self: GeometryViewportSettings, enable: bool) -> None: ...
    def usingTransparency(self: GeometryViewportSettings) -> bool: ...
    def setTransparencyQuality(self: GeometryViewportSettings, viewportTransparency: EnumValue) -> None: ...
    def transparencyQuality(self: GeometryViewportSettings) -> EnumValue: ...
    def useDisplacement(self: GeometryViewportSettings, enable: bool) -> None: ...
    def usingDisplacement(self: GeometryViewportSettings) -> bool: ...
    def setDisplacementLevel(self: GeometryViewportSettings, level: float) -> None: ...
    def displacementLevel(self: GeometryViewportSettings) -> float: ...
    def setDefaultMaterialDiffuse(self: GeometryViewportSettings, tint: Color) -> None: ...
    def defaultMaterialDiffuse(self: GeometryViewportSettings) -> Color: ...
    def setDefaultMaterialSpecular(self: GeometryViewportSettings, tint: Color) -> None: ...
    def defaultMaterialSpecular(self: GeometryViewportSettings) -> Color: ...
    def setDefaultMaterialAmbient(self: GeometryViewportSettings) -> Color: ...
    def defaultMaterialAmbient(self: GeometryViewportSettings, tint) -> None: ...
    def setDefaultMaterialEmission(self: GeometryViewportSettings) -> Color: ...
    def defaultMaterialEmission(self: GeometryViewportSettings, tint) -> None: ...
    def setDefaultMaterialMatCapFile(self: GeometryViewportSettings, filepath: str) -> None: ...
    def getDefaultMaterialMatCapFile(self: GeometryViewportSettings) -> str: ...
    def setDefaultMaterialMatCapIntensity(self: GeometryViewportSettings, i: float) -> None: ...
    def getDefaultMaterialMatCapIntensity(self: GeometryViewportSettings) -> float: ...
    def setDefaultMaterialType(self: GeometryViewportSettings, viewportDefaultMaterial: EnumValue) -> None: ...
    def getDefaultMaterialType(self: GeometryViewportSettings) -> EnumValue: ...
    def setUniformFog(self: GeometryViewportSettings, enable: bool) -> None: ...
    def getUniformFog(self: GeometryViewportSettings) -> bool: ...
    def setUniformFogColor(self: GeometryViewportSettings, color: Sequence[float]) -> None: ...
    def getUniformFogColor(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setUniformFogDensity(self: GeometryViewportSettings, density: float) -> None: ...
    def getUniformFogDensity(self: GeometryViewportSettings) -> float: ...
    def setUniformFogOpacity(self: GeometryViewportSettings, opacity: float) -> None: ...
    def getUniformFogOpacity(self: GeometryViewportSettings) -> float: ...
    def setUniformFogDepthRange(self: GeometryViewportSettings, range: Sequence[float]) -> None: ...
    def getUniformFogDepthRange(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setUniformFogHeightMode(self: GeometryViewportSettings, viewportFogHeightMode: EnumValue) -> None: ...
    def getUniformFogHeightMode(self: GeometryViewportSettings) -> EnumValue: ...
    def setUniformFogHeight(self: GeometryViewportSettings, h: float) -> None: ...
    def getUniformFogHeight(self: GeometryViewportSettings) -> float: ...
    def setUniformFogHeightFalloff(self: GeometryViewportSettings, h: float) -> None: ...
    def getUniformFogHeightFalloff(self: GeometryViewportSettings) -> float: ...
    def setUniformFogDepthClip(self: GeometryViewportSettings, depth: float) -> None: ...
    def getUniformFogDepthClip(self: GeometryViewportSettings) -> float: ...
    def setUniformFogUseSun(self: GeometryViewportSettings, enable: bool) -> None: ...
    def getUniformFogUseSun(self: GeometryViewportSettings) -> bool: ...
    def setUniformFogSunBloom(self: GeometryViewportSettings, bloom: float) -> None: ...
    def getUniformFogSunBloom(self: GeometryViewportSettings) -> float: ...
    def setUniformFogSunIntensity(self: GeometryViewportSettings, intensity: float) -> None: ...
    def getUniformFogSunIntensity(self: GeometryViewportSettings) -> float: ...
    def setVolumeFog(self: GeometryViewportSettings, enable: bool) -> None: ...
    def getVolumeFog(self: GeometryViewportSettings) -> bool: ...
    def setVolumeFogColor(self: GeometryViewportSettings, color: Sequence[float]) -> None: ...
    def getVolumeFogColor(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setVolumeFogDensity(self: GeometryViewportSettings, density: float) -> None: ...
    def getVolumeFogDensity(self: GeometryViewportSettings) -> float: ...
    def setVolumeFogOpacity(self: GeometryViewportSettings, opacity: float) -> None: ...
    def getVolumeFogOpacity(self: GeometryViewportSettings) -> float: ...
    def setVolumeFogDepthRange(self: GeometryViewportSettings, range: Sequence[float]) -> None: ...
    def getVolumeFogDepthRange(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setVolumeFogHeightMode(self: GeometryViewportSettings, viewportFogHeightMode: EnumValue) -> None: ...
    def getVolumeFogHeightMode(self: GeometryViewportSettings) -> EnumValue: ...
    def setVolumeFogHeight(self: GeometryViewportSettings, h: float) -> None: ...
    def getVolumeFogHeight(self: GeometryViewportSettings) -> float: ...
    def setVolumeFogHeightFalloff(self: GeometryViewportSettings, h: float) -> None: ...
    def getVolumeFogHeightFalloff(self: GeometryViewportSettings) -> float: ...
    def setVolumeFogQuality(self: GeometryViewportSettings, viewportFogQuality: EnumValue) -> None: ...
    def getVolumeFogQuality(self: GeometryViewportSettings) -> EnumValue: ...
    def setVolumeFogLightIntensity(self: GeometryViewportSettings, h: float) -> None: ...
    def getVolumeFogLightIntensity(self: GeometryViewportSettings) -> float: ...
    def setVolumeFogLightScattering(self: GeometryViewportSettings, scatter: Sequence[float]) -> None: ...
    def getVolumeFogLightScattering(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setBloom(self: GeometryViewportSettings, enable: bool) -> None: ...
    def getBloom(self: GeometryViewportSettings) -> bool: ...
    def setBloomScale(self: GeometryViewportSettings, scale: float) -> None: ...
    def getBloomScale(self: GeometryViewportSettings) -> float: ...
    def setBloomIntensity(self: GeometryViewportSettings, i: float) -> None: ...
    def getBloomIntensity(self: GeometryViewportSettings) -> float: ...
    def setBloomThreshold(self: GeometryViewportSettings, i: float) -> None: ...
    def getBloomThreshold(self: GeometryViewportSettings) -> float: ...
    def setFogNode(self: GeometryViewportSettings, node: Node) -> None: ...
    def getFogNode(self: GeometryViewportSettings) -> Node: ...
    def setDisplayOrthoGrid(self: GeometryViewportSettings, enable: bool) -> None: ...
    def displayOrthoGrid(self: GeometryViewportSettings) -> bool: ...
    def setOrthoGridOffset(self: GeometryViewportSettings, offset: Sequence[float]) -> None: ...
    def orthoGridOffset(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setOrthoGridSpacing(self: GeometryViewportSettings, offset: Sequence[float]) -> None: ...
    def orthoGridSpacing(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setOrthoGridRuler(self: GeometryViewportSettings, offset: Sequence[int]) -> None: ...
    def orthoGridRuler(self: GeometryViewportSettings) -> Tuple[int, ...]: ...
    def setOrthoRuler(self: GeometryViewportSettings, viewportGridRuler: EnumValue) -> None: ...
    def orthoRuler(self: GeometryViewportSettings) -> EnumValue: ...
    def setUVReferenceGrid(self: GeometryViewportSettings, enable: bool) -> None: ...
    def uvReferenceGrid(self: GeometryViewportSettings) -> bool: ...
    def setUVDisplayGridOverImage(self: GeometryViewportSettings, enable: bool) -> Any: ...
    def uvReferenceGridOverImage(self: GeometryViewportSettings) -> Any: ...
    def setUVGridPixelSpacing(self: GeometryViewportSettings, offset: Sequence[int]) -> None: ...
    def uvGridPixelSpacing(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setUVGridPixelOffset(self: GeometryViewportSettings, offset: Sequence[float]) -> None: ...
    def uvGridPixelOffset(self: GeometryViewportSettings) -> Tuple[float, ...]: ...
    def setClampUVGridToBackground(self: GeometryViewportSettings, enable: bool) -> None: ...
    def clampUVGridToBackground(self: GeometryViewportSettings) -> bool: ...
    def setDisplayUVTileBoundaries(self: GeometryViewportSettings, enable: bool) -> None: ...
    def displayUVTileBoundaries(self: GeometryViewportSettings) -> bool: ...
    def setColorScheme(self: GeometryViewportSettings, viewportColorScheme: EnumValue) -> None: ...
    def colorScheme(self: GeometryViewportSettings) -> EnumValue: ...
    def colorFromName(self: GeometryViewportSettings, colorName: str) -> Color: ...
    def alphaFromName(self: GeometryViewportSettings, colorName: str) -> float: ...
    def backgroundImage(self: GeometryViewportSettings, viewportBGImageView: EnumValue, layer: int) -> GeometryViewportBackground: ...
    def setDisplayBackgroundImage(self: GeometryViewportSettings, enable: bool) -> None: ...
    def displayBackgroundImage(self: GeometryViewportSettings) -> bool: ...
    def setDisplayEnvironmentBackgroundImage(self: GeometryViewportSettings, enable: bool) -> None: ...
    def displayEnvironmentBackgroundImage(self: GeometryViewportSettings) -> bool: ...
    def setFilterBackgroundImage(self: GeometryViewportSettings, enable: bool) -> None: ...
    def filterBackgroundImage(self: GeometryViewportSettings) -> bool: ...
    def setApplyZoomToBackgroundImage(self: GeometryViewportSettings, enable: bool) -> None: ...
    def applyZoomToBackgroundImage(self: GeometryViewportSettings) -> bool: ...
    def setBackgroundImageQuality(self: GeometryViewportSettings, quality: int) -> None: ...
    def backgroundImageQuality(self: GeometryViewportSettings) -> int: ...
    def setDisplayTextures(self: GeometryViewportSettings, enable: bool) -> None: ...
    def displayTextures(self: GeometryViewportSettings) -> bool: ...
    def setDisplayTextureLayers(self: GeometryViewportSettings, enable: bool) -> None: ...
    def displayTextureLayers(self: GeometryViewportSettings) -> bool: ...
    def setDisplayProjectedTextures(self: GeometryViewportSettings, enable: bool) -> None: ...
    def displayProjectedTextures(self: GeometryViewportSettings) -> bool: ...
    def setTextureMipmapping(self: GeometryViewportSettings, enable: bool) -> None: ...
    def textureMipmapping(self: GeometryViewportSettings) -> bool: ...
    def setTextureAnisotropicFilter(self: GeometryViewportSettings, num_samples: int) -> None: ...
    def textureAnisotropicFilter(self: GeometryViewportSettings) -> int: ...
    def setTextureCacheSize(self: GeometryViewportSettings, size_in_mb: int) -> None: ...
    def textureCacheSize(self: GeometryViewportSettings) -> int: ...
    def setTextureMaxMemory(self: GeometryViewportSettings, size_in_mb: int) -> None: ...
    def textureMaxMemory(self: GeometryViewportSettings) -> int: ...
    def setTextureAutoReduce(self: GeometryViewportSettings, enable: bool) -> None: ...
    def textureAutoReduce(self: GeometryViewportSettings) -> bool: ...
    def setTextureAutoReduce2D(self: GeometryViewportSettings, enable: bool) -> None: ...
    def textureAutoReduce2D(self: GeometryViewportSettings) -> bool: ...
    def setTextureAutoReduce3D(self: GeometryViewportSettings, enable: bool) -> None: ...
    def textureAutoReduce3D(self: GeometryViewportSettings) -> bool: ...
    def setTextureResLimit2D(self: GeometryViewportSettings, enable: bool) -> None: ...
    def textureResLimit2D(self: GeometryViewportSettings) -> bool: ...
    def setTextureMaxRes2D(self: GeometryViewportSettings, res: Sequence[int]) -> None: ...
    def textureMaxRes2D(self: GeometryViewportSettings) -> Tuple[int, int]: ...
    def setTextureBitDepthLimit2D(self: GeometryViewportSettings, viewportTextureDepth: EnumValue) -> None: ...
    def textureBitDepthLimit2D(self: GeometryViewportSettings) -> EnumValue: ...
    def setTextureScale2D(self: GeometryViewportSettings, scale: float) -> None: ...
    def textureScale2D(self: GeometryViewportSettings) -> float: ...
    def setTextureResLimit3D(self: GeometryViewportSettings, enable: bool) -> None: ...
    def textureResLimit3D(self: GeometryViewportSettings) -> bool: ...
    def setTexture2DSettingsFor3D(self: GeometryViewportSettings, enable: bool) -> None: ...
    def texture2DSettingsFor3D(self: GeometryViewportSettings) -> bool: ...
    def setTextureMaxRes3D(self: GeometryViewportSettings, res: Sequence[int]) -> None: ...
    def textureMaxRes3D(self: GeometryViewportSettings) -> Tuple[int, int, int]: ...
    def setTextureBitDepthLimit3D(self: GeometryViewportSettings, viewportTextureDepth: EnumValue) -> None: ...
    def textureBitDepthLimit3D(self: GeometryViewportSettings) -> EnumValue: ...
    def setTextureScale3D(self: GeometryViewportSettings, scale: float) -> None: ...
    def textureScale3D(self: GeometryViewportSettings) -> float: ...
    def useMaterialStylesheets(self: GeometryViewportSettings, enable: bool) -> None: ...
    def usingMaterialStylesheets(self: GeometryViewportSettings) -> bool: ...
    def usePerPrimStylesheets(self: GeometryViewportSettings, enable: bool) -> None: ...
    def usingPerPrimStylesheets(self: GeometryViewportSettings) -> bool: ...
    def usePackedStylesheets(self: GeometryViewportSettings, enable: bool) -> None: ...
    def usingPackedStylesheets(self: GeometryViewportSettings) -> bool: ...
    def useMaterialOverrides(self: GeometryViewportSettings, enable: bool) -> None: ...
    def usingMaterialOverrides(self: GeometryViewportSettings) -> bool: ...
    def setSingleObjectMaterialLimit(self: GeometryViewportSettings, num_materials: int) -> None: ...
    def singleObjectMaterialLimit(self: GeometryViewportSettings) -> int: ...
    def setMaterialUpdate(self: GeometryViewportSettings, viewportMaterialUpdate: EnumValue) -> None: ...
    def materialUpdate(self: GeometryViewportSettings) -> EnumValue: ...
    def setInteractiveMaterialUpdate(self: GeometryViewportSettings, enable: bool) -> None: ...
    def interactiveMaterialUpdate(self: GeometryViewportSettings) -> bool: ...
    def updateMaterials(self: GeometryViewportSettings) -> None: ...
    def setVisibleObjects(self: GeometryViewportSettings, uv: str) -> None: ...
    def visibleObjects(self: GeometryViewportSettings) -> str: ...
    def setRemoveBackfaces(self: GeometryViewportSettings, enable: bool) -> None: ...
    def removeBackfaces(self: GeometryViewportSettings) -> bool: ...
    def setHullsOnly(self: GeometryViewportSettings, enable: bool) -> None: ...
    def hullsOnly(self: GeometryViewportSettings) -> bool: ...
    def setDistanceBasedPackedCulling(self: GeometryViewportSettings, enable: bool) -> None: ...
    def distanceBasedPackedCulling(self: GeometryViewportSettings) -> bool: ...
    def setScenePolygonLimit(self: GeometryViewportSettings, millions_of_polygons: int) -> None: ...
    def scenePolygonLimit(self: GeometryViewportSettings) -> int: ...
    def setPackedBoundingBoxMode(self: GeometryViewportSettings, viewportPackedBoxMode: EnumValue) -> None: ...
    def packedBoundingBoxMode(self: GeometryViewportSettings) -> EnumValue: ...
    def setOptimizeGeometry(self: GeometryViewportSettings, enable: bool) -> None: ...
    def optimizeGeometry(self: GeometryViewportSettings) -> bool: ...
    def setAgentLODReduction(self: GeometryViewportSettings, enable: bool) -> None: ...
    def agentLODReduction(self: GeometryViewportSettings) -> bool: ...
    def setAgentLODReductionBias(self: GeometryViewportSettings, reduce_bias: int) -> None: ...
    def agentLODReductionBias(self: GeometryViewportSettings) -> int: ...
    def setAgentShapePointCutoff(self: GeometryViewportSettings, num_points: int) -> None: ...
    def agentShapePointCutoff(self: GeometryViewportSettings) -> int: ...
    def setMaxLODLevels(self: GeometryViewportSettings, num_levels: int) -> None: ...
    def maxLODLevels(self: GeometryViewportSettings) -> int: ...
    def setBaseLODLevel(self: GeometryViewportSettings, base_level: int) -> None: ...
    def baseLODLevel(self: GeometryViewportSettings) -> int: ...
    def setSingleBoneDeform(self: GeometryViewportSettings, viewportAgentBoneDeform: EnumValue) -> None: ...
    def singleBoneDeform(self: GeometryViewportSettings) -> EnumValue: ...
    def setAgentWireframe(self: GeometryViewportSettings, viewportAgentWireframe: EnumValue) -> None: ...
    def agentWireframe(self: GeometryViewportSettings) -> EnumValue: ...
    def setAgentBlendShapes(self: GeometryViewportSettings, enable: bool) -> None: ...
    def agentBlendShapes(self: GeometryViewportSettings) -> bool: ...

    def __repr__(self: GeometryViewportSettings) -> Any: ...  ## Added by typing stub update
class GeometryViewportBackground:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def setImageFile(self: GeometryViewportBackground, file_path: str) -> None: ...
    def imageFile(self: GeometryViewportBackground) -> str: ...
    def setImageCOP(self: GeometryViewportBackground, op_path: str) -> None: ...
    def imageCOP(self: GeometryViewportBackground) -> str: ...
    def sourceFromCOP(self: GeometryViewportBackground, use_cop: bool) -> None: ...
    def isCOPSource(self: GeometryViewportBackground) -> bool: ...
    def isFileSource(self: GeometryViewportBackground) -> bool: ...
    def setImageSource(self: GeometryViewportBackground, file_or_op_path: str) -> None: ...
    def imageSource(self: GeometryViewportBackground) -> str: ...
    def setEnvironmentMap(self: GeometryViewportBackground, enable: bool) -> None: ...
    def isEnvironmentMap(self: GeometryViewportBackground) -> bool: ...
    def setAutoPlace(self: GeometryViewportBackground, enable: bool) -> None: ...
    def autoPlace(self: GeometryViewportBackground) -> bool: ...
    def setImageOffset(self: GeometryViewportBackground, offset: Sequence[float]) -> None: ...
    def imageOffset(self: GeometryViewportBackground) -> Tuple[float, ...]: ...
    def setImageScale(self: GeometryViewportBackground, scale: Sequence[float]) -> None: ...
    def imageScale(self: GeometryViewportBackground) -> Tuple[float, ...]: ...
    def setBrightness(self: GeometryViewportBackground, intensity: float) -> None: ...
    def brightness(self: GeometryViewportBackground) -> float: ...

    def __repr__(self: GeometryViewportBackground) -> Any: ...  ## Added by typing stub update
class _GUDetailHandle:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isFrozen(self) -> Any: ...
    def isReadOnly(self) -> Any: ...
    def destroy(self) -> Any: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self) -> Any: ...  ## Added by typing stub update
class Handle:
    thisown: Any = ...
    def __init__(self: Handle, scene_viewer: SceneViewer, name: str) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: Handle) -> None: ...
    def type(self: Handle) -> None: ...
    def show(self: Handle, value: bool) -> None: ...
    def update(self: Handle, immediate: bool) -> None: ...
    def visible(self: Handle) -> None: ...
    def enableParms(self: Handle, parm_names: Sequence[str]) -> None: ...
    def disableParms(self: Handle, parm_names: Sequence[str]) -> None: ...
    def applySettings(self: Handle, settings: str) -> None: ...

    def __repr__(self: Handle) -> Any: ...  ## Added by typing stub update
class hda:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def installFile(file_path: str, oplibraries_file: Optional[str]=None, change_oplibraries_file: bool=True, force_use_assets: bool=False) -> None: ...
    @staticmethod
    def uninstallFile(file_path: str, oplibraries_file: Optional[str]=None, change_oplibraries_file: bool=True) -> None: ...
    @staticmethod
    def reloadFile(file_path: str) -> None: ...
    @staticmethod
    def reloadAllFiles(rescan: bool=True) -> None: ...
    @staticmethod
    def reloadNamespaceOrder() -> None: ...
    @staticmethod
    def expandToDirectory(file_path: str, directory_path: str) -> None: ...
    @staticmethod
    def collapseFromDirectory(file_path: str, directory_path: str) -> None: ...
    @staticmethod
    def loadedFiles() -> Tuple[str, ...]: ...
    @staticmethod
    def renameSource(oplibraries_file: str, source_name: Optional[str]=None) -> None: ...
    @staticmethod
    def definitionsInFile(file_path: str) -> Tuple[HDADefinition, ...]: ...
    @staticmethod
    def componentsFromFullNodeTypeName(node_type_name: str) -> Tuple[str, ...]: ...
    @staticmethod
    def fullNodeTypeNameFromComponents(scope_node_type: str, name_space: str, name: str, version: str) -> str: ...
    @staticmethod
    def changeCurrentStoreUser(new_user: str) -> Any: ...
    @staticmethod
    def safeguardHDAs() -> bool: ...
    @staticmethod
    def setSafeguardHDAs(on: bool) -> None: ...
    @staticmethod
    def removeAllEventCallbacks() -> None: ...
    @staticmethod
    def addEventCallback(event_types: Sequence[EnumValue], callback) -> None: ...
    @staticmethod
    def removeEventCallback(event_types: Sequence[EnumValue], callback) -> None: ...
    @staticmethod
    def eventCallbacks() -> Any: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def reloadHDAModule(hda_module: HDAModule) -> None: ...  ## Added by typing stub update
class HDADefinition:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: HDADefinition) -> Any: ...
    def nodeType(self: HDADefinition) -> NodeType: ...
    def nodeTypeCategory(self: HDADefinition) -> NodeTypeCategory: ...
    def nodeTypeName(self: HDADefinition) -> str: ...
    def libraryFilePath(self: HDADefinition) -> str: ...
    def embeddedHelp(self: HDADefinition) -> str: ...
    def isInstalled(self: HDADefinition) -> bool: ...
    def installed(self: HDADefinition) -> Any: ...
    def isCurrent(self: HDADefinition) -> bool: ...
    def current(self: HDADefinition) -> Any: ...
    def isPreferred(self: HDADefinition) -> bool: ...
    def preferred(self: HDADefinition) -> Any: ...
    def setIsPreferred(self: HDADefinition, preferred: bool) -> None: ...
    def setPreferred(self: HDADefinition, preferred: bool) -> Any: ...
    def enableCreateBackups(self: HDADefinition, create_backups: bool) -> None: ...
    def isCreateBackupsEnabled(self: HDADefinition) -> bool: ...
    def sections(self: HDADefinition) -> Dict[str, HDASection]: ...
    def hasSection(self: HDADefinition, name: str) -> bool: ...
    def addSection(self: HDADefinition, name: str, contents: str="Any", compression_type: EnumValue=compressionType.NoCompression) -> HDASection: ...
    def removeSection(self: HDADefinition, name: str) -> None: ...
    def description(self: HDADefinition) -> str: ...
    def setDescription(self: HDADefinition, description: str) -> None: ...
    def icon(self: HDADefinition) -> str: ...
    def setIcon(self: HDADefinition, icon: str) -> None: ...
    def minNumInputs(self: HDADefinition) -> int: ...
    def setMinNumInputs(self: HDADefinition, min_num_inputs: int) -> None: ...
    def maxNumInputs(self: HDADefinition) -> int: ...
    def setMaxNumInputs(self: HDADefinition, max_num_inputs: int) -> None: ...
    def maxNumOutputs(self: HDADefinition) -> int: ...
    def setMaxNumOutputs(self: HDADefinition, max_num_outputs: int) -> None: ...
    def extraInfo(self: HDADefinition) -> str: ...
    def setExtraInfo(self: HDADefinition, extra_info: str) -> None: ...
    def userInfo(self: HDADefinition) -> str: ...
    def setUserInfo(self: HDADefinition, extra_info: str) -> None: ...
    def hideDefaultParameters(self: HDADefinition) -> bool: ...
    def representativeNodePath(self: HDADefinition) -> str: ...
    def comment(self: HDADefinition) -> Any: ...
    def setComment(self: HDADefinition, comment: str) -> Any: ...
    def version(self: HDADefinition) -> Any: ...
    def setVersion(self: HDADefinition, version: str) -> Any: ...
    def modificationTime(self: HDADefinition) -> int: ...
    def setModificationTime(self: HDADefinition, time: int=-1) -> None: ...
    def options(self: HDADefinition) -> HDAOptions: ...
    def setOptions(self: HDADefinition, options: HDAOptions) -> None: ...
    def updateFromNode(self: HDADefinition, node: Node) -> None: ...
    def save(self: HDADefinition, file_name: str, template_node: Optional[Node]=None, options: Optional[HDAOptions]=None, black_box: bool=False, create_backup: bool=True) -> None: ...
    def copyToHDAFile(self: HDADefinition, file_name: str, new_name: Optional[str]=None, new_menu_name: Optional[str]=None) -> None: ...
    def destroy(self: HDADefinition) -> None: ...
    def parmTemplateGroup(self: HDADefinition) -> ParmTemplateGroup: ...
    def setParmTemplateGroup(self: HDADefinition, parm_template_group: ParmTemplateGroup, rename_conflicting_parms: bool=False) -> None: ...
    def setExtraFileOption(self: HDADefinition, name: str, value, type_hint: EnumValue=fieldType.NoSuchField) -> None: ...
    def removeExtraFileOption(self: HDADefinition, name: str) -> None: ...
    def compileCodeSection(self: HDADefinition, source_section: str, destination_section: str) -> None: ...
    def extraFileOptions(self: HDADefinition) -> Dict[str, Union[bool, int, float, str]]: ...

    def __repr__(self: HDADefinition) -> Any: ...  ## Added by typing stub update
class HDAModule:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getattr__(self: HDAModule, name: str) -> Any: ...

    def __repr__(self: HDAModule) -> Any: ...  ## Added by typing stub update
    def _reload(self: HDAModule) -> Any: ...  ## Added by typing stub update
class HDAOptions:
    thisown: Any = ...
    def __init__(self) -> None: ...
    def __hash__(self: HDAOptions) -> Any: ...
    def checkForExternalLinks(self: HDAOptions) -> bool: ...
    def setCheckForExternalLinks(self: HDAOptions, check_for_external_links: bool) -> None: ...
    def compressContents(self: HDAOptions) -> bool: ...
    def setCompressContents(self: HDAOptions, compress_contents: bool) -> None: ...
    def compressionType(self: HDAOptions) -> Any: ...
    def setCompressionType(self: HDAOptions, type: int) -> Any: ...
    def forbidOutsideParms(self: HDAOptions) -> bool: ...
    def setForbidOutsideParms(self: HDAOptions, forbid_outside_parms: bool) -> None: ...
    def lockContents(self: HDAOptions) -> bool: ...
    def setLockContents(self: HDAOptions, lock_contents: bool) -> None: ...
    def makeInitialParmsDefaults(self: HDAOptions) -> bool: ...
    def setMakeInitialParmsDefaults(self: HDAOptions, make_initial_parms_defaults: bool) -> None: ...
    def parametersFromVexCode(self: HDAOptions) -> bool: ...
    def setParametersFromVexCode(self: HDAOptions, parameters_from_vex_code: bool) -> None: ...
    def prefixDroppedParmLabels(self: HDAOptions) -> Any: ...
    def setPrefixDroppedParmLabels(self: HDAOptions, prefix_dropped_parm_labels: bool) -> None: ...
    def prefixDroppedParmNames(self: HDAOptions) -> bool: ...
    def setPrefixDroppedParmNames(self: HDAOptions, prefix_dropped_parm_names: bool) -> None: ...
    def saveInitialParmsAndContents(self: HDAOptions) -> bool: ...
    def setSaveInitialParmsAndContents(self: HDAOptions, save_initial_parms_and_contents: bool) -> None: ...
    def unlockNewInstances(self: HDAOptions) -> bool: ...
    def setUnlockNewInstances(self: HDAOptions, unlock_new_instances: bool) -> None: ...
    def saveSpareParms(self: HDAOptions) -> bool: ...
    def setSaveSpareParms(self: HDAOptions, save_spare_parms: bool) -> None: ...
    def saveCachedCode(self: HDAOptions) -> bool: ...
    def setSaveCachedCode(self: HDAOptions, save_cached_code: bool) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: HDAOptions) -> Any: ...  ## Added by typing stub update
class HDASection:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: HDASection) -> Any: ...
    def definition(self: HDASection) -> HDADefinition: ...
    def name(self: HDASection) -> str: ...
    def contents(self: HDASection, compressionType: EnumValue=compressionType.NoCompression) -> str: ...
    def binaryContents(self: HDASection, compressionType: EnumValue=compressionType.NoCompression) -> str: ...
    def setContents(self: HDASection, contents: str, compressionType: EnumValue=compressionType.NoCompression) -> None: ...
    def size(self: HDASection) -> int: ...
    def modificationTime(self: HDASection) -> int: ...
    def destroy(self: HDASection) -> None: ...

    def __repr__(self: HDASection) -> Any: ...  ## Added by typing stub update
class HDAViewerHandleModule:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getattr__(self: HDAViewerHandleModule, name: str) -> Any: ...

    def __repr__(self: HDAViewerHandleModule) -> Any: ...  ## Added by typing stub update
    def _reload(self: HDAViewerHandleModule) -> Any: ...  ## Added by typing stub update
class HDAViewerStateModule:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __getattr__(self: HDAViewerStateModule, name: str) -> Any: ...

    def __repr__(self: HDAViewerStateModule) -> Any: ...  ## Added by typing stub update
    def _reload(self: HDAViewerStateModule) -> Any: ...  ## Added by typing stub update
class HelpBrowser(PaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def displayHelp(self: HelpBrowser, node_type: NodeType) -> None: ...
    def displayHelpPath(self: HelpBrowser, help_path: str) -> None: ...
    def displayHelpPyPanel(self: HelpBrowser, interface_name: str) -> None: ...
    def homePage(self: HelpBrowser) -> str: ...
    def setHomePage(self: HelpBrowser, home_page: str) -> None: ...
    def url(self: HelpBrowser) -> str: ...
    def setUrl(self: HelpBrowser, url: str) -> None: ...
    def showUI(self: HelpBrowser, show: bool) -> None: ...

    def __repr__(self: HelpBrowser) -> Any: ...  ## Added by typing stub update
class hipFile:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def save(file_name: Optional[str]=None, save_to_recent_files: bool=True) -> None: ...
    @staticmethod
    def saveAndIncrementFileName() -> None: ...
    @staticmethod
    def saveAndBackup() -> str: ...
    @staticmethod
    def saveAsBackup() -> str: ...
    @staticmethod
    def basename() -> str: ...
    @staticmethod
    def name() -> str: ...
    @staticmethod
    def path() -> str: ...
    @staticmethod
    def setName(file_name: str) -> None: ...
    @staticmethod
    def saveMode() -> EnumValue: ...
    @staticmethod
    def setSaveMode(save_mode: EnumValue) -> None: ...
    @staticmethod
    def clear(suppress_save_prompt: bool=False) -> None: ...
    @staticmethod
    def load(file_name: str, suppress_save_prompt: bool=False, ignore_load_warnings: bool=False) -> None: ...
    @staticmethod
    def merge(file_name: str, node_pattern: str="Any", overwrite_on_conflict: bool=False, ignore_load_warnings: bool=False) -> None: ...
    @staticmethod
    def collisionNodesIfMerged(file_name: str, node_pattern: str="Any") -> Tuple[Node, ...]: ...
    @staticmethod
    def isLoadingHipFile() -> bool: ...
    @staticmethod
    def isShuttingDown() -> bool: ...
    @staticmethod
    def isNewFile() -> bool: ...
    @staticmethod
    def hasUnsavedChanges() -> bool: ...
    @staticmethod
    def groupColorTable() -> Dict[str, Color]: ...
    @staticmethod
    def setGroupColorTable(color_table: Dict[str, Color]) -> None: ...
    @staticmethod
    def importFBX(file_name: str, suppress_save_prompt: bool=False, merge_into_scene: bool=True, import_cameras: bool=True, import_joints_and_skin: bool=True, import_geometry: bool=True, import_lights: bool=True, import_animation: bool=True, import_materials: bool=True, resample_animation: bool=False, resample_interval: float=1.0, override_framerate: bool=False, framerate: int=-1, hide_joints_attached_to_skin: bool=True, convert_joints_to_zyx_rotation_order: bool=False, material_mode: EnumValue=fbxMaterialMode.FBXShaderNodes, compatibility_mode: EnumValue=fbxCompatibilityMode.Maya, single_precision_vertex_caches: bool=False, triangulate_nurbs: bool=False, triangulate_patches: bool=False, import_global_ambient_light: bool=False, import_blend_deformers_as_blend_sops: bool=False, segment_scale_already_baked_in: bool=True, convert_file_paths_to_relative: bool=True, unlock_geometry: bool=False, unlock_deformations: bool=False, import_nulls_as_subnets: bool=False, import_into_object_subnet: bool=True, convert_into_y_up_coordinate_system: bool=False, create_sibling_bones: bool=True, override_scene_frame_range: bool=False, convert_units: bool=False) -> Tuple[ObjNode, str]: ...
    @staticmethod
    def addEventCallback(callback) -> None: ...
    @staticmethod
    def removeEventCallback(callback) -> None: ...
    @staticmethod
    def clearEventCallbacks() -> None: ...
    @staticmethod
    def eventCallbacks() -> Tuple[Callable, ...]: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class hmath:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def identityTransform() -> Matrix4: ...
    @staticmethod
    @overload
    def buildTranslate(x: float, y: float, z: float) -> Matrix4: ...
    @staticmethod
    @overload
    def buildTranslate(components: Union[Sequence[float], Vector3]) -> Matrix4: ...
    @staticmethod
    @overload
    def buildScale(sx: float, sy: float, sz: float) -> Matrix4: ...
    @staticmethod
    @overload
    def buildScale(components: Union[Sequence[float], Vector3]) -> Matrix4: ...
    @staticmethod
    @overload
    def buildShear(shearx: float, sheary: float, shearz: float) -> Matrix4: ...
    @staticmethod
    @overload
    def buildShear(components: Union[Sequence[float], Vector3]) -> Matrix4: ...
    @staticmethod
    @overload
    def buildRotate(rx: float, ry: float, rz: float, order: str="xyz") -> Matrix4: ...
    @staticmethod
    @overload
    def buildRotate(components: Union[Sequence[float], Vector3], order: str="xyz") -> Matrix4: ...
    @staticmethod
    def buildRotateAboutAxis(axis: Sequence[float], angle_in_deg: float) -> Matrix4: ...
    @staticmethod
    def buildRotateZToAxis(axis: Sequence[float]) -> Matrix4: ...
    @staticmethod
    def buildTransform(values_dict: Dict[str, Union[Vector3, Sequence[float]]], transform_order: str="srt", rotate_order: str="xyz") -> Matrix4: ...
    @staticmethod
    def degToRad(degrees: float) -> float: ...
    @staticmethod
    def radToDeg(radians: float) -> float: ...
    @staticmethod
    def noise1d(pos: Sequence[float]) -> float: ...
    @staticmethod
    def noise3d(pos: Sequence[float]) -> Vector3: ...
    @staticmethod
    def fit(value: float, old_min: float, old_max: float, new_min: float, new_max: float) -> float: ...
    @staticmethod
    def fit01(value: float, new_min: float, new_max: float) -> float: ...
    @staticmethod
    def fit10(value: float, new_min: float, new_max: float) -> float: ...
    @staticmethod
    def fit11(value: float, new_min: float, new_max: float) -> float: ...
    @staticmethod
    def sign(value: float) -> int: ...
    @staticmethod
    def clamp(value: float, min: float, max: float) -> float: ...
    @staticmethod
    def smooth(value: float, min: float, max: float) -> float: ...
    @staticmethod
    def wrap(value: float, min: float, max: float) -> None: ...
    @staticmethod
    def rand(seed: float) -> float: ...
    @staticmethod
    def orient2d(pa: Sequence[float], pb: Sequence[float], point: Sequence[float]) -> float: ...
    @staticmethod
    def orient3d(pa: Sequence[float], pb: Sequence[float], pc: Sequence[float], point: Sequence[float]) -> float: ...
    @staticmethod
    def inCircle(pa: Sequence[float], pb: Sequence[float], pc: Sequence[float], point: Sequence[float]) -> float: ...
    @staticmethod
    def inSphere(pa: Sequence[float], pb: Sequence[float], pc: Sequence[float], pd: Sequence[float], point: Sequence[float]) -> float: ...
    @staticmethod
    def intersectPlane(plane_point: Vector3, plane_normal: Vector3, line_origin: Vector3, line_dir: Vector3) -> Vector3: ...
    @staticmethod
    def combineLocalTransform(local: Matrix4, world: Matrix4, parent_local: Optional[Matrix4]=None, mode: EnumValue=scaleInheritanceMode.Default) -> Matrix4: ...
    @staticmethod
    def extractLocalTransform(world: Matrix4, parent_world: Matrix4, parent_local: Matrix4, mode: EnumValue=scaleInheritanceMode.Default, effective_local: Optional[Matrix4]=None) -> Matrix4: ...
    @staticmethod
    def slerpTransforms(xforms: Sequence[Matrix4], input_weights: Sequence[float], normalize_weights: bool, slerp_method: int, slerp_flip_method: int) -> Matrix4: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _buildTransformTRS(*args: Vector3) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _buildTransformTRSS(*args: Vector3) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _buildTransformTR(*args: Vector3) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _buildTransform(*args: Vector3) -> Any: ...  ## Added by typing stub update
class hotkeys:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def assignments(hotkey_symbol: str) -> List[str]: ...
    @staticmethod
    def hotkeyDescription(hotkey_symbol: str) -> str: ...
    @staticmethod
    def hotkeyLabel(hotkey_symbol: str) -> str: ...
    @staticmethod
    def isKeyMatch(key: str, hotkey_symbol: str) -> bool: ...
    @staticmethod
    def isKeycodeMatch(key_code: int, hotkey_symbol: str) -> bool: ...
    @staticmethod
    def findConflicts(symbol: str, key: str) -> Tuple[str, ...]: ...
    @staticmethod
    def changeIndex() -> int: ...
    @staticmethod
    def commandsInContext(context: str) -> Tuple[dict, ...]: ...
    @staticmethod
    def contextsInContext(context: str) -> Tuple[dict, ...]: ...
    @staticmethod
    def addCommand(hotkey_symbol: str, label: str, description: str, assignments: Sequence[str]) -> bool: ...
    @staticmethod
    def addContext(hotkey_symbol: str, label: str, long_description: str) -> bool: ...
    @staticmethod
    def removeHotkeySymbol(hotkey_symbol: str) -> None: ...
    @staticmethod
    def hotkeySymbol(context_label_path: str, command_label: Optional[str]=None) -> Optional[str]: ...
    @staticmethod
    def clearAssignments(hotkey_symbol: str) -> bool: ...
    @staticmethod
    def addAssignment(hotkey_symbol: str, key: str) -> bool: ...
    @staticmethod
    def removeAssignment(hotkey_symbol: str, key: str) -> bool: ...
    @staticmethod
    def availableKeycodes(hotkey_symbol: str, modifiers: int=0) -> Tuple[int, ...]: ...
    @staticmethod
    def keycodeToString(keycode: int, modifiers: int=0) -> str: ...
    @staticmethod
    def stringToKeycode(key: str, modifiers: int=0) -> int: ...
    @staticmethod
    def revertToDefaults(hotkey_symbol: str, one_level_only: bool) -> None: ...
    @staticmethod
    def saveOverrides() -> bool: ...
    @staticmethod
    def saveAsKeymap(name: str, path: Optional[str]=None) -> bool: ...
    @staticmethod
    def loadKeymap(name: str, path: Optional[str]=None) -> bool: ...
    @staticmethod
    def importKeymap(name: str, path: Optional[str]=None) -> bool: ...
    @staticmethod
    def keymaps() -> Union[Tuple[Any, ...],str]: ...
    @staticmethod
    def currentKeymap() -> str: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _getHotkeysStatus(hotkey_symbol: str, modifier_mask: int=0) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _createBackupTables() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _restoreBackupTables() -> Any: ...  ## Added by typing stub update
class ik:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def solveFBIK(skeleton: _ik_Skeleton, targets: Sequence[_ik_Target], iters: int=30, tolerance: float=1e-5, pin_root: bool=False) -> None: ...
    @staticmethod
    def solvePhysFBIK(skeleton: _ik_Skeleton, targets: Sequence[_ik_Target], com_target: Optional[_ik_Target]=None, iters: int=30, damping: float=0.5, tolerance: float=1e-5) -> None: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _newSkeleton() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _newTarget(joint: _ik_Joint, goal_transform: Matrix4, joint_offset: Matrix4, target_type: EnumValue, weight: float, priority: int, depth: int) -> Any: ...  ## Added by typing stub update
class _ik_Joint:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self) -> Any: ...
    def worldTransform(self) -> Matrix4: ...
    def setWorldTransform(self, xform) -> None: ...
    def parent(self) -> EnumValue: ...
    def setParent(self, parent) -> Any: ...
    def rotationOrder(self) -> str: ...
    def setRotationOrder(self, rotate_order) -> None: ...
    def rotationWeights(self) -> Vector3: ...
    def setRotationWeights(self, weights) -> None: ...
    def translationWeights(self) -> Vector3: ...
    def setTranslationWeights(self, weights) -> None: ...
    def mass(self) -> float: ...
    def setMass(self, mass) -> None: ...
    def localCenterOfMass(self) -> Vector3: ...
    def setLocalCenterOfMass(self, position: Union[Sequence[float], Vector3]) -> None: ...
    def rotationLimits(self) -> Tuple[Vector3, Vector3]: ...
    def setRotationLimits(self, lower, upper) -> None: ...
    def translationLimits(self) -> Tuple[Vector3, Vector3]: ...
    def setTranslationLimits(self, lower, upper) -> None: ...
    def restTransform(self) -> Matrix4: ...
    def setRestTransform(self, xform) -> None: ...
    def restRotationWeights(self) -> Vector3: ...
    def setRestRotationWeights(self, weights) -> None: ...
    def restTranslationWeights(self) -> Vector3: ...
    def setRestTranslationWeights(self, weights) -> None: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _ik_Skeleton:
    thisown: Any = ...
    def __init__(self) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self) -> Any: ...
    def addJoint(self, world_transform: Matrix4=Matrix4(1.0), parent: Optional[Any]=None, rotation_weights: Vector3=Vector3(1,1,1), translation_weights: Vector3=Vector3(0,0,0), mass: float=1.0, local_com: Vector3=Vector3(0,0,0)) -> EnumValue: ...
    def joints(self) -> EnumValue: ...
    def centerOfMass(self) -> Vector3: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _ik_Target:
    thisown: Any = ...
    def __init__(self: _ik_Target, joint: Optional[_ik_Joint]=None, goal_transform: Matrix4=Matrix4(1.0), joint_offset: Matrix4=Matrix4(1.0), target_type: EnumValue=_ik_targetType.Position, weight: float=1.0, priority: int=0, depth: int=-1) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self) -> Any: ...
    def joint(self) -> EnumValue: ...
    def setJoint(self, joint) -> None: ...
    def goalTransform(self) -> Matrix4: ...
    def setGoalTransform(self, xform) -> None: ...
    def jointOffset(self) -> Matrix4: ...
    def setJointOffset(self, xform) -> None: ...
    def targetType(self) -> EnumValue: ...
    def setTargetType(self, target_type) -> None: ...
    def weight(self) -> float: ...
    def setWeight(self, weight) -> None: ...
    def priority(self) -> int: ...
    def setPriority(self, priority) -> None: ...
    def depth(self) -> int: ...
    def setDepth(self, depth) -> None: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class IndexPairPropertyTable:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: IndexPairPropertyTable) -> Any: ...
    def attrib(self: IndexPairPropertyTable) -> Attrib: ...
    def numIndices(self: IndexPairPropertyTable) -> Any: ...
    def propertyNames(self: IndexPairPropertyTable) -> Tuple[str, ...]: ...
    def propertyDataType(self: IndexPairPropertyTable, property_name: str) -> EnumValue: ...
    def propertySize(self: IndexPairPropertyTable, property_name: str) -> int: ...
    def floatPropertyValueAtIndex(self: IndexPairPropertyTable, property_name: str, row: int) -> float: ...
    def floatListPropertyValueAtIndex(self: IndexPairPropertyTable, property_name: str, row: int) -> Tuple[float, ...]: ...
    def intPropertyValueAtIndex(self: IndexPairPropertyTable, property_name: str, row: int) -> int: ...
    def intListPropertyValueAtIndex(self: IndexPairPropertyTable, property_name: str, row: int) -> Tuple[int, ...]: ...
    def stringPropertyValueAtIndex(self: IndexPairPropertyTable, property_name: str, row: int) -> str: ...
    def stringListPropertyValueAtIndex(self: IndexPairPropertyTable, property_name: str, row: int) -> Tuple[str, ...]: ...

    def __repr__(self: IndexPairPropertyTable) -> Any: ...  ## Added by typing stub update
class IndirectInput(NetworkMovableItem):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def outputs(self: IndirectInput) -> Any: ...
    def outputConnections(self: IndirectInput) -> Any: ...
    def input(self: IndirectInput) -> Any: ...
    def inputOutputIndex(self: IndirectInput) -> Any: ...
    def inputItem(self: IndirectInput) -> NetworkMovableItem: ...
    def inputItemOutputIndex(self: IndirectInput) -> int: ...
    def setColorDefault(self: IndirectInput) -> Any: ...
    def setUseColorFromOutput(self: IndirectInput, use_output_color: bool) -> Any: ...
    def useColorFromOutput(self: IndirectInput) -> Any: ...
    def setSymbolicColorName(self: IndirectInput, name: str) -> Any: ...
    def symbolicColorName(self: IndirectInput) -> Any: ...

class InterruptableOperation:
    thisown: Any = ...
    def __init__(self: InterruptableOperation, operation_name: str, long_operation_name: Optional[str]=None, open_interrupt_dialog: bool=False) -> None: ...
    __swig_destroy__: Any = ...
    def updateLongProgress(self: InterruptableOperation, percentage: float=-1.0, long_op_status: Optional[str]=None) -> None: ...
    def updateProgress(self: InterruptableOperation, percentage: float=-1.0) -> None: ...
    def __enter__(self: InterruptableOperation) -> Any: ...
    def __exit__(self: InterruptableOperation, type, value, traceback) -> Any: ...

    def __repr__(self: InterruptableOperation) -> Any: ...  ## Added by typing stub update
class IntParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, label: str, num_components, default_value: Iterable[Any]=(), min: int=0, max: int=10, min_is_strict: bool=False, max_is_strict: bool=False, look: EnumValue=parmLook.Regular, naming_scheme: EnumValue=parmNamingScheme.XYZW, menu_items: Iterable[Any]=(), menu_labels: Iterable[Any]=(), icon_names: Iterable[Any]=(), item_generator_script: Optional[str]=None, item_generator_script_language: Optional[EnumValue]=None, menu_type: EnumValue=menuType.Normal, disable_when: Optional[str]=None, is_hidden: bool=False, is_label_hidden: bool=False, join_with_next: bool=False, help: Optional[str]=None, script_callback: Optional[str]=None, script_callback_language: EnumValue=scriptLanguage.Hscript, tags: dict={}, default_expression: Iterable[Any]=(), default_expression_language: Iterable[Any]=()) -> None: ...
    __swig_destroy__: Any = ...
    def minValue(self: IntParmTemplate) -> int: ...
    def setMinValue(self: IntParmTemplate, min_value: int) -> None: ...
    def maxValue(self: IntParmTemplate) -> int: ...
    def setMaxValue(self: IntParmTemplate, max_value: int) -> None: ...
    def minIsStrict(self: IntParmTemplate) -> bool: ...
    def setMinIsStrict(self: IntParmTemplate, on: bool) -> None: ...
    def maxIsStrict(self: IntParmTemplate) -> bool: ...
    def setMaxIsStrict(self: IntParmTemplate, on: bool) -> None: ...
    def defaultValue(self: IntParmTemplate) -> Tuple[int, ...]: ...
    def setDefaultValue(self: IntParmTemplate, tuple_of_default_values: Sequence[int]) -> None: ...
    def defaultExpression(self: IntParmTemplate) -> Tuple[str, ...]: ...
    def setDefaultExpression(self: IntParmTemplate, tuple_of_default_expressions: Sequence[str]) -> None: ...
    def defaultExpressionLanguage(self: IntParmTemplate) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self: IntParmTemplate, tuple_of_default_expression_languages: Sequence[EnumValue]) -> None: ...
    def menuItems(self: IntParmTemplate) -> Tuple[str, ...]: ...
    def setMenuItems(self: IntParmTemplate, menu_items: Sequence[str]) -> None: ...
    def menuLabels(self: IntParmTemplate) -> Tuple[str, ...]: ...
    def setMenuLabels(self: IntParmTemplate, menu_labels: Sequence[str]) -> None: ...
    def iconNames(self: IntParmTemplate) -> Tuple[str, ...]: ...
    def setIconNames(self: IntParmTemplate, icon_names: Sequence[str]) -> None: ...
    def itemGeneratorScript(self: IntParmTemplate) -> EnumValue: ...
    def setItemGeneratorScript(self: IntParmTemplate, item_generator_script: str) -> None: ...
    def itemGeneratorScriptLanguage(self: IntParmTemplate) -> Any: ...
    def setItemGeneratorScriptLanguage(self: IntParmTemplate, language: EnumValue) -> None: ...
    def menuType(self: IntParmTemplate) -> EnumValue: ...
    def setMenuType(self: IntParmTemplate, menu_type: EnumValue) -> None: ...
    def menuUseToken(self: IntParmTemplate) -> bool: ...
    def setMenuUseToken(self: IntParmTemplate, on: bool) -> None: ...

    def __repr__(self: IntParmTemplate) -> Any: ...  ## Added by typing stub update
class IPRViewer(PaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isPaused(self: IPRViewer) -> bool: ...
    def isRendering(self: IPRViewer) -> bool: ...
    def isActive(self: IPRViewer) -> bool: ...
    def killRender(self: IPRViewer) -> None: ...
    def pauseRender(self: IPRViewer) -> None: ...
    def resumeRender(self: IPRViewer) -> None: ...
    def startRender(self: IPRViewer) -> None: ...
    def isPreviewOn(self: IPRViewer) -> bool: ...
    def setPreview(self: IPRViewer, on: bool) -> None: ...
    def isAutoSaveOn(self: IPRViewer) -> bool: ...
    def setAutoSave(self: IPRViewer, on: bool) -> None: ...
    def autoSavePath(self: IPRViewer) -> str: ...
    def setAutoSavePath(self: IPRViewer, path: str) -> None: ...
    def isAutoUpdateOn(self: IPRViewer) -> bool: ...
    def setAutoUpdate(self: IPRViewer, on: bool) -> None: ...
    def autoSaveTime(self: IPRViewer) -> float: ...
    def setAutoSaveTime(self: IPRViewer, float: float) -> None: ...
    def delay(self: IPRViewer) -> float: ...
    def setDelay(self: IPRViewer, time: float) -> None: ...
    def updateTime(self: IPRViewer) -> float: ...
    def setUpdateTime(self: IPRViewer, time: float) -> None: ...
    def lastClickLocation(self: IPRViewer) -> Tuple[int, int]: ...
    def ropNode(self: IPRViewer) -> Optional[RopNode]: ...
    def setRopNode(self: IPRViewer, rop_node: Node) -> None: ...
    def imageResolution(self: IPRViewer) -> Tuple[int, int]: ...
    def cropRegion(self: IPRViewer) -> Tuple[float, float, float, float]: ...
    def planes(self: IPRViewer) -> Tuple[str, ...]: ...
    def displayedPlane(self: IPRViewer) -> str: ...
    def pixel(self: IPRViewer, plane_name: str, x: int, y: int) -> Tuple[float, ...]: ...
    def pixels(self: IPRViewer, plane_name: str) -> Tuple[Tuple[float, ...], ...]: ...
    def evaluatedStyleSheetJSON(self: IPRViewer, x: int, y: int) -> str: ...
    def evaluatedStyleSheetPaths(self: IPRViewer, x: int, y: int) -> Tuple[str, ...]: ...
    def saveFrame(self: IPRViewer, file_path: str, snapshot: int=0, xres: int=-1, yres: int=-1, color: str="Any", alpha: str="Any", scope: str="Any", lut: str="Any", gamma: float=1.0, convert: bool=True) -> bool: ...
    def objectNode(self: IPRViewer, x: int, y: int) -> Optional[ObjNode]: ...
    def prim(self: IPRViewer, x: int, y: int) -> Optional[Prim]: ...
    def materialNode(self: IPRViewer, x: int, y: int) -> Optional[ShopNode]: ...
    def usingOCIO(self: IPRViewer) -> bool: ...
    def setUsingOCIO(self: IPRViewer, enable: bool) -> None: ...
    def setOCIODisplayView(self: IPRViewer, display: str="Any", view: str="Any") -> None: ...
    def getOCIODisplay(self: IPRViewer) -> str: ...
    def getOCIOView(self: IPRViewer) -> str: ...

    def __repr__(self: IPRViewer) -> Any: ...  ## Added by typing stub update
class Keyframe(BaseKeyframe):
    thisown: Any = ...
    def __init__(self: Keyframe, value: Optional[float]=None, time: Optional[float]=None) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Keyframe) -> Any: ...
    def evaluatedType(self: Keyframe) -> EnumValue: ...
    def setValue(self: Keyframe, value: float) -> None: ...
    def value(self: Keyframe) -> float: ...
    def isValueSet(self: Keyframe) -> bool: ...
    def setInValue(self: Keyframe, in_value: float) -> None: ...
    def unsetInValue(self: Keyframe) -> None: ...
    def inValue(self: Keyframe) -> float: ...
    def isValueTied(self: Keyframe) -> bool: ...
    def isValueUsed(self: Keyframe) -> bool: ...
    def useValue(self: Keyframe, on: bool) -> None: ...
    def setSlope(self: Keyframe, slope: float) -> None: ...
    def slope(self: Keyframe) -> float: ...
    def isSlopeSet(self: Keyframe) -> bool: ...
    def isSlopeUsed(self: Keyframe) -> bool: ...
    def useSlope(self: Keyframe, on: bool) -> None: ...
    def isSlopeAuto(self: Keyframe) -> bool: ...
    def setSlopeAuto(self: Keyframe, on: bool) -> None: ...
    def setInSlope(self: Keyframe, in_slope: float) -> None: ...
    def unsetInSlope(self: Keyframe) -> None: ...
    def inSlope(self: Keyframe) -> float: ...
    def isSlopeTied(self: Keyframe) -> bool: ...
    def isInSlopeAuto(self: Keyframe) -> bool: ...
    def setInSlopeAuto(self: Keyframe, on: bool) -> None: ...
    def setAccel(self: Keyframe, accel: float) -> None: ...
    def accel(self: Keyframe) -> float: ...
    def isAccelSet(self: Keyframe) -> bool: ...
    def isAccelUsed(self: Keyframe) -> bool: ...
    def useAccel(self: Keyframe, on: bool) -> None: ...
    def setInAccel(self: Keyframe, in_accel: float) -> None: ...
    def unsetInAccel(self: Keyframe) -> None: ...
    def inAccel(self: Keyframe) -> float: ...
    def isAccelTied(self: Keyframe) -> bool: ...
    def interpretAccelAsRatio(self: Keyframe, on: bool) -> None: ...
    def isAccelInterpretedAsRatio(self: Keyframe) -> bool: ...

    def __repr__(self: Keyframe) -> Any: ...  ## Added by typing stub update
class LabelParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, label: str, column_labels: Iterable[Any]=(), is_hidden: bool=False, is_label_hidden: bool=False, join_with_next: bool=False, help: Optional[bool]=None, tags: dict={}) -> None: ...
    __swig_destroy__: Any = ...
    def labelParmType(self: LabelParmTemplate) -> EnumValue: ...
    def setLabelParmType(self: LabelParmTemplate, label_parm_type: EnumValue) -> None: ...
    def columnLabels(self: LabelParmTemplate) -> Tuple[str, ...]: ...
    def setColumnLabels(self: LabelParmTemplate, column_labels: Sequence[str]) -> None: ...

    def __repr__(self: LabelParmTemplate) -> Any: ...  ## Added by typing stub update
class logging:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def sources() -> Tuple[str, ...]: ...
    @staticmethod
    def setRenderLogVerbosity(verbosity: int) -> None: ...
    @staticmethod
    def renderLogVerbosity() -> int: ...
    @staticmethod
    def saveLogsToFile(logs: Sequence[_logging_LogEntry], filepath: str) -> None: ...
    @staticmethod
    def loadLogsFromFile(filepath: str) -> EnumValue: ...
    @staticmethod
    def createSource(source_name: str) -> None: ...
    @staticmethod
    def log(entry: _logging_LogEntry, source_name: Optional[str]=None) -> None: ...
    @staticmethod
    def defaultSink(force_create: bool) -> EnumValue: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class _logging_FileSink(_logging_Sink):
    thisown: Any = ...
    def __init__(self: _logging_FileSink, filepath: str) -> None: ...
    __swig_destroy__: Any = ...
    def filePath(self) -> str: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class _logging_LogEntry:
    thisown: Any = ...
    def __init__(self: _logging_LogEntry, message: Optional[str]=None, source: Optional[str]=None, source_context: Optional[str]=None, severity: Optional[EnumValue]=None, verbosity: int=0, time: float=0.0, thread_id: int=0, has_external_info: bool=False, external_host_name: Optional[str]=None, external_identifier: Optional[str]=None, external_command_line: Optional[str]=None, external_process_id: int=0) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self) -> Any: ...
    def source(self) -> str: ...
    def sourceContext(self) -> str: ...
    def message(self) -> str: ...
    def severity(self) -> EnumValue: ...
    def verbosity(self) -> int: ...
    def time(self) -> float: ...
    def threadId(self) -> int: ...
    def hasExternalInfo(self) -> bool: ...
    def externalHostName(self) -> str: ...
    def externalIdentifier(self) -> str: ...
    def externalCommandLine(self) -> str: ...
    def externalProcessId(self) -> int: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self) -> Any: ...  ## Added by typing stub update
class _logging_MemorySink(_logging_Sink):
    thisown: Any = ...
    def __init__(self) -> None: ...
    __swig_destroy__: Any = ...
    def logEntries(self) -> EnumValue: ...
    def stealLogEntries(self) -> EnumValue: ...

    def __repr__(self) -> Any: ...  ## Added by typing stub update
class LopLockedStage:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: LopLockedStage) -> Any: ...
    def rootLayerIdentifier(self: LopLockedStage) -> str: ...

    def __repr__(self: LopLockedStage) -> Any: ...  ## Added by typing stub update
class LopNetwork(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isDebugFlagSet(self: LopNetwork) -> bool: ...
    def setDebugFlag(self: LopNetwork, on: bool) -> None: ...
    def displayNode(self: LopNetwork) -> Node: ...
    def viewerNode(self: LopNetwork) -> Node: ...
    def viewportOverrides(self: LopNetwork, lop: LopNode, output_index: int=0) -> LopViewportOverrides: ...
    def saveNamedViewportOverrides(self: LopNetwork, name: str) -> None: ...
    def loadNamedViewportOverrides(self: LopNetwork, name: str) -> None: ...
    def namedViewportOverrides(self: LopNetwork) -> Tuple[str, ...]: ...
    def viewportOverridesLayer(self: LopNetwork, layer_id: EnumValue) -> pxr.Sdf.Layer: ...
    def viewportLoadMasks(self: LopNetwork) -> LopViewportLoadMasks: ...
    def setViewportLoadMasks(self: LopNetwork, payload_config: LopViewportLoadMasks) -> None: ...
    def saveNamedViewportLoadMasks(self: LopNetwork, name: str) -> None: ...
    def loadNamedViewportLoadMasks(self: LopNetwork, name: str) -> LopViewportLoadMasks: ...
    def namedViewportLoadMasks(self: LopNetwork) -> Tuple[str, ...]: ...
    def editablePostLayer(self: LopNetwork, name: str) -> LopPostLayer: ...
    def postLayerNames(self: LopNetwork) -> Tuple[str, ...]: ...
    def postLayer(self: LopNetwork, name: str) -> Optional[pxr.Sdf.Layer]: ...
    def removePostLayer(self: LopNetwork, name: str) -> None: ...
    def selection(self: LopNetwork) -> Tuple[str, ...]: ...
    def selectionLayerId(self: LopNetwork) -> str: ...
    def selectionCurrentPrim(self: LopNetwork) -> str: ...
    def selectionWithInstanceIds(self: LopNetwork) -> Any: ...
    def setSelection(self: LopNetwork, selection: Sequence[str], layerid: Optional[str]=None, currentprim: Optional[str]=None) -> None: ...
    def selectionRules(self: LopNetwork) -> Dict[str, LopSelectionRule]: ...
    def clearSelectionRules(self: LopNetwork) -> None: ...
    def setSelectionRule(self: LopNetwork, name: str, rule: LopSelectionRule) -> None: ...

    def __repr__(self: LopNetwork) -> Any: ...  ## Added by typing stub update
class LopNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isBypassed(self: LopNode) -> bool: ...
    def bypass(self: LopNode, on: bool) -> None: ...
    def isDisplayFlagSet(self: LopNode) -> bool: ...
    def setDisplayFlag(self: LopNode, on: bool) -> None: ...
    def isDebugFlagSet(self: LopNode) -> bool: ...
    def setDebugFlag(self: LopNode, on: bool) -> None: ...
    def displayNode(self: LopNode) -> LopNode: ...
    def viewerNode(self: LopNode) -> Node: ...
    def editableLayer(self: LopNode) -> pxr.Sdf.Layer: ...
    def activeLayer(self: LopNode, output_index: int=0, ignore_errors: bool=False, use_last_cook_context_options: bool=True) -> pxr.Sdf.Layer: ...
    def editableStage(self: LopNode) -> pxr.Usd.Stage: ...
    def stage(self: LopNode, output_index: int=0, apply_viewport_overrides: bool=False, ignore_errors: bool=False, use_last_cook_context_options: bool=True, apply_post_layers: bool=True) -> pxr.Usd.Stage: ...
    def sourceLayer(self: LopNode, layer_index: int=0, output_index: int=0, use_last_cook_context_options: bool=True) -> pxr.Sdf.Layer: ...
    def stagePrimStats(self: LopNode, primpath: Optional[str]=None, output_index: int=0, apply_viewport_overrides: bool=False, ignore_errors: bool=False, do_geometry_counts: bool=False, do_separate_purposes: bool=False, use_last_cook_context_options: bool=True, apply_post_layers: bool=True) -> dict: ...
    def lastModifiedPrims(self: LopNode) -> Tuple[pxr.Sdf.Path, ...]: ...
    def inputPrims(self: LopNode, inputidx: int) -> Tuple[pxr.Sdf.Path, ...]: ...
    def setLastModifiedPrims(self: LopNode, primPaths: Sequence[str]) -> None: ...
    def loadMasks(self: LopNode, output_index: int=0, force_cook: bool=False, use_last_cook_context_options: bool=True) -> LopViewportLoadMasks: ...
    def sourceLayerCount(self: LopNode, output_index: int=0, use_last_cook_context_options: bool=True) -> int: ...
    def layersAboveLayerBreak(self: LopNode, output_index: int=0, use_last_cook_context_options: bool=True) -> Tuple[str, ...]: ...
    def selectionRule(self: LopNode, inputidx: int=-1, pattern: Optional[str]=None) -> LopSelectionRule: ...
    def network(self: LopNode) -> LopNetwork: ...
    def addLockedGeometry(self: LopNode, identifier: str, geo: Geometry, args: dict={}) -> str: ...
    def addHeldLayer(self: LopNode, identifier: str) -> None: ...
    def addSubLayer(self: LopNode, identifier: str) -> None: ...

    def __repr__(self: LopNode) -> Any: ...  ## Added by typing stub update
class lop:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def defaultNewPrimPath() -> str: ...
    @staticmethod
    def setDefaultNewPrimPath(path: str) -> None: ...
    @staticmethod
    def defaultCollectionsPrimPath() -> str: ...
    @staticmethod
    def setDefaultCollectionsPrimPath(path: str) -> None: ...
    @staticmethod
    def defaultCollectionsPrimType() -> str: ...
    @staticmethod
    def setDefaultCollectionsPrimType(path: str) -> None: ...
    @staticmethod
    def defaultLightsPrimPath() -> str: ...
    @staticmethod
    def setDefaultLightsPrimPath(path: str) -> None: ...
    @staticmethod
    def defaultCamerasPrimPath() -> str: ...
    @staticmethod
    def setDefaultCamerasPrimPath(path: str) -> None: ...
    @staticmethod
    def defaultTransformSuffix() -> str: ...
    @staticmethod
    def setDefaultTransformSuffix(suffix: str) -> None: ...
    @staticmethod
    def showResolvedPaths() -> bool: ...
    @staticmethod
    def setShowResolvedPaths(show_resolved_paths: bool) -> None: ...
    @staticmethod
    def panesFollowCurrentNode() -> bool: ...
    @staticmethod
    def setPanesFollowCurrentNode(follow_current_node: bool) -> None: ...
    @staticmethod
    def panesShowViewportStage() -> bool: ...
    @staticmethod
    def setPanesShowViewportStage(show_viewport_stage: bool) -> None: ...
    @staticmethod
    def panesShowPostLayers() -> bool: ...
    @staticmethod
    def setPanesShowPostLayers(show_post_layers: bool) -> None: ...
    @staticmethod
    def autoSetAssetResolverContext() -> bool: ...
    @staticmethod
    def setAutoSetAssetResolverContext(auto_set_context: bool) -> None: ...
    @staticmethod
    def updateRendererInBackground() -> bool: ...
    @staticmethod
    def setUpdateRendererInBackground(update_in_background: bool) -> None: ...
    @staticmethod
    def loadPayloadsByDefault() -> bool: ...
    @staticmethod
    def setLoadPayloadsByDefault(load_payloads: bool) -> None: ...
    @staticmethod
    def allowViewportOnlyPayloads() -> bool: ...
    @staticmethod
    def setAllowViewportOnlyPayloads(allow_viewport_only_payloads: bool) -> None: ...
    @staticmethod
    def useSimplifiedLinkerUi() -> Any: ...
    @staticmethod
    def setUseSimplifiedLinkerUi(use_simplified_linker_ui: bool) -> Any: ...
    @staticmethod
    def defaultMetersPerUnit() -> float: ...
    @staticmethod
    def setDefaultMetersPerUnit(meters_per_unit: float) -> None: ...
    @staticmethod
    def defaultUpAxis() -> str: ...
    @staticmethod
    def setDefaultUpAxis(up_axis: str) -> None: ...
    @staticmethod
    def savePreferences() -> bool: ...
    @staticmethod
    def reloadLayer(layer_path: str, recursive: bool=False) -> None: ...
    @staticmethod
    def makeValidPrimName(name: str) -> str: ...
    @staticmethod
    def makeValidPrimPath(path: str, allow_relative: bool=False) -> str: ...
    @staticmethod
    def createParmsForProperty(source: str, primpath: str, propertyname: str, parametername: str, prepend_control_parm: bool, prefix_xform_parms: bool) -> ParmTemplateGroup: ...
    @staticmethod
    def createParmsForParameter(source: ParmTemplate, parametername: str, prepend_control_parm: str) -> ParmTemplateGroup: ...
    @staticmethod
    def setParmTupleFromProperty(parmtuple: ParmTuple, source: LopNode, primpath: str, propertyname: str) -> None: ...
    @staticmethod
    def shaderTranslatorID(node: Node) -> int: ...
    @staticmethod
    def shaderRenderContextName(node: Node, node_output_name: str) -> str: ...
    @staticmethod
    def translateShader(node: Node, node_output_name: str, material_prim_path: str, container_prim_path: str, shader_prim_name: str) -> str: ...
    @staticmethod
    def reportShaderTranslation(node: Node, usd_shader_path: str) -> None: ...
    @staticmethod
    def shaderNodeType(shader_name: str) -> NodeType: ...
    @staticmethod
    def availableRendererNames() -> Tuple[str, ...]: ...
    @staticmethod
    def availableRendererLabels() -> Tuple[str, ...]: ...
    @staticmethod
    def outputProcessors() -> Tuple[Tuple[str, ...], ...]: ...
    @staticmethod
    def outputProcessorParms(name: str) -> ParmTemplateGroup: ...
    @staticmethod
    def usdVersionInfo() -> Dict[str, str]: ...
    @staticmethod
    def usdOutputMinimumSeverity() -> EnumValue: ...
    @staticmethod
    def setUsdOutputMinimumSeverity(severity_type: EnumValue) -> None: ...
    @staticmethod
    def addLockedGeometry(identifier: str, geo: Geometry, args: dict={}) -> str: ...
    @staticmethod
    def removeLockedGeometry(identifier: str) -> bool: ...
    @staticmethod
    def availableRendererInfo() -> List[dict]: ...
    @staticmethod
    def addPreferenceChangeCallback(callback) -> None: ...
    @staticmethod
    def removePreferenceChangeCallback(callback) -> None: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class LopInstanceIdRule:
    thisown: Any = ...
    def __init__(self) -> None: ...
    def __hash__(self: LopInstanceIdRule) -> Any: ...
    def instanceIds(self: LopInstanceIdRule, lopnode: LopNode) -> Tuple[int, ...]: ...
    def primPath(self: LopInstanceIdRule) -> str: ...
    def setPrimPath(self: LopInstanceIdRule, primpath: str) -> None: ...
    def instanceIdPattern(self: LopInstanceIdRule) -> str: ...
    def setInstanceIdPattern(self: LopInstanceIdRule, pattern: str) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: LopInstanceIdRule) -> Any: ...  ## Added by typing stub update
class LopPostLayer:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __enter__(self: LopPostLayer) -> Any: ...
    def layer(self: LopPostLayer) -> Any: ...
    def stage(self: LopPostLayer) -> Any: ...
    def __exit__(self: LopPostLayer, type, value, traceback) -> Any: ...

    def __repr__(self: LopPostLayer) -> Any: ...  ## Added by typing stub update
class LopSelectionRule:
    thisown: Any = ...
    def __init__(self: LopSelectionRule, pattern: Optional[str]=None) -> None: ...
    def expandedPaths(self: LopSelectionRule, lopnode: Optional[LopNode]=None, return_ancestors: bool=False, fallback_to_new_paths: bool=False, stage: Optional[Any]=None) -> Tuple[pxr.Sdf.Path, ...]: ...
    def firstPath(self: LopSelectionRule, lopnode: Optional[LopNode]=None, return_ancestors: bool=False, fallback_to_new_paths: bool=False, stage: Optional[Any]=None) -> pxr.Sdf.Path: ...
    def collectionAwarePaths(self: LopSelectionRule, lopnode: Optional[LopNode]=None, fallback_to_new_paths: bool=False, stage: Optional[Any]=None) -> Tuple[pxr.Sdf.Path, ...]: ...
    def newPaths(self: LopSelectionRule, lopnode: Optional[LopNode]=None, stage: Optional[Any]=None) -> Tuple[pxr.Sdf.Path, ...]: ...
    def __hash__(self: LopSelectionRule) -> Any: ...
    def lastError(self: LopSelectionRule) -> str: ...
    def lastErrorSeverity(self: LopSelectionRule) -> EnumValue: ...
    def lastMayBeTimeVarying(self: LopSelectionRule) -> bool: ...
    def pathPattern(self: LopSelectionRule) -> str: ...
    def setPathPattern(self: LopSelectionRule, pattern: str) -> None: ...
    def traversalDemands(self: LopSelectionRule) -> int: ...
    def setTraversalDemands(self: LopSelectionRule, options: int) -> None: ...
    def icon(self: LopSelectionRule) -> str: ...
    def setIcon(self: LopSelectionRule, icon: str) -> None: ...
    def sourceNode(self: LopSelectionRule) -> Optional[LopNode]: ...
    def sourceNodeInputIndex(self: LopSelectionRule) -> int: ...
    __swig_destroy__: Any = ...

    def __repr__(self: LopSelectionRule) -> Any: ...  ## Added by typing stub update
class LopViewportLoadMasks:
    thisown: Any = ...
    def __init__(self) -> None: ...
    def __hash__(self: LopViewportLoadMasks) -> Any: ...
    def setPopulateAll(self: LopViewportLoadMasks, populate_all: bool=True) -> None: ...
    def populateAll(self: LopViewportLoadMasks) -> bool: ...
    def populatePaths(self: LopViewportLoadMasks) -> Tuple[str, ...]: ...
    def isPathPopulated(self: LopViewportLoadMasks, path: str, exact_match: bool=True) -> bool: ...
    def setPopulatePaths(self: LopViewportLoadMasks, paths: Sequence[str]) -> None: ...
    def addPopulatePath(self: LopViewportLoadMasks, path: str) -> None: ...
    def removePopulatePath(self: LopViewportLoadMasks, path: str) -> None: ...
    def muteLayers(self: LopViewportLoadMasks) -> Tuple[str, ...]: ...
    def isLayerMuted(self: LopViewportLoadMasks, identifier: str) -> bool: ...
    def setMuteLayers(self: LopViewportLoadMasks, identifiers: Sequence[str]) -> None: ...
    def addMuteLayer(self: LopViewportLoadMasks, identifier: str) -> None: ...
    def removeMuteLayer(self: LopViewportLoadMasks, identifier: str) -> None: ...
    def setLoadAll(self: LopViewportLoadMasks, load_all: bool=True) -> None: ...
    def loadAll(self: LopViewportLoadMasks) -> Any: ...
    def loadPaths(self: LopViewportLoadMasks) -> Tuple[str, ...]: ...
    def isPathLoaded(self: LopViewportLoadMasks, path: str, exact_match: bool=True) -> bool: ...
    def isAnyChildPathLoaded(self: LopViewportLoadMasks, path: str) -> bool: ...
    def setLoadPaths(self: LopViewportLoadMasks, paths: Sequence[str]) -> None: ...
    def addLoadPath(self: LopViewportLoadMasks, path: str) -> None: ...
    def removeLoadPath(self: LopViewportLoadMasks, path: str, remove_children: bool=False) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: LopViewportLoadMasks) -> Any: ...  ## Added by typing stub update
class LopViewportOverrides:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __enter__(self: LopViewportOverrides) -> Any: ...
    def setDrawMode(self: LopViewportOverrides, prims: LopSelectionRule, drawmode: str) -> None: ...
    def setActive(self: LopViewportOverrides, prims: LopSelectionRule, active: bool) -> None: ...
    def setVisible(self: LopViewportOverrides, prims: LopSelectionRule, visible: bool) -> None: ...
    def setSelectable(self: LopViewportOverrides, prims: LopSelectionRule, selectable: bool, solo: bool=False) -> None: ...
    def setSoloLights(self: LopViewportOverrides, prims: LopSelectionRule) -> None: ...
    def addSoloLights(self: LopViewportOverrides, prims: LopSelectionRule) -> None: ...
    def removeSoloLights(self: LopViewportOverrides, prims: LopSelectionRule) -> None: ...
    def setSoloGeometry(self: LopViewportOverrides, prims: LopSelectionRule) -> None: ...
    def addSoloGeometry(self: LopViewportOverrides, prims: LopSelectionRule) -> None: ...
    def removeSoloGeometry(self: LopViewportOverrides, prims: LopSelectionRule) -> None: ...
    def setDisplayOpacity(self: LopViewportOverrides, prims: LopSelectionRule, opacity: float) -> None: ...
    def clear(self: LopViewportOverrides, layer_id: Optional[EnumValue]=None, from_prim: Optional[str]=None) -> None: ...
    def layer(self: LopViewportOverrides) -> pxr.Sdf.Layer: ...
    def stage(self: LopViewportOverrides) -> pxr.Usd.Stage: ...
    def soloLights(self: LopViewportOverrides) -> Tuple[pxr.Sdf.Path, ...]: ...
    def soloGeometry(self: LopViewportOverrides) -> Tuple[pxr.Sdf.Path, ...]: ...
    def __exit__(self: LopViewportOverrides, type, value, traceback) -> Any: ...

    def __repr__(self: LopViewportOverrides) -> Any: ...  ## Added by typing stub update
class Matrix2:
    thisown: Any = ...
    def __init__(self: Matrix2, values: Union[float, SizedItems[float], SizedItems[SizedItems[float]]]=0) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: Matrix2, matrix2: Matrix2, tolerance: float=0.00001) -> bool: ...
    def __hash__(self: Matrix2) -> Any: ...
    def at(self: Matrix2, row: int, col: int) -> float: ...
    def asTuple(self: Matrix2) -> Tuple[float, ...]: ...
    def asTupleOfTuples(self: Matrix2) -> Tuple[Tuple[float, ...], ...]: ...
    def setAt(self: Matrix2, row: int, col: int, value: float) -> None: ...
    def setTo(self: Matrix2, tuple: SizedItems[SizedItems[float]]) -> None: ...
    def setToIdentity(self: Matrix2) -> None: ...
    def setToZero(self: Matrix2) -> None: ...
    def __add__(self: Matrix2, matrix2: Matrix2) -> Matrix2: ...
    def __sub__(self: Matrix2, matrix2: Matrix2) -> Matrix2: ...
    def __mul__(self: Matrix2, matrix2_or_scalar: Union[float, Matrix2]) -> Matrix2: ...
    def preMult(self: Matrix2, matrix2: Matrix2) -> Matrix2: ...
    def transposed(self: Matrix2) -> Matrix2: ...
    def inverted(self: Matrix2) -> Matrix2: ...
    def determinant(self: Matrix2) -> float: ...

    def __str__(self: Matrix2) -> Any: ...  ## Added by typing stub update
    def __repr__(self: Matrix2) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Matrix2) -> Any: ...  ## Added by typing stub update
class Matrix3:
    thisown: Any = ...
    def __init__(self: Matrix3, values: Union[float, SizedItems[float], SizedItems[SizedItems[float]]]=0) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: Matrix3, matrix3: Matrix3, tolerance: float=0.00001) -> bool: ...
    def __hash__(self: Matrix3) -> Any: ...
    def at(self: Matrix3, row: int, col: int) -> float: ...
    def asTuple(self: Matrix3) -> Tuple[float, ...]: ...
    def asTupleOfTuples(self: Matrix3) -> Tuple[Tuple[float, ...], ...]: ...
    def setAt(self: Matrix3, row: int, col: int, value: float) -> None: ...
    def setTo(self: Matrix3, tuple: SizedItems[SizedItems[float]]) -> None: ...
    def setToIdentity(self: Matrix3) -> None: ...
    def setToZero(self: Matrix3) -> None: ...
    def __add__(self: Matrix3, matrix3: Matrix3) -> Matrix3: ...
    def __sub__(self: Matrix3, matrix3: Matrix3) -> Matrix3: ...
    def __mul__(self: Matrix3, matrix3_or_scalar: Union[float, Matrix3]) -> Matrix3: ...
    def preMult(self: Matrix3, matrix3: Matrix3) -> Matrix3: ...
    def transposed(self: Matrix3) -> Matrix3: ...
    def inverted(self: Matrix3) -> Matrix3: ...
    def determinant(self: Matrix3) -> float: ...
    def extractRotates(self: Matrix3, rotate_order: str="Any") -> Vector3: ...
    def removeScalesAndShears(self: Matrix3, transform_order: str="Any") -> Tuple[Vector3, Vector3]: ...

    def __str__(self: Matrix3) -> Any: ...  ## Added by typing stub update
    def __repr__(self: Matrix3) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Matrix3) -> Any: ...  ## Added by typing stub update
class Matrix4:
    thisown: Any = ...
    def __init__(self: Matrix4, values: Union[float, SizedItems[float], SizedItems[SizedItems[float]]]=0) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: Matrix4, matrix4: Matrix4, tolerance: float=0.00001) -> bool: ...
    def __hash__(self: Matrix4) -> Any: ...
    def at(self: Matrix4, row: int, col: int) -> float: ...
    def asTuple(self: Matrix4) -> Tuple[float, ...]: ...
    def asTupleOfTuples(self: Matrix4) -> Tuple[Tuple[float, ...], ...]: ...
    def setAt(self: Matrix4, row: int, col: int, value: float) -> None: ...
    def setTo(self: Matrix4, sequence: SizedItems[SizedItems[float]]) -> None: ...
    def setToIdentity(self: Matrix4) -> None: ...
    def setToZero(self: Matrix4) -> None: ...
    def __add__(self: Matrix4, matrix4: Matrix4) -> Matrix4: ...
    def __sub__(self: Matrix4, matrix4: Matrix4) -> Matrix4: ...
    def __mul__(self: Matrix4, matrix4_or_scalar: Union[float, Matrix4]) -> Matrix4: ...
    def preMult(self: Matrix4, matrix4: Matrix4) -> Matrix4: ...
    def transposed(self: Matrix4) -> Matrix4: ...
    def inverted(self: Matrix4) -> Matrix4: ...
    def determinant(self: Matrix4) -> float: ...
    def explode(self: Matrix4, transform_order: str="Any", rotate_order: str="Any", pivot: Vector3=Vector3(), pivot_rotate: Vector3=Vector3()) -> Dict[str, Vector3]: ...
    def extractTranslates(self: Matrix4, transform_order: str="Any", pivot_rotate: Vector3=Vector3(), pivot: Vector3=Vector3()) -> Vector3: ...
    def extractRotates(self: Matrix4, transform_order: str="Any", rotate_order: str="Any", pivot: Vector3=Vector3(), pivot_rotate: Vector3=Vector3()) -> Vector3: ...
    def extractScales(self: Matrix4, transform_order: str="Any", pivot: Vector3=Vector3(), pivot_rotate: Vector3=Vector3()) -> Vector3: ...
    def extractShears(self: Matrix4, transform_order: str="Any", pivot: Vector3=Vector3(), pivot_rotate: Vector3=Vector3()) -> Vector3: ...
    def extractRotationMatrix3(self: Matrix4) -> Matrix3: ...
    def setToPerspective(self: Matrix4, zoom: float, orthowidth: int=1, image_aspect: int=1, pixel_aspect: int=1, clip_near: int=0, clip_far: int=1, window_xmin: int=0, window_xmax: int=1, window_ymin: int=0, window_ymax: int=1) -> None: ...
    def setToOrthographic(self: Matrix4, zoom: float, orthowidth: int=1, image_aspect: int=1, pixel_aspect: int=1, clip_near: int=0, clip_far: int=1, window_xmin: int=0, window_xmax: int=1, window_ymin: int=0, window_ymax: int=1) -> Any: ...

    def __str__(self: Matrix4) -> Any: ...  ## Added by typing stub update
    def __repr__(self: Matrix4) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Matrix4) -> Any: ...  ## Added by typing stub update
class MenuParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, label: str, menu_items, menu_labels: Iterable[Any]=(), default_value: int=0, icon_names: Iterable[Any]=(), item_generator_script: str="Any", item_generator_script_language: Optional[EnumValue]=None, disable_when: Optional[EnumValue]=None, menu_type: EnumValue=menuType.Normal, is_hidden: bool=False, is_label_hidden: bool=False, join_with_next: bool=False, help: Optional[str]=None, script_callback: Optional[str]=None, script_callback_language: EnumValue=scriptLanguage.Hscript, tags: dict={}, default_expression: str="Any", default_expression_language: EnumValue=scriptLanguage.Hscript, store_default_value_as_string: bool=False, menu_use_token: bool=False, is_button_strip: bool=False, strip_uses_icons: bool=False) -> None: ...
    __swig_destroy__: Any = ...
    def defaultValue(self: MenuParmTemplate) -> int: ...
    def defaultValueAsString(self: MenuParmTemplate) -> Any: ...
    def setDefaultValue(self: MenuParmTemplate, default_value: int) -> None: ...
    def defaultExpression(self: MenuParmTemplate) -> str: ...
    def setDefaultExpression(self: MenuParmTemplate, default_expression: str) -> None: ...
    def defaultExpressionLanguage(self: MenuParmTemplate) -> EnumValue: ...
    def setDefaultExpressionLanguage(self: MenuParmTemplate, default_expression_language: EnumValue) -> None: ...
    def menuItems(self: MenuParmTemplate) -> Tuple[str, ...]: ...
    def setMenuItems(self: MenuParmTemplate, menu_items: Sequence[str]) -> None: ...
    def menuLabels(self: MenuParmTemplate) -> Tuple[str, ...]: ...
    def setMenuLabels(self: MenuParmTemplate, menu_labels: Sequence[str]) -> None: ...
    def iconNames(self: MenuParmTemplate) -> Tuple[str, ...]: ...
    def setIconNames(self: MenuParmTemplate, icon_names: Sequence[str]) -> None: ...
    def itemGeneratorScript(self: MenuParmTemplate) -> EnumValue: ...
    def setItemGeneratorScript(self: MenuParmTemplate, item_generator_script: str) -> None: ...
    def itemGeneratorScriptLanguage(self: MenuParmTemplate) -> Any: ...
    def setItemGeneratorScriptLanguage(self: MenuParmTemplate, language: EnumValue) -> None: ...
    def menuType(self: MenuParmTemplate) -> EnumValue: ...
    def setMenuType(self: MenuParmTemplate, menu_type: EnumValue) -> None: ...
    def menuUseToken(self: MenuParmTemplate) -> bool: ...
    def setMenuUseToken(self: MenuParmTemplate, on: bool) -> None: ...
    def isButtonStrip(self: MenuParmTemplate) -> bool: ...
    def isIconStrip(self: MenuParmTemplate) -> bool: ...
    def isMenu(self: MenuParmTemplate) -> bool: ...
    def setAsButtonStrip(self: MenuParmTemplate) -> None: ...
    def setAsIconStrip(self: MenuParmTemplate) -> None: ...
    def setAsMenu(self: MenuParmTemplate) -> None: ...

    def __repr__(self: MenuParmTemplate) -> Any: ...  ## Added by typing stub update
class NetworkDot(IndirectInput):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: NetworkDot) -> Any: ...
    def isPinned(self: NetworkDot) -> bool: ...
    def setPinned(self: NetworkDot, pinned: bool) -> None: ...
    def setInput(self: NetworkDot, input_index: int, item_to_become_input: NetworkMovableItem, output_index: int=0) -> None: ...
    def inputConnections(self: NetworkDot) -> Tuple[NodeConnection, ...]: ...
    def destroy(self: NetworkDot) -> None: ...

    def __repr__(self: NetworkDot) -> Any: ...  ## Added by typing stub update
class NetworkEditor(PathBasedPaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isShowingConnectors(self: NetworkEditor) -> bool: ...
    def isUnderCursor(self: NetworkEditor) -> Any: ...
    def isPosInside(self: NetworkEditor, pos: Vector2, ignore_floating_windows: bool=True) -> bool: ...
    def setCursorPosition(self: NetworkEditor, pos: Vector2) -> None: ...
    def cursorPosition(self: NetworkEditor, confine_to_view: bool=True) -> Vector2: ...
    def screenBounds(self: NetworkEditor) -> BoundingRect: ...
    def visibleBounds(self: NetworkEditor) -> BoundingRect: ...
    def setVisibleBounds(self: NetworkEditor, bounds: BoundingRect, transition_time: float=0.0, max_scale: float=0.0, set_center_when_scale_rejected: bool=False) -> None: ...
    def setLocatingEnabled(self: NetworkEditor, enabled: bool) -> None: ...
    def locatingEnabled(self: NetworkEditor) -> bool: ...
    def lengthToScreen(self: NetworkEditor, len: float) -> float: ...
    def lengthFromScreen(self: NetworkEditor, len: float) -> float: ...
    def sizeToScreen(self: NetworkEditor, size: Vector2) -> Vector2: ...
    def sizeFromScreen(self: NetworkEditor, size: Vector2) -> Vector2: ...
    def posToScreen(self: NetworkEditor, pos: Vector2) -> Vector2: ...
    def posFromScreen(self: NetworkEditor, pos: Vector2) -> Vector2: ...
    def overviewPosToScreen(self: NetworkEditor, pos: Vector2) -> Vector2: ...
    def overviewPosFromScreen(self: NetworkEditor, pos: Vector2) -> Vector2: ...
    def overviewVisible(self: NetworkEditor) -> bool: ...
    def overviewVisibleIfAutomatic(self: NetworkEditor) -> bool: ...
    def networkItemsInBox(self: NetworkEditor, pos1: Vector2, pos2: Vector2, for_drop: bool=False, for_select: bool=False) -> Tuple[NetworkItem, str, int]: ...
    def setDropTargetItem(self: NetworkEditor, item: NetworkItem, name: str, index: int) -> None: ...
    def dropTargetItem(self: NetworkEditor) -> Tuple[NetworkItem, str, int]: ...
    def setDecoratedItem(self: NetworkEditor, item: NetworkItem, interactive: bool) -> None: ...
    def decoratedItem(self: NetworkEditor) -> NetworkItem: ...
    def decorationInteractive(self: NetworkEditor) -> bool: ...
    def setPreSelectedItems(self: NetworkEditor, items: Sequence[NetworkItem]) -> None: ...
    def preSelectedItems(self: NetworkEditor) -> Tuple[NetworkItem, ...]: ...
    def setNetworkBoxPendingRemovals(self: NetworkEditor, items: Sequence[NetworkMovableItem]) -> None: ...
    def networkBoxPendingRemovals(self: NetworkEditor) -> Tuple[NetworkMovableItem, ...]: ...
    def setFootprints(self: NetworkEditor, footprints: Sequence[NetworkFootprint]) -> None: ...
    def footprints(self: NetworkEditor) -> Tuple[NetworkFootprint, ...]: ...
    def setCursorMap(self: NetworkEditor, cursors: Dict[Tuple[str, int], str]) -> None: ...
    def cursorMap(self: NetworkEditor) -> Dict[Tuple[str, int], str]: ...
    def setDefaultCursor(self: NetworkEditor, cursor_name: str) -> None: ...
    def defaultCursor(self: NetworkEditor) -> str: ...
    def setBackgroundImages(self: NetworkEditor, images: Sequence[NetworkImage]) -> None: ...
    def backgroundImages(self: NetworkEditor) -> Tuple[NetworkImage, ...]: ...
    def itemRect(self: NetworkEditor, item: NetworkMovableItem, adjusted: bool=True) -> BoundingRect: ...
    def itemInputPos(self: NetworkEditor, item: NetworkMovableItem, input_index: int, adjusted: bool=True) -> Vector2: ...
    def itemInputDir(self: NetworkEditor, item: NetworkMovableItem, input_index: int) -> Vector2: ...
    def itemOutputPos(self: NetworkEditor, item: NetworkMovableItem, output_index: int, adjusted: bool=True) -> Vector2: ...
    def itemOutputDir(self: NetworkEditor, item: NetworkMovableItem, output_index: int) -> Vector2: ...
    def allVisibleRects(self: NetworkEditor, ignore_items: Sequence[NetworkMovableItem]) -> Tuple[NetworkMovableItem, BoundingRect]: ...
    def setAdjustments(self: NetworkEditor, items: Sequence[NetworkItem], adjustments: Sequence[NetworkAnimValue], auto_remove: bool=False) -> None: ...
    def setShapes(self: NetworkEditor, shapes: Sequence[NetworkShape]) -> None: ...
    def setOverlayShapes(self: NetworkEditor, shapes: Sequence[NetworkShape]) -> None: ...
    def setTooltip(self: NetworkEditor, tooltip: str) -> None: ...
    def tooltip(self: NetworkEditor) -> str: ...
    def setPrompt(self: NetworkEditor, prompt: str) -> None: ...
    def prompt(self: NetworkEditor) -> str: ...
    def flashMessage(self: NetworkEditor, image: Optional[str], message: Optional[str], duration: float) -> None: ...
    def openTabMenu(self: NetworkEditor, key: Optional[str]=None, auto_place: bool=False, branch: bool=False, src_item: Optional[NetworkMovableItem]=None, src_connector_index: int=-1, dest_item: Optional[NetworkMovableItem]=None, dest_connector_index: int=-1, node_position: Optional[Vector2]=None, src_items: list=[], src_indexes: list=[], dest_items: list=[], dest_indexes: list=[]) -> None: ...
    def openNodeMenu(self: NetworkEditor, node: Optional[Node]=None, items: list=[]) -> None: ...
    def openVopEffectsMenu(self: NetworkEditor, node: Node, input_index: int) -> None: ...
    def openVopOutputInfoMenu(self: NetworkEditor, node: Node, output_index: int) -> None: ...
    def openNameEditor(self: NetworkEditor, item: NetworkMovableItem, select_all: bool=False) -> int: ...
    def openCommentEditor(self: NetworkEditor, item: NetworkMovableItem, select_all: bool=False) -> int: ...
    def openNoteEditor(self: NetworkEditor, stickynote: StickyNote, select_all: bool=False) -> int: ...
    def closeTextEditor(self: NetworkEditor, id: int, apply_changes: bool=True) -> None: ...
    def runShelfTool(self: NetworkEditor, tool_name: str) -> None: ...
    def scheduleTimerEvent(self: NetworkEditor, seconds: float) -> int: ...
    def handleCurrentKeyboardEvent(self: NetworkEditor, resend: bool=False) -> None: ...
    def setVolatileKeys(self: NetworkEditor, keys: Sequence[str]) -> None: ...
    def isVolatileKeyDown(self: NetworkEditor, key: str) -> bool: ...
    def setPref(self: NetworkEditor, pref: str, value: str) -> None: ...
    def getPref(self: NetworkEditor, pref: str) -> str: ...
    def setPrefs(self: NetworkEditor, prefs: Dict[str, str]) -> None: ...
    def getPrefs(self: NetworkEditor) -> Dict[str, str]: ...
    def registerPref(self: NetworkEditor, pref: str, value: str, _global: bool) -> None: ...
    def badges(self: NetworkEditor) -> Tuple[Tuple[str, ...], ...]: ...
    def textBadges(self: NetworkEditor) -> Tuple[Tuple[str, ...], ...]: ...
    def nodeShapes(self: NetworkEditor) -> Tuple[str, ...]: ...
    def reloadNodeShapes(self: NetworkEditor) -> Tuple[str, ...]: ...
    def redraw(self: NetworkEditor) -> None: ...
    def setDragSourceData(self: NetworkEditor, items: Sequence[NetworkMovableItem]) -> None: ...
    def setDragSourceWorkItem(self: NetworkEditor, work_item_id: int) -> None: ...
    def popEventContext(self: NetworkEditor) -> Any: ...
    def parmScrollPosition(self: NetworkEditor) -> Vector2: ...
    def setParmScrollPosition(self: NetworkEditor, pos: Vector2) -> None: ...
    def setParmFilterEnabled(self: NetworkEditor, on: bool) -> None: ...
    def parmFilterEnabled(self: NetworkEditor) -> bool: ...
    def setParmFilterExactMatch(self: NetworkEditor, on: bool) -> None: ...
    def parmFilterExactMatch(self: NetworkEditor) -> bool: ...
    def setParmFilterPattern(self: NetworkEditor, pattern: str) -> None: ...
    def parmFilterPattern(self: NetworkEditor) -> str: ...
    def setParmFilterMode(self: NetworkEditor, mode: EnumValue) -> None: ...
    def parmFilterMode(self: NetworkEditor) -> EnumValue: ...
    def setParmFilterCriteria(self: NetworkEditor, criteria: EnumValue) -> None: ...
    def parmFilterCriteria(self: NetworkEditor) -> EnumValue: ...
    def pushEventContext(self: NetworkEditor) -> dict: ...
    def eventContextData(self: NetworkEditor) -> Any: ...

    def __repr__(self: NetworkEditor) -> Any: ...  ## Added by typing stub update
    def _scrollToParms(self: NetworkEditor, parms: str) -> Any: ...  ## Added by typing stub update
    def _filterParms(self: NetworkEditor, parms: str) -> Any: ...  ## Added by typing stub update
class NetworkAnimValue:
    thisown: Any = ...
    def __init__(self: NetworkAnimValue, duration: float, value_start: float, value_end: float) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NetworkAnimValue) -> Any: ...  ## Added by typing stub update
class NetworkFootprint:
    thisown: Any = ...
    def __init__(self: NetworkFootprint, condition: str, color: Color, ring: int, use_minimum_size: bool) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NetworkFootprint) -> Any: ...  ## Added by typing stub update
class NetworkImage:
    thisown: Any = ...
    def __init__(self: NetworkImage, path: str, rect: BoundingRect) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: NetworkImage) -> Any: ...
    def setPath(self: NetworkImage, path: str) -> None: ...
    def path(self: NetworkImage) -> str: ...
    def setRelativeToPath(self: NetworkImage, path: str) -> None: ...
    def relativeToPath(self: NetworkImage) -> str: ...
    def setRect(self: NetworkImage, rect: BoundingRect) -> None: ...
    def rect(self: NetworkImage) -> BoundingRect: ...
    def setBrightness(self: NetworkImage, brightness: float) -> None: ...
    def brightness(self: NetworkImage) -> float: ...

    def __str__(self: NetworkImage) -> Any: ...  ## Added by typing stub update
    def __repr__(self: NetworkImage) -> Any: ...  ## Added by typing stub update
class NetworkShape:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NetworkShape) -> Any: ...  ## Added by typing stub update
class NetworkShapeLine(NetworkShape):
    thisown: Any = ...
    def __init__(self: NetworkShapeLine, start: Vector2, end: Vector2, color: Color=Color((1.0, 1.0, 1.0)), alpha: float=1.0, width: float=1.0, screen_space: bool=True, smooth: bool=True, dashed: bool=False) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NetworkShapeLine) -> Any: ...  ## Added by typing stub update
class NetworkShapeBox(NetworkShape):
    thisown: Any = ...
    def __init__(self: NetworkShapeBox, rect: BoundingRect, color: Color=Color((1.0, 1.0, 1.0)), alpha: float=1.0, fill: bool=True, screen_space: bool=True, smooth: bool=True) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NetworkShapeBox) -> Any: ...  ## Added by typing stub update
class NetworkShapeNodeShape(NetworkShape):
    thisown: Any = ...
    def __init__(self: NetworkShapeNodeShape, rect: BoundingRect, shape: str, color: Color=Color((1.0, 1.0, 1.0)), alpha: float=1.0, fill: bool=True, screen_space: bool=True, smooth: bool=True) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NetworkShapeNodeShape) -> Any: ...  ## Added by typing stub update
class NetworkShapeConnection(NetworkShape):
    thisown: Any = ...
    def __init__(self: NetworkShapeConnection, input_pos: Vector2, input_dir: Vector2, output_pos: Vector2, output_dir: Vector2, color: Color=Color((1.0, 1.0, 1.0)), alpha: float=1.0, fade_factor: float=0.0, smooth: bool=True, dashed: bool=False) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: NetworkShapeConnection) -> Any: ...  ## Added by typing stub update
class Bundle:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Bundle) -> Any: ...
    def destroy(self: Bundle) -> None: ...
    def name(self: Bundle) -> str: ...
    def setName(self: Bundle, name: str) -> None: ...
    def findBestFilter(self: Bundle) -> EnumValue: ...
    def filter(self: Bundle) -> EnumValue: ...
    def setFilter(self: Bundle, node_type_filter: EnumValue) -> None: ...
    def pattern(self: Bundle) -> Optional[str]: ...
    def setPattern(self: Bundle, pattern_or_none: Optional[str]) -> None: ...
    def nodes(self: Bundle) -> Tuple[Node, ...]: ...
    def containsNode(self: Bundle, node: Node) -> bool: ...
    def addNode(self: Bundle, node: Node) -> None: ...
    def removeNode(self: Bundle, node: Node) -> None: ...
    def clear(self: Bundle) -> None: ...
    def isSelected(self: Bundle) -> bool: ...
    def setSelected(self: Bundle, on: bool, clear_all_selected: bool=False) -> None: ...
    def convertToNormalBundle(self: Bundle) -> None: ...
    def convertToSmartBundle(self: Bundle) -> None: ...

    def __repr__(self: Bundle) -> Any: ...  ## Added by typing stub update
class NodeConnection(NetworkItem):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: NodeConnection) -> Any: ...
    def outputNode(self: NodeConnection) -> Node: ...
    def inputIndex(self: NodeConnection) -> int: ...
    def outputItem(self: NodeConnection) -> NetworkMovableItem: ...
    def inputNode(self: NodeConnection) -> Node: ...
    def outputIndex(self: NodeConnection) -> int: ...
    def subnetIndirectInput(self: NodeConnection) -> SubnetIndirectInput: ...
    def inputItem(self: NodeConnection) -> NetworkMovableItem: ...
    def inputItemOutputIndex(self: NodeConnection) -> int: ...
    def isSelected(self: NodeConnection) -> bool: ...
    def setSelected(self: NodeConnection, selected: bool, clear_all_selected: bool=False) -> None: ...
    def inputName(self: NodeConnection) -> str: ...
    def inputLabel(self: NodeConnection) -> str: ...
    def inputDataType(self: NodeConnection) -> Any: ...
    def outputName(self: NodeConnection) -> str: ...
    def outputLabel(self: NodeConnection) -> str: ...
    def outputDataType(self: NodeConnection) -> Any: ...

    def __repr__(self: NodeConnection) -> Any: ...  ## Added by typing stub update
class NodeInfoTree:
    thisown: Any = ...
    def __init__(self: NodeInfoTree, tree_root, tree) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: NodeInfoTree) -> str: ...
    def infoType(self: NodeInfoTree) -> str: ...
    def branchOrder(self: NodeInfoTree) -> Tuple[str, ...]: ...
    def branches(self: NodeInfoTree) -> Dict[str, NodeInfoTree]: ...
    def headings(self: NodeInfoTree) -> Tuple[str, ...]: ...
    def rows(self: NodeInfoTree) -> Tuple[Tuple[str, ...], ...]: ...

    def __repr__(self: NodeInfoTree) -> Any: ...  ## Added by typing stub update
class NodeTypeCategory:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: NodeTypeCategory) -> Any: ...
    def name(self: NodeTypeCategory) -> str: ...
    def typeName(self: NodeTypeCategory) -> Any: ...
    def label(self: NodeTypeCategory) -> str: ...
    def nodeTypes(self: NodeTypeCategory) -> Dict[str, NodeType]: ...
    def nodeType(self: NodeTypeCategory, type_name: str) -> Optional[NodeType]: ...
    def nodeVerbs(self: NodeTypeCategory) -> Dict[str, SopVerb]: ...
    def nodeVerb(self: NodeTypeCategory, name: str) -> Optional[SopVerb]: ...
    def viewerStates(self: NodeTypeCategory, viewer_type: EnumValue) -> Tuple[ViewerState, ...]: ...
    def loadDSO(self: NodeTypeCategory, dso_path: str) -> None: ...
    def hasSubNetworkType(self: NodeTypeCategory) -> bool: ...
    def defaultShape(self: NodeTypeCategory) -> Any: ...
    def clearDefaultShapes(self: NodeTypeCategory) -> Any: ...
    def setDefaultShape(self: NodeTypeCategory, shape: str) -> Any: ...
    def defaultColor(self: NodeTypeCategory) -> Any: ...
    def clearDefaultColors(self: NodeTypeCategory) -> Any: ...
    def setDefaultColor(self: NodeTypeCategory, color: Color) -> Any: ...
    def defaultWireStyle(self: NodeTypeCategory) -> Any: ...
    def setDefaultWireStyle(self: NodeTypeCategory, wirestyle: str) -> Any: ...

    def __repr__(self: NodeTypeCategory) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: NodeTypeCategory) -> Any: ...  ## Added by typing stub update
class OrboltURLHandler:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def updateProgressBar(self: OrboltURLHandler, percentage: float) -> Any: ...
    def closeSplashScreen(self: OrboltURLHandler, immediate: bool=False) -> Any: ...

    def __repr__(self: OrboltURLHandler) -> Any: ...  ## Added by typing stub update
class OrientedBoundingBox:
    thisown: Any = ...
    def __init__(self: OrientedBoundingBox) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: OrientedBoundingBox, bbox: OrientedBoundingBox, tolerance: float=0.00001) -> bool: ...
    def __hash__(self: OrientedBoundingBox) -> Any: ...
    def __mul__(self: OrientedBoundingBox, matrix4: Matrix4) -> OrientedBoundingBox: ...
    def center(self: OrientedBoundingBox) -> Vector3: ...
    def rotation(self: OrientedBoundingBox) -> Any: ...
    def sizevec(self: OrientedBoundingBox) -> Vector3: ...
    def contains(self: OrientedBoundingBox, point: Sequence[float]) -> bool: ...
    def isValid(self: OrientedBoundingBox) -> bool: ...

    def __str__(self: OrientedBoundingBox) -> Any: ...  ## Added by typing stub update
    def __repr__(self: OrientedBoundingBox) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: OrientedBoundingBox) -> Any: ...  ## Added by typing stub update
class OrientedBoundingRect:
    thisown: Any = ...
    def __init__(self: OrientedBoundingRect, points: Sequence[Vector2]) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: OrientedBoundingRect, brect: OrientedBoundingRect, tolerance: float=0.00001) -> bool: ...
    def __hash__(self: OrientedBoundingRect) -> Any: ...
    def sizevec(self: OrientedBoundingRect) -> Vector2: ...
    def center(self: OrientedBoundingRect) -> Vector2: ...
    def orientation(self: OrientedBoundingRect) -> Matrix2: ...

    def __str__(self: OrientedBoundingRect) -> Any: ...  ## Added by typing stub update
    def __repr__(self: OrientedBoundingRect) -> Any: ...  ## Added by typing stub update
class PackedFragment(PackedPrim):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def setEmbeddedGeometry(self: PackedFragment, geo: Geometry, attrib: str, name: str) -> None: ...

    def __repr__(self: PackedFragment) -> Any: ...  ## Added by typing stub update
class PackedGeometry(PackedPrim):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def getEmbeddedGeometry(self: PackedGeometry) -> Geometry: ...
    def setEmbeddedGeometry(self: PackedGeometry, geo: Geometry) -> None: ...

    def __repr__(self: PackedGeometry) -> Any: ...  ## Added by typing stub update
class Parm:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Parm) -> Any: ...
    def node(self: Parm) -> Node: ...
    def tuple(self: Parm) -> ParmTuple: ...
    def parmTemplate(self: Parm) -> ParmTemplate: ...
    def name(self: Parm) -> str: ...
    def path(self: Parm) -> str: ...
    def description(self: Parm) -> str: ...
    def componentIndex(self: Parm) -> int: ...
    def menuContents(self: Parm) -> Tuple[str, ...]: ...
    def menuLabels(self: Parm) -> Tuple[str, ...]: ...
    def menuItems(self: Parm) -> Tuple[str, ...]: ...
    def isDynamicMenu(self: Parm) -> bool: ...
    def pressButton(self: Parm, arguments: dict={}) -> None: ...
    def setFromParm(self: Parm, src: Parm) -> None: ...
    def setFromParmDefaults(self: Parm, src: Parm) -> Any: ...
    def revertToDefaults(self: Parm) -> None: ...
    def revertToAndRestorePermanentDefaults(self: Parm) -> None: ...
    def revertToRampDefaults(self: Parm) -> Any: ...
    def hasTemporaryDefaults(self: Parm) -> bool: ...
    def isAtDefault(self: Parm, compare_temporary_defaults: bool=True, compare_expressions: bool=False) -> bool: ...
    def setExpression(self: Parm, expression: str, language: Optional[EnumValue]=None, replace_expression: bool=True) -> None: ...
    def expression(self: Parm) -> str: ...
    def expressionLanguage(self: Parm) -> EnumValue: ...
    def rawValue(self: Parm) -> str: ...
    def isShowingExpression(self: Parm) -> bool: ...
    def showExpression(self: Parm, value: bool) -> Any: ...
    def setKeyframe(self: Parm, keyframe: BaseKeyframe) -> None: ...
    def setKeyframes(self: Parm, keyframes: Sequence[BaseKeyframe]) -> None: ...
    def keyframes(self: Parm) -> Tuple[BaseKeyframe, ...]: ...
    def keyframesInRange(self: Parm, start_frame: float, end_frame: float) -> Tuple[BaseKeyframe, ...]: ...
    def keyframesBefore(self: Parm, frame: float) -> Tuple[BaseKeyframe, ...]: ...
    def keyframesAfter(self: Parm, frame: float) -> Any: ...
    def evalAsFloat(self: Parm) -> float: ...
    def evalAsFloatAtFrame(self: Parm, frame: float) -> float: ...
    def evalAsInt(self: Parm) -> int: ...
    def evalAsIntAtFrame(self: Parm, frame: float) -> int: ...
    def evalAsString(self: Parm) -> str: ...
    def evalAsStringAtFrame(self: Parm, frame: float) -> str: ...
    def evalAsGeometry(self: Parm) -> Geometry: ...
    def evalAsGeometryAtFrame(self: Parm, frame: float) -> Geometry: ...
    def evalAsJSONMap(self: Parm) -> Dict[str, str]: ...
    def evalAsJSONMapAtFrame(self: Parm, frame: float) -> Dict[str, str]: ...
    def evalAsRamp(self: Parm) -> Ramp: ...
    def evalAsRampAtFrame(self: Parm, frame: float) -> Ramp: ...
    def evalAsNode(self: Parm) -> Node: ...
    def evalAsNodeAtFrame(self: Parm, frame: float) -> Node: ...
    def evalAsNodes(self: Parm) -> Tuple[Node, ...]: ...
    def evalAsNodesAtFrame(self: Parm, frame: float) -> Tuple[Node, ...]: ...
    def evalAsNodePath(self: Parm) -> str: ...
    def evalAsNodePathAtFrame(self: Parm, frame: float) -> str: ...
    def evalAsNodePaths(self: Parm) -> Tuple[str, ...]: ...
    def evalAsNodePathsAtFrame(self: Parm, frame: float) -> Tuple[str, ...]: ...
    def unexpandedString(self: Parm) -> str: ...
    def deleteKeyframeAtFrame(self: Parm, frame: float) -> None: ...
    def deleteAllKeyframes(self: Parm) -> None: ...
    def getReferencedParm(self: Parm) -> Parm: ...
    def parmsReferencingThis(self: Parm) -> Tuple[Parm, ...]: ...
    def isLocked(self: Parm) -> bool: ...
    def lock(self: Parm, on: bool) -> None: ...
    def isAutoscoped(self: Parm) -> bool: ...
    def setAutoscope(self: Parm, on: bool) -> None: ...
    def isScoped(self: Parm) -> bool: ...
    def setScope(self: Parm, on: bool) -> None: ...
    def isAutoSelected(self: Parm) -> bool: ...
    def setAutoSelect(self: Parm, on: bool) -> None: ...
    def isSelected(self: Parm) -> bool: ...
    def setSelect(self: Parm, on: bool) -> None: ...
    def alias(self: Parm) -> str: ...
    def setAlias(self: Parm, alias_name: str) -> None: ...
    def isSpare(self: Parm) -> bool: ...
    def isTimeDependent(self: Parm) -> bool: ...
    def isMultiParmInstance(self: Parm) -> bool: ...
    def isMultiParmParent(self: Parm) -> bool: ...
    def parentMultiParm(self: Parm) -> Parm: ...
    def multiParmInstanceIndices(self: Parm) -> Tuple[int, ...]: ...
    def multiParmInstancesPerItem(self: Parm) -> int: ...
    def multiParmInstancesCount(self: Parm) -> int: ...
    def multiParmStartOffset(self: Parm) -> int: ...
    def multiParmInstances(self: Parm) -> Tuple[Parm, ...]: ...
    def insertMultiParmInstance(self: Parm, index: int) -> None: ...
    def removeMultiParmInstance(self: Parm, index: int) -> None: ...
    def containingFolders(self: Parm) -> Tuple[str, ...]: ...
    def containingFolderIndices(self: Parm) -> Tuple[int, ...]: ...
    def containingFolderSetParmTuples(self: Parm) -> Tuple[ParmTuple, ...]: ...
    def asCode(self: Parm, brief: bool=False, save_values: bool=True, save_keyframes: bool=True, save_keys_in_frames: bool=False, save_flag_values: bool=True, save_aliases: bool=True, function_name: Optional[str]=None) -> str: ...
    def createClip(self: Parm, parent_node: Node, name: str, create_new: bool, apply_immediately: bool, current_value_only: bool, create_locked: bool, set_value_to_default: bool) -> ChopNode: ...
    def appendClip(self: Parm, chop_node: Node, apply_immediately: bool, current_value_only: bool, create_locked: bool, set_value_to_default: bool) -> None: ...
    def overrideTrack(self: Parm) -> Optional[Track]: ...
    def isOverrideTrackActive(self: Parm) -> bool: ...
    def copyToParmClipboard(self: Parm) -> None: ...
    def isDisabled(self: Parm) -> bool: ...
    def disable(self: Parm, on: bool) -> None: ...
    def isHidden(self: Parm) -> bool: ...
    def hide(self: Parm, on: bool) -> None: ...
    def isVisible(self: Parm) -> bool: ...
    def isConstrained(self: Parm) -> bool: ...
    def keyframeExtrapolation(self: Parm, before: bool) -> Any: ...
    def setKeyframeExtrapolation(self: Parm, before: bool, extrapol: EnumValue) -> None: ...
    def keyframesRefit(self: Parm, refit: bool, refit_tol: float, refit_preserve_extrema: bool, refit_bezier: bool, resample: bool, resample_rate: float, resample_tol: float, range: bool, range_start: float, range_end: float, bake_chop: EnumValue) -> None: ...
    def uiBackgroundColor(self: Parm) -> Color: ...
    def eval(self: Parm) -> Union[int, float, str]: ...
    def evalAtFrame(self: Parm, frame: float) -> Union[int, float, str]: ...
    def evalAtTime(self: Parm, time: float) -> Union[int, float, str]: ...

    def __repr__(self: Parm) -> Any: ...  ## Added by typing stub update
    def _setPending(self: Parm, *args: Dict[str, str]) -> Any: ...  ## Added by typing stub update
    def _set(self: Parm, *args: Dict[str, str]) -> Any: ...  ## Added by typing stub update
    def _setNone(self: Parm) -> Any: ...  ## Added by typing stub update
    def _setNonePending(self: Parm) -> Any: ...  ## Added by typing stub update
    def _clipData(self: Parm, start: float, end: float, binary: bool=True, use_blosc_compression: bool=True, sample_rate: int=0) -> Any: ...  ## Added by typing stub update
    def _setClipData(self: Parm, *args: str, **kwargs: bool) -> Any: ...  ## Added by typing stub update
    def _saveClip(self: Parm, file_name: str, start: float, end: float, sample_rate: int=0) -> Any: ...  ## Added by typing stub update
    def _loadClip(self: Parm, *args: str, **kwargs: float) -> Any: ...  ## Added by typing stub update
    def _moveKeyframes(self: Parm, keyframe_ids: Sequence[int], time_offsets: Sequence[float], value_offsets: Sequence[float]) -> Any: ...  ## Added by typing stub update
    def _deleteKeyframes(self: Parm, keyframe_ids: Sequence[int]) -> Any: ...  ## Added by typing stub update
    def _moveAllKeyframes(self: Parm, time_offset: float, value_offset: float) -> Any: ...  ## Added by typing stub update
    def set(self: Parm, value: Union[int, float, str, Parm, Ramp], language: Optional[EnumValue]=None, follow_parm_reference: bool=True) -> None: ...  ## Added by typing stub update
class ParameterEditor(PathBasedPaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def scrollPosition(self: ParameterEditor) -> Vector2: ...
    def setScrollPosition(self: ParameterEditor, pos: Vector2) -> None: ...
    def setFilterEnabled(self: ParameterEditor, on: bool) -> None: ...
    def filterEnabled(self: ParameterEditor) -> bool: ...
    def setFilterPattern(self: ParameterEditor, pattern: str) -> None: ...
    def filterPattern(self: ParameterEditor) -> str: ...
    def setFilterExactMatch(self: ParameterEditor, on: bool) -> None: ...
    def filterExactMatch(self: ParameterEditor) -> bool: ...
    def setFilterMode(self: ParameterEditor, mode: EnumValue) -> None: ...
    def filterMode(self: ParameterEditor) -> EnumValue: ...
    def setFilterCriteria(self: ParameterEditor, criteria: EnumValue) -> None: ...
    def filterCriteria(self: ParameterEditor) -> EnumValue: ...
    def isShowingParmDialog(self: ParameterEditor) -> bool: ...
    def setShowParmDialog(self: ParameterEditor, show: bool) -> None: ...
    def setMultiParmTab(self: ParameterEditor, parm: Parm, tab_index: int) -> None: ...
    def multiParmTab(self: ParameterEditor, parm: Parm) -> int: ...
    def visibleParms(self: ParameterEditor) -> Tuple[ParmTuple, ...]: ...

    def __repr__(self: ParameterEditor) -> Any: ...  ## Added by typing stub update
    def _scrollToParms(self: ParameterEditor, parms: str) -> Any: ...  ## Added by typing stub update
    def _filterParms(self: ParameterEditor, parms: str) -> Any: ...  ## Added by typing stub update
class ParmTuple:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: ParmTuple) -> Any: ...
    def node(self: ParmTuple) -> Node: ...
    def parmTemplate(self: ParmTuple) -> ParmTemplate: ...
    def name(self: ParmTuple) -> str: ...
    def description(self: ParmTuple) -> str: ...
    def setPending(self: ParmTuple, values: Sequence[Ramp]) -> None: ...
    def revertToDefaults(self: ParmTuple) -> None: ...
    def revertToAndRestorePermanentDefaults(self: ParmTuple) -> None: ...
    def isAtDefault(self: ParmTuple, compare_temporary_defaults: bool=True, compare_expressions: bool=False) -> bool: ...
    def evalAsFloats(self: ParmTuple) -> Tuple[float, ...]: ...
    def evalAsFloatsAtFrame(self: ParmTuple, frame: float) -> Tuple[float, ...]: ...
    def evalAsInts(self: ParmTuple) -> Tuple[int, ...]: ...
    def evalAsIntsAtFrame(self: ParmTuple, frame: float) -> Tuple[int, ...]: ...
    def evalAsStrings(self: ParmTuple) -> Tuple[str, ...]: ...
    def evalAsStringsAtFrame(self: ParmTuple, frame: float) -> Tuple[str, ...]: ...
    def evalAsRamps(self: ParmTuple) -> Ramp: ...
    def evalAsRampsAtFrame(self: ParmTuple, frame: float) -> Ramp: ...
    def evalAsGeometries(self: ParmTuple) -> Tuple[Geometry, ...]: ...
    def evalAsGeometriesAtFrame(self: ParmTuple, frame: float) -> Tuple[Geometry, ...]: ...
    def evalAsJSONMaps(self: ParmTuple) -> Tuple[Dict[str, str], ...]: ...
    def evalAsJSONMapsAtFrame(self: ParmTuple, frame: float) -> Tuple[Dict[str, str], ...]: ...
    def lock(self: ParmTuple, bool_values: bool) -> None: ...
    def setAutoscope(self: ParmTuple, bool_values: Sequence[bool]) -> None: ...
    def isSpare(self: ParmTuple) -> bool: ...
    def isTimeDependent(self: ParmTuple) -> bool: ...
    def isMultiParmInstance(self: ParmTuple) -> bool: ...
    def isMultiParmParent(self: ParmTuple) -> bool: ...
    def parentMultiParm(self: ParmTuple) -> Parm: ...
    def multiParmInstanceIndices(self: ParmTuple) -> Tuple[int, ...]: ...
    def multiParmInstancesPerItem(self: ParmTuple) -> int: ...
    def multiParmInstancesCount(self: ParmTuple) -> int: ...
    def multiParmStartOffset(self: ParmTuple) -> int: ...
    def multiParmInstances(self: ParmTuple) -> Tuple[ParmTuple, ...]: ...
    def containingFolders(self: ParmTuple) -> Any: ...
    def containingFolderIndices(self: ParmTuple) -> Any: ...
    def containingFolderSetParmTuples(self: ParmTuple) -> Any: ...
    def setKeyframe(self: ParmTuple, keyframe_vector: Sequence[BaseKeyframe]) -> None: ...
    def deleteKeyframeAtFrame(self: ParmTuple, frame: float) -> None: ...
    def deleteAllKeyframes(self: ParmTuple) -> None: ...
    def __getitem__(self: ParmTuple, index: int) -> Parm: ...
    def __len__(self: ParmTuple) -> int: ...
    def createClip(self: ParmTuple, parent_node: Node, name: str, create_new: bool, apply_immediately: bool, current_value_only: bool, create_locked: bool, set_value_to_default: bool) -> ChopNode: ...
    def appendClip(self: ParmTuple, chop_node: Node, apply_immediately: bool, current_value_only: bool, create_locked: bool, set_value_to_default: bool) -> None: ...
    def copyToParmClipboard(self: ParmTuple) -> None: ...
    def asCode(self: ParmTuple, brief: bool=False, save_values: bool=True, save_keyframes: bool=True, save_keys_in_frames: bool=False, save_flag_values: bool=True, save_aliases: bool=True, function_name: Optional[str]=None) -> Any: ...
    def help(self: ParmTuple) -> Any: ...
    def helpUrl(self: ParmTuple) -> Any: ...
    def isDisabled(self: ParmTuple) -> bool: ...
    def disable(self: ParmTuple, on: bool) -> None: ...
    def isHidden(self: ParmTuple) -> bool: ...
    def hide(self: ParmTuple, on: bool) -> None: ...
    def isConstrained(self: ParmTuple) -> Any: ...
    def isShowingExpression(self: ParmTuple) -> Any: ...
    def showExpression(self: ParmTuple, value: bool) -> Any: ...
    def eval(self: ParmTuple) -> Union[Tuple[int, ...], Tuple[float, ...], Tuple[str, ...], Ramp]: ...
    def evalAtFrame(self: ParmTuple, frame: float) -> Union[Tuple[int, ...], Tuple[float, ...], Tuple[str, ...], Ramp]: ...
    def evalAtTime(self: ParmTuple, time: float) -> Union[Tuple[int, ...], Tuple[float, ...], Tuple[str, ...], Ramp]: ...

    def __repr__(self: ParmTuple) -> Any: ...  ## Added by typing stub update
    def _set(self: ParmTuple, *args: Sequence[Ramp]) -> Any: ...  ## Added by typing stub update
    def _clipData(self: ParmTuple, start: float, end: float, binary: bool=True, use_blosc_compression: bool=True, sample_rate: int=0) -> Any: ...  ## Added by typing stub update
    def _setClipData(self: ParmTuple, *args: str, **kwargs: bool) -> Any: ...  ## Added by typing stub update
    def _saveClip(self: ParmTuple, file_name: str, start: float, end: float, sample_rate: int=0) -> Any: ...  ## Added by typing stub update
    def _loadClip(self: ParmTuple, *args: str, **kwargs: float) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: ParmTuple) -> Any: ...  ## Added by typing stub update
    def __iter__(self: ParmTuple) -> Iterator[Parm]: ...  ## Added by typing stub update
    def set(self: ParmTuple, value: Union[Iterable[int], Iterable[float], Iterable[str], Iterable[Parm], ParmTuple], language: Optional[EnumValue]=None, follow_parm_reference: bool=True) -> None: ...  ## Added by typing stub update
class perfMon:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def startProfile(title: str, options: Optional[PerfMonRecordOptions]=None) -> PerfMonProfile: ...
    @staticmethod
    def loadProfile(file_path: str) -> PerfMonProfile: ...
    @staticmethod
    def activeProfile() -> Optional[PerfMonProfile]: ...
    @staticmethod
    def startTimedEvent(description: str, auto_nest_events: bool=True) -> PerfMonEvent: ...
    @staticmethod
    def startEvent(description: str, auto_nest_events: bool=True) -> PerfMonEvent: ...
    @staticmethod
    def startTimedCookEvent(description: str, node: Node) -> PerfMonEvent: ...
    @staticmethod
    def startCookEvent(description: str, node: Node) -> PerfMonEvent: ...
    @staticmethod
    def startPaneEvent(panetype: str, operation: str) -> PerfMonEvent: ...
    @staticmethod
    def isRecording() -> bool: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class PerfMonEvent:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def id(self: PerfMonEvent) -> int: ...
    def name(self: PerfMonEvent) -> str: ...
    def object(self: PerfMonEvent) -> str: ...
    def isAutoNestEnabled(self: PerfMonEvent) -> bool: ...
    def stop(self: PerfMonEvent) -> None: ...
    def isTiming(self: PerfMonEvent) -> bool: ...
    def isRunning(self: PerfMonEvent) -> bool: ...
    def startTime(self: PerfMonEvent) -> float: ...
    def __enter__(self: PerfMonEvent) -> Any: ...
    def __exit__(self: PerfMonEvent, type, value, traceback) -> Any: ...

    def __repr__(self: PerfMonEvent) -> Any: ...  ## Added by typing stub update
class PerfMonProfile:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def id(self: PerfMonProfile) -> int: ...
    def title(self: PerfMonProfile) -> str: ...
    def isActive(self: PerfMonProfile) -> bool: ...
    def isPaused(self: PerfMonProfile) -> bool: ...
    def isRecordingCookStats(self: PerfMonProfile) -> bool: ...
    def isRecordingPDGCookStats(self: PerfMonProfile) -> bool: ...
    def isRecordingSolveStats(self: PerfMonProfile) -> bool: ...
    def isRecordingDrawStats(self: PerfMonProfile) -> bool: ...
    def isRecordingGPUDrawStats(self: PerfMonProfile) -> bool: ...
    def isRecordingViewportStats(self: PerfMonProfile) -> bool: ...
    def isRecordingScriptStats(self: PerfMonProfile) -> bool: ...
    def isRecordingRenderStats(self: PerfMonProfile) -> bool: ...
    def isRecordingThreadStats(self: PerfMonProfile) -> bool: ...
    def isRecordingFrameStats(self: PerfMonProfile) -> bool: ...
    def isRecordingMemoryStats(self: PerfMonProfile) -> Any: ...
    def isRecordingErrors(self: PerfMonProfile) -> bool: ...
    def stop(self: PerfMonProfile) -> None: ...
    def cancel(self: PerfMonProfile) -> None: ...
    def pause(self: PerfMonProfile) -> None: ...
    def resume(self: PerfMonProfile) -> None: ...
    def save(self: PerfMonProfile, file_path: str) -> None: ...
    def exportAsCSV(self: PerfMonProfile, file_path: str) -> None: ...

    def __repr__(self: PerfMonProfile) -> Any: ...  ## Added by typing stub update
    def _stats(self: PerfMonProfile) -> Any: ...  ## Added by typing stub update
    def stats(self: PerfMonProfile) -> Dict[str, Any]: ...  ## Added by typing stub update
class PerfMonRecordOptions:
    thisown: Any = ...
    def __init__(self: PerfMonRecordOptions, cook_stats: bool=True, pdg_cook_stats: bool=True, solve_stats: bool=True, draw_stats: bool=True, gpu_draw_stats: bool=False, viewport_stats: bool=True, script_stats: bool=True, render_stats: bool=True, thread_stats: bool=False, frame_stats: bool=True, memory_stats: bool=False, errors: bool=True, pane_stats: bool=True) -> None: ...
    __swig_destroy__: Any = ...
    def recordCookStats(self: PerfMonRecordOptions) -> bool: ...
    def recordPDGCookStats(self: PerfMonRecordOptions) -> bool: ...
    def recordSolveStats(self: PerfMonRecordOptions) -> bool: ...
    def recordDrawStats(self: PerfMonRecordOptions) -> bool: ...
    def recordGPUDrawStats(self: PerfMonRecordOptions) -> bool: ...
    def recordViewportStats(self: PerfMonRecordOptions) -> bool: ...
    def recordPaneStats(self: PerfMonRecordOptions) -> bool: ...
    def recordScriptStats(self: PerfMonRecordOptions) -> bool: ...
    def recordRenderStats(self: PerfMonRecordOptions) -> bool: ...
    def recordThreadStats(self: PerfMonRecordOptions) -> bool: ...
    def recordFrameStats(self: PerfMonRecordOptions) -> bool: ...
    def recordMemoryStats(self: PerfMonRecordOptions) -> bool: ...
    def recordErrors(self: PerfMonRecordOptions) -> bool: ...
    def setRecordCookStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordPDGCookStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordSolveStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordDrawStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordGPUDrawStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordViewportStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordPaneStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordScriptStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordRenderStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordThreadStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordFrameStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordMemoryStats(self: PerfMonRecordOptions, record: bool) -> None: ...
    def setRecordErrors(self: PerfMonRecordOptions, record: bool) -> None: ...

    def __repr__(self: PerfMonRecordOptions) -> Any: ...  ## Added by typing stub update
class PerformanceMonitor(PaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isLiveUpdatesEnabled(self: PerformanceMonitor) -> bool: ...
    def enableLiveUpdates(self: PerformanceMonitor, on: bool) -> None: ...
    def isRecording(self: PerformanceMonitor) -> bool: ...
    def startRecording(self: PerformanceMonitor) -> None: ...
    def stopRecording(self: PerformanceMonitor) -> None: ...
    def isSamplingCookStats(self: PerformanceMonitor) -> bool: ...
    def isSamplingPDGCookStats(self: PerformanceMonitor) -> bool: ...
    def isSamplingErrors(self: PerformanceMonitor) -> bool: ...
    def isSamplingFrameStats(self: PerformanceMonitor) -> bool: ...
    def isSamplingMemoryStats(self: PerformanceMonitor) -> Any: ...
    def isSamplingObjectDrawStats(self: PerformanceMonitor) -> bool: ...
    def isSamplingObjectGPUDrawStats(self: PerformanceMonitor) -> bool: ...
    def isSamplingScriptStats(self: PerformanceMonitor) -> bool: ...
    def isSamplingSolveStats(self: PerformanceMonitor) -> bool: ...
    def isSamplingThreadStats(self: PerformanceMonitor) -> bool: ...
    def isSamplingViewportStats(self: PerformanceMonitor) -> bool: ...
    def sampleCookStats(self: PerformanceMonitor, on: bool) -> None: ...
    def samplePDGCookStats(self: PerformanceMonitor, on: bool) -> None: ...
    def sampleErrors(self: PerformanceMonitor, on: bool) -> None: ...
    def sampleFrameStats(self: PerformanceMonitor, on: bool) -> None: ...
    def sampleMemoryStats(self: PerformanceMonitor, on: bool) -> Any: ...
    def sampleObjectDrawStats(self: PerformanceMonitor, on: bool) -> None: ...
    def sampleObjectGPUDrawStats(self: PerformanceMonitor, on: bool) -> None: ...
    def sampleScriptStats(self: PerformanceMonitor, on: bool) -> None: ...
    def sampleSolveStats(self: PerformanceMonitor, on: bool) -> None: ...
    def sampleThreadStats(self: PerformanceMonitor, on: bool) -> None: ...
    def sampleViewportStats(self: PerformanceMonitor, on: bool) -> None: ...
    def objectView(self: PerformanceMonitor) -> EnumValue: ...
    def setObjectView(self: PerformanceMonitor, view: EnumValue) -> None: ...
    def timeFormat(self: PerformanceMonitor) -> EnumValue: ...
    def setTimeFormat(self: PerformanceMonitor, format: EnumValue) -> None: ...
    def timeUnit(self: PerformanceMonitor) -> EnumValue: ...
    def setTimeUnit(self: PerformanceMonitor, unit: EnumValue) -> None: ...

    def __repr__(self: PerformanceMonitor) -> Any: ...  ## Added by typing stub update
class playbar:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def isPlaying() -> bool: ...
    @staticmethod
    def play() -> None: ...
    @staticmethod
    def stop() -> None: ...
    @staticmethod
    def reverse() -> None: ...
    @staticmethod
    def jumpToNextKeyframe() -> Any: ...
    @staticmethod
    def jumpToPreviousKeyframe() -> Any: ...
    @staticmethod
    def playMode() -> EnumValue: ...
    @staticmethod
    def setPlayMode(mode: EnumValue) -> None: ...
    @staticmethod
    def frameIncrement() -> float: ...
    @staticmethod
    def setFrameIncrement(increment: float) -> None: ...
    @staticmethod
    def playbackRange() -> Vector2: ...
    @staticmethod
    def setPlaybackRange(start: float, end: float) -> None: ...
    @staticmethod
    def isRangeRestricted() -> bool: ...
    @staticmethod
    def setRestrictRange(on: bool) -> None: ...
    @staticmethod
    def usesIntegerFrames() -> bool: ...
    @staticmethod
    def setUseIntegerFrames(on: bool) -> None: ...
    @staticmethod
    def isRealTime() -> bool: ...
    @staticmethod
    def setRealTime(on: bool) -> None: ...
    @staticmethod
    def realTimeFactor() -> float: ...
    @staticmethod
    def setRealTimeFactor(factor: float) -> None: ...
    @staticmethod
    def isRealTimeSkipping() -> bool: ...
    @staticmethod
    def setRealTimeSkipping(on: bool) -> None: ...
    @staticmethod
    def isAudioShown() -> bool: ...
    @staticmethod
    def showAudio(on: bool) -> None: ...
    @staticmethod
    def areKeysShown() -> bool: ...
    @staticmethod
    def showKeys(on: bool) -> None: ...
    @staticmethod
    def isSimCacheShown() -> Any: ...
    @staticmethod
    def showSimCache(on: bool) -> Any: ...
    @staticmethod
    def isRangeSliderShown() -> bool: ...
    @staticmethod
    def showRangeSlider(on: bool) -> None: ...
    @staticmethod
    def areTicksShown() -> bool: ...
    @staticmethod
    def showTicks(on: bool) -> None: ...
    @staticmethod
    def moveToBottom() -> None: ...
    @staticmethod
    def moveToPane(pane: Pane) -> None: ...
    @staticmethod
    def addEventCallback(callback) -> None: ...
    @staticmethod
    def removeEventCallback(callback) -> None: ...
    @staticmethod
    def clearEventCallbacks() -> None: ...
    @staticmethod
    def eventCallbacks() -> Tuple[Callable, ...]: ...
    @staticmethod
    def selectedKeyframes() -> Any: ...
    @staticmethod
    def selectionRange() -> Optional[Vector2]: ...
    @staticmethod
    def selectionRanges() -> Tuple[Vector2, ...]: ...
    @staticmethod
    def timelineRange() -> Any: ...
    @staticmethod
    def timeRange() -> Vector2: ...
    @staticmethod
    def setTimeRange(start: float, end: float) -> None: ...
    @staticmethod
    def frameRange() -> Vector2: ...
    @staticmethod
    def setFrameRange(start: float, end: float) -> None: ...
    @staticmethod
    def channelList() -> ChannelList: ...
    @staticmethod
    def setChannelList() -> None: ...
    @staticmethod
    def channelListFromSelection() -> ChannelList: ...
    @staticmethod
    def channelListFromNodes(nodes: Sequence[Node]) -> ChannelList: ...
    @staticmethod
    def channelListFromParms(parms: Sequence[Parm]) -> ChannelList: ...
    @staticmethod
    def channelListFromParmTuples(parms: Sequence[ParmTuple]) -> ChannelList: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class Point:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Point) -> Any: ...
    def geometry(self: Point) -> Geometry: ...
    def number(self: Point) -> int: ...
    def position(self: Point) -> Vector3: ...
    def setPosition(self: Point, position: Union[Sequence[float], Vector3]) -> None: ...
    def weight(self: Point) -> float: ...
    def setWeight(self: Point, weight: float) -> None: ...
    def attribType(self: Point) -> EnumValue: ...
    def floatAttribValue(self: Point, name_or_attrib: Union[str, Attrib]) -> float: ...
    def floatListAttribValue(self: Point, name_or_attrib: Union[str, Attrib]) -> Tuple[float, ...]: ...
    def intAttribValue(self: Point, name_or_attrib: Union[str, Attrib]) -> int: ...
    def intListAttribValue(self: Point, name_or_attrib: Union[str, Attrib]) -> Tuple[int, ...]: ...
    def stringAttribValue(self: Point, name_or_attrib: Union[str, Attrib]) -> str: ...
    def stringListAttribValue(self: Point, name_or_attrib: Union[str, Attrib]) -> Tuple[str, ...]: ...
    def dictAttribValue(self: Point, name_or_attrib: Union[str, Attrib]) -> dict: ...
    def dictListAttribValue(self: Point, name_or_attrib: Union[str, Attrib]) -> Tuple[str, ...]: ...
    def setAttribValue(self: Point, name_or_attrib: Union[str, Attrib], attrib_value: Dict[str, Any]) -> None: ...
    def attribValue(self: Point, name_or_attrib: Union[str, Attrib]) -> Union[Union[int, float, str, tuple],dict]: ...
    def vertices(self: Point) -> Tuple[Vertex, ...]: ...
    def prims(self: Point) -> Tuple[Prim, ...]: ...

    def __repr__(self: Point) -> Any: ...  ## Added by typing stub update
    def _getPointParent(self: Point) -> Any: ...  ## Added by typing stub update
    def _getPointTransform(self: Point) -> Any: ...  ## Added by typing stub update
    def _attribInfo(self: Point, name: str, attr_data_type: int, attr_size: int, is_array_type: bool) -> Any: ...  ## Added by typing stub update
class PointGroup:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: PointGroup) -> Any: ...
    def geometry(self: PointGroup) -> Geometry: ...
    def name(self: PointGroup) -> None: ...
    def iterPoints(self: PointGroup) -> Iterator[Point]: ...
    def points(self: PointGroup) -> Tuple[Point, ...]: ...
    def contains(self: PointGroup, point: Point) -> bool: ...
    def isOrdered(self: PointGroup) -> bool: ...
    def add(self: PointGroup, point_or_list_or_point_group: Union[Vector3, Point, Sequence[Point], PointGroup]) -> None: ...
    def remove(self: PointGroup, point_or_list_or_point_group: Union[Vector3, Point, Sequence[Point], PointGroup]) -> None: ...
    def clear(self: PointGroup) -> None: ...
    def destroy(self: PointGroup) -> None: ...
    def pointCount(self: PointGroup, point) -> int: ...
    def optionType(self: PointGroup, name: str) -> EnumValue: ...
    def setOption(self: PointGroup, name: str, value, type_hint: EnumValue=fieldType.NoSuchField) -> None: ...
    def removeOption(self: PointGroup, name: str) -> None: ...
    def dataId(self: PointGroup) -> None: ...
    def incrementDataId(self: PointGroup) -> None: ...
    def options(self: PointGroup, name: str) -> Union[bool, int, float, str, Vector2, Vector4, Quaternion, Matrix3, Matrix4, Tuple[int, ...], Tuple[float, ...]]: ...
    def option(self: PointGroup, option_name: str) -> Any: ...

    def __repr__(self: PointGroup) -> Any: ...  ## Added by typing stub update
class Polygon(Face):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: Polygon) -> Any: ...  ## Added by typing stub update
class PrimGroup:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: PrimGroup) -> Any: ...
    def geometry(self: PrimGroup) -> Geometry: ...
    def name(self: PrimGroup) -> None: ...
    def iterPrims(self: PrimGroup) -> Iterator[Prim]: ...
    def prims(self: PrimGroup) -> Tuple[Prim, ...]: ...
    def contains(self: PrimGroup, prim: Prim) -> bool: ...
    def isOrdered(self: PrimGroup) -> bool: ...
    def add(self: PrimGroup, prim_or_list_or_prim_group: Union[Prim, Sequence[Prim], PrimGroup]) -> None: ...
    def remove(self: PrimGroup, prim_or_list_or_prim_group: Union[Prim, Sequence[Prim], PrimGroup]) -> None: ...
    def clear(self: PrimGroup) -> None: ...
    def destroy(self: PrimGroup) -> None: ...
    def primCount(self: PrimGroup) -> int: ...
    def optionType(self: PrimGroup, name: str) -> EnumValue: ...
    def setOption(self: PrimGroup, name: str, value, type_hint: EnumValue=fieldType.NoSuchField) -> None: ...
    def removeOption(self: PrimGroup, name: str) -> None: ...
    def dataId(self: PrimGroup) -> None: ...
    def incrementDataId(self: PrimGroup) -> None: ...
    def options(self: PrimGroup, name: str) -> Union[bool, int, float, str, Vector2, Vector4, Quaternion, Matrix3, Matrix4, Tuple[int, ...], Tuple[float, ...]]: ...
    def option(self: PrimGroup, option_name: str) -> Any: ...

    def __repr__(self: PrimGroup) -> Any: ...  ## Added by typing stub update
class properties:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def classes(tags: Optional[str]=None) -> Tuple[str, ...]: ...
    @staticmethod
    def classLabel(class_name: str) -> str: ...
    @staticmethod
    def categories(class_name: str) -> Tuple[str, ...]: ...
    @staticmethod
    def parameters(class_name: str, category_name: str) -> Tuple[str, ...]: ...
    @staticmethod
    def parmTemplate(class_name: str, parm_name: str) -> ParmTemplate: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class PythonPanel(PathBasedPaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def activeInterface(self: PythonPanel) -> PythonPanelInterface: ...
    def setActiveInterface(self: PythonPanel, interface: PythonPanelInterface) -> None: ...
    def reloadActiveInterface(self: PythonPanel) -> None: ...
    def showToolbar(self: PythonPanel, show: bool) -> None: ...
    def isToolbarShown(self: PythonPanel) -> bool: ...
    def expandToolbar(self: PythonPanel, expand: bool) -> Any: ...
    def isToolbarExpanded(self: PythonPanel) -> bool: ...
    def label(self: PythonPanel) -> str: ...
    def setLabel(self: PythonPanel, label: str) -> None: ...
    def activeInterfaceScriptErrors(self: PythonPanel) -> str: ...
    def activeInterfaceRootWidget(self: PythonPanel) -> QtWidgets.QWidget: ...

    def __repr__(self: PythonPanel) -> Any: ...  ## Added by typing stub update
class pypanel:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def installFile(file_path: str) -> None: ...
    @staticmethod
    def interfacesInFile(file_path: str) -> Tuple[PythonPanelInterface, ...]: ...
    @staticmethod
    def interfaces() -> Dict[str, PythonPanelInterface]: ...
    @staticmethod
    def interfaceByName(name: str) -> PythonPanelInterface: ...
    @staticmethod
    def setMenuInterfaces(names: Sequence[str]) -> None: ...
    @staticmethod
    def menuInterfaces() -> Tuple[str, ...]: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class PythonPanelInterface:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: PythonPanelInterface) -> Any: ...
    def id(self: PythonPanelInterface) -> int: ...
    def name(self: PythonPanelInterface) -> str: ...
    def setName(self: PythonPanelInterface, name: str) -> None: ...
    def label(self: PythonPanelInterface) -> str: ...
    def setLabel(self: PythonPanelInterface, label: str) -> None: ...
    def icon(self: PythonPanelInterface) -> str: ...
    def setIcon(self: PythonPanelInterface, icon: str) -> None: ...
    def script(self: PythonPanelInterface) -> str: ...
    def setScript(self: PythonPanelInterface, script: str) -> None: ...
    def help(self: PythonPanelInterface) -> Any: ...
    def setHelp(self: PythonPanelInterface, script: str) -> Any: ...
    def helpURL(self: PythonPanelInterface) -> Any: ...
    def setHelpURL(self: PythonPanelInterface, script: str) -> Any: ...
    def filePath(self: PythonPanelInterface) -> str: ...
    def setFilePath(self: PythonPanelInterface, script: str) -> None: ...

    def __repr__(self: PythonPanelInterface) -> Any: ...  ## Added by typing stub update
class Quadric(Prim):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def transform(self: Quadric) -> Matrix3: ...
    def getTransform(self: Quadric) -> Any: ...
    def vertex(self: Quadric, index: int) -> Vertex: ...

    def __repr__(self: Quadric) -> Any: ...  ## Added by typing stub update
class Quaternion:
    thisown: Any = ...
    def __init__(self: Quaternion) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: Quaternion, quaternion: Quaternion, tolerance: float=0.00001) -> bool: ...
    def almostEqual(self: Quaternion, quaternion: Quaternion, tolerance: float=0.00001) -> bool: ...
    def __hash__(self: Quaternion) -> Any: ...
    def __getitem__(self: Quaternion, index: int) -> float: ...
    def __setitem__(self: Quaternion, index: int, value: float) -> None: ...
    def __len__(self: Quaternion) -> int: ...
    def setTo(self: Quaternion, tuple: Sequence[float]) -> None: ...
    def setToRotationMatrix(self: Quaternion, matrix3_or_matrix4: Union[Matrix3, Matrix4]) -> None: ...
    def setToAngleAxis(self: Quaternion, angle_in_deg: float, axis: Sequence[float]) -> None: ...
    def setToVectors(self: Quaternion, a: Vector3, b: Vector3) -> None: ...
    def setToEulerRotates(self: Quaternion, angles_in_deg: Sequence[float], rotate_order: str="Any") -> None: ...
    def conjugate(self: Quaternion) -> Quaternion: ...
    def inverse(self: Quaternion) -> Quaternion: ...
    def dot(self: Quaternion, other: Quaternion) -> float: ...
    def __add__(self: Quaternion, quaternion: Quaternion) -> Quaternion: ...
    def __sub__(self: Quaternion, quaternion: Quaternion) -> Quaternion: ...
    def __mul__(self: Quaternion, quaternion_or_scalar: Union[float, Quaternion]) -> Quaternion: ...
    def slerp(self: Quaternion, other: Quaternion, fraction: float) -> Quaternion: ...
    def normalized(self: Quaternion) -> Quaternion: ...
    def length(self: Quaternion) -> float: ...
    def extractRotationMatrix3(self: Quaternion) -> Matrix3: ...
    def extractAngleAxis(self: Quaternion) -> Tuple[float, Vector3]: ...
    def extractEulerRotates(self: Quaternion, rotate_order: str="Any") -> Vector3: ...
    def rotate(self: Quaternion, vec: Vector3) -> Vector3: ...

    def __str__(self: Quaternion) -> Any: ...  ## Added by typing stub update
    def __repr__(self: Quaternion) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Quaternion) -> Any: ...  ## Added by typing stub update
class qt:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def styleSheet(file_path: Optional[str]=None) -> str: ...
    @staticmethod
    def inchesToPixels(inches: float) -> float: ...
    @staticmethod
    def pixelsToInches(pixels: float) -> float: ...
    @staticmethod
    def skipClosingMenusForCurrentButtonPress() -> None: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _mainWindow() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _floatingPanelWindow(panel: FloatingPanel) -> QtWidgets.QWidget: ...  ## Added by typing stub update
    @staticmethod
    def _createWindow() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _createDialog() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _createMenu() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _createIcon(icon_name: str, width: int, height: int) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _createParmDialog(hom_node: Node, showTitleBar: bool, compact: bool, labelsize: float) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _setParmDialogNode(widget, hom_node: Node) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _parmDialogNode(widget) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _getParmDialogValueNames(widget) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _getParmDialogValue(widget, name: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _setParmDialogValue(widget, name: str, value: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _pressParmDialogButton(widget, name: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _getParmDialogVisibleParms(widget) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _getColor(color_name: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _getCursor(cursor_name: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _getBrush(color_name: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _qtKeyToUIKey(qtKey: int, qtKeymodifiers: int) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _qtKeyToString(qtKey: int, qtKeymodifiers: int, qtkeystring: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _launchRenderGalleryBackgroundRender(delegate: str, usd_filepath: str, rendersettings_prim: str, override_camera: str, override_res_x: int, override_res_y: int, lopnet_path: str, item_id: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _renderGalleryBackgroundRenderMouseClick(x: int, y: int, lopnet_path: str, item_id: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _stopRenderGalleryBackgroundRender(lopnet_path: str, item_id: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _channelPathMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _chopTrackPathMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryEntryMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryEntryNameMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _itemPathMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _nodeFlagPathMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _nodePathMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _orboltNodeTypeNameMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _paneTabNameMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _parmPathMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _persistentHandleNameMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _primitivePathMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _shelfNameMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _shelfToolNameMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _takeNameMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _usdPrimitivePathMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _usdPrimitivePythonMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _usdPropertyPathMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _usdPropertyPythonMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _assetGalleryEntryMimeType() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryNameRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryThumbRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryCreationDateRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryStarRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryDiffMarkerRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryColorRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryTagsRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryThumbValidRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryMetadataRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _gallerySnapshotFileRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _gallerySnapshotRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _galleryRenderingRole() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def mainWindow() -> QtWidgets.QMainWindow: ...  ## Added by typing stub update
    @staticmethod
    def Icon(icon_name: str, width: Optional[int]=None, height: Optional[int]=None) -> QtGui.QIcon: ...  ## Added by typing stub update
class RadialItem:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def destroy(self: RadialItem) -> None: ...
    def type(self: RadialItem) -> EnumValue: ...

    def __repr__(self: RadialItem) -> Any: ...  ## Added by typing stub update
class RadialScriptItem(RadialItem):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isSubmenu(self: RadialScriptItem) -> bool: ...
    def label(self: RadialScriptItem) -> str: ...
    def setLabel(self: RadialScriptItem) -> None: ...
    def icon(self: RadialScriptItem) -> str: ...
    def setIcon(self: RadialScriptItem) -> None: ...
    def check(self: RadialScriptItem) -> str: ...
    def setCheck(self: RadialScriptItem) -> None: ...
    def script(self: RadialScriptItem) -> str: ...
    def setScript(self: RadialScriptItem) -> None: ...
    def shortcut(self: RadialScriptItem) -> str: ...
    def setShortcut(self: RadialScriptItem) -> None: ...
    def setActionCallback(self: RadialScriptItem) -> None: ...
    def setCheckCallback(self: RadialScriptItem) -> None: ...

    def __repr__(self: RadialScriptItem) -> Any: ...  ## Added by typing stub update
class RadialSubmenu(RadialItem):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def label(self: RadialSubmenu) -> str: ...
    def setLabel(self: RadialSubmenu) -> None: ...
    def shortcut(self: RadialSubmenu) -> str: ...
    def setShortcut(self: RadialSubmenu) -> None: ...
    def remove(self: RadialSubmenu, location: EnumValue) -> Any: ...
    def item(self: RadialSubmenu, radial_item_location: EnumValue) -> RadialItem: ...
    def items(self: RadialSubmenu) -> EnumValue: ...
    def createSubmenu(self: RadialSubmenu, radial_item_location: EnumValue, label: Optional[str]=None) -> RadialSubmenu: ...
    def createScriptItem(self: RadialSubmenu, radial_item_location: EnumValue, label: Optional[str]=None, icon: Optional[str]=None, check: Optional[str]=None, script: Optional[str]=None) -> RadialScriptItem: ...

    def __repr__(self: RadialSubmenu) -> Any: ...  ## Added by typing stub update
class RadialMenu:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def destroy(self: RadialMenu) -> None: ...
    def name(self: RadialMenu) -> str: ...
    def categories(self: RadialMenu) -> str: ...
    def setCategories(self: RadialMenu, categories: str) -> None: ...
    def sourceFile(self: RadialMenu) -> str: ...
    def save(self: RadialMenu, filename: str) -> None: ...
    def root(self: RadialMenu) -> RadialItem: ...
    def label(self: RadialMenu) -> str: ...
    def setLabel(self: RadialMenu) -> None: ...
    def shortcut(self: RadialMenu) -> str: ...
    def setShortcut(self: RadialMenu) -> None: ...
    def item(self: RadialMenu, radial_item_location: EnumValue) -> RadialItem: ...
    def items(self: RadialMenu) -> EnumValue: ...
    def createSubmenu(self: RadialMenu, radial_item_location: EnumValue, label: Optional[str]=None) -> RadialSubmenu: ...
    def createScriptItem(self: RadialMenu, radial_item_location: EnumValue, label: Optional[str]=None, icon: Optional[str]=None, check: Optional[str]=None, script: Optional[str]=None) -> RadialScriptItem: ...

    def __repr__(self: RadialMenu) -> Any: ...  ## Added by typing stub update
class Ramp:
    thisown: Any = ...
    def __init__(self: Ramp, basis: Sequence[EnumValue], keys: Sequence[float], values: Sequence[Sequence[float]]) -> None: ...
    __swig_destroy__: Any = ...
    def isColor(self: Ramp) -> bool: ...
    def colorType(self: Ramp) -> EnumValue: ...
    def setColorType(self: Ramp, color_type: EnumValue) -> None: ...
    def basis(self: Ramp) -> Tuple[EnumValue, ...]: ...
    def keys(self: Ramp) -> Tuple[float, ...]: ...
    def lookup(self: Ramp, position: Union[Sequence[float], Vector3]) -> Union[float,Tuple[float, ...]]: ...
    def values(self: Ramp) -> Union[Tuple[float, ...],Tuple[Tuple[float, ...], ...]]: ...

    def __repr__(self: Ramp) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Ramp) -> Any: ...  ## Added by typing stub update
class RampParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, label: str, ramp_parm_type, default_value: int=2, default_basis: Optional[EnumValue]=None, show_controls: bool=True, color_type: Optional[EnumValue]=None, disable_when: Optional[str]=None, is_hidden: bool=False, help: Optional[str]=None, script_callback: Optional[str]=None, script_callback_language: EnumValue=scriptLanguage.Hscript, tags: dict={}, default_expression_language: EnumValue=scriptLanguage.Hscript) -> None: ...
    __swig_destroy__: Any = ...
    def defaultValue(self: RampParmTemplate) -> int: ...
    def setDefaultValue(self: RampParmTemplate, default_value: int) -> None: ...
    def defaultExpression(self: RampParmTemplate) -> str: ...
    def setDefaultExpression(self: RampParmTemplate, default_expression: str) -> None: ...
    def defaultExpressionLanguage(self: RampParmTemplate) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self: RampParmTemplate, default_expression_language: EnumValue) -> None: ...
    def parmType(self: RampParmTemplate) -> Any: ...
    def setParmType(self: RampParmTemplate, ramp_parm_type: EnumValue) -> None: ...
    def defaultBasis(self: RampParmTemplate) -> EnumValue: ...
    def setDefaultBasis(self: RampParmTemplate, ramp_basis: EnumValue) -> None: ...
    def colorType(self: RampParmTemplate) -> EnumValue: ...
    def setColorType(self: RampParmTemplate, color_type: EnumValue) -> None: ...
    def showsControls(self: RampParmTemplate) -> bool: ...
    def setShowsControls(self: RampParmTemplate, on: bool) -> None: ...

    def __repr__(self: RampParmTemplate) -> Any: ...  ## Added by typing stub update
class RedrawBlock:
    thisown: Any = ...
    def __init__(self) -> None: ...
    __swig_destroy__: Any = ...
    def __enter__(self: RedrawBlock) -> Any: ...
    def __exit__(self: RedrawBlock, type, value, traceback) -> Any: ...

    def __repr__(self: RedrawBlock) -> Any: ...  ## Added by typing stub update
class ReferencePlane:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def sceneViewer(self: ReferencePlane) -> SceneViewer: ...
    def isVisible(self: ReferencePlane) -> bool: ...
    def setIsVisible(self: ReferencePlane, on: bool) -> None: ...
    def transform(self: ReferencePlane) -> Matrix4: ...
    def setTransform(self: ReferencePlane, matrix: Matrix4) -> None: ...
    def cellSize(self: ReferencePlane) -> Tuple[float, ...]: ...
    def setCellSize(self: ReferencePlane, size: Sequence[float]) -> None: ...
    def numberOfCellsPerRulerLine(self: ReferencePlane) -> Tuple[int, ...]: ...
    def setNumberOfCellsPerRulerLine(self: ReferencePlane, number: Sequence[int]) -> Any: ...

    def __repr__(self: ReferencePlane) -> Any: ...  ## Added by typing stub update
class RopNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isBypassed(self: RopNode) -> bool: ...
    def bypass(self: RopNode, on: bool) -> None: ...
    def isLocked(self: RopNode) -> bool: ...
    def setLocked(self: RopNode, on: bool) -> None: ...
    def inputDependencies(self: RopNode) -> Tuple[Tuple[RopNode, Tuple[float, ...]], ...]: ...
    def render(self: RopNode, frame_range: Sequence[float]=(), res: Sequence[float]=(), output_file: Optional[str]=None, output_format: Optional[str]=None, to_flipbook: bool=False, quality: int=2, ignore_inputs: bool=False, method: EnumValue=renderMethod.RopByRop, ignore_bypass_flags: bool=False, ignore_lock_flags: bool=False, verbose: bool=False, output_progress: bool=False) -> None: ...
    def removeAllRenderEventCallbacks(self: RopNode) -> None: ...
    def addRenderEventCallback(self: RopNode, callback, run_before_script: bool=False) -> None: ...
    def removeRenderEventCallback(self: RopNode, callback) -> None: ...

    def __repr__(self: RopNode) -> Any: ...  ## Added by typing stub update
class SceneGraphTree(PathBasedPaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def showInactivePrimitives(self: SceneGraphTree) -> bool: ...
    def setShowInactivePrimitives(self: SceneGraphTree, show: bool) -> None: ...
    def showInvisiblePrimitives(self: SceneGraphTree) -> bool: ...
    def setShowInvisiblePrimitives(self: SceneGraphTree, show: bool) -> None: ...
    def showOverPrimitives(self: SceneGraphTree) -> bool: ...
    def setShowOverPrimitives(self: SceneGraphTree, show: bool) -> None: ...
    def showClassPrimitives(self: SceneGraphTree) -> bool: ...
    def setShowClassPrimitives(self: SceneGraphTree, show: bool) -> None: ...
    def showPrototypePrimitives(self: SceneGraphTree) -> bool: ...
    def setShowPrototypePrimitives(self: SceneGraphTree, show: bool) -> None: ...
    def showLayerInfoPrimitives(self: SceneGraphTree) -> bool: ...
    def setShowLayerInfoPrimitives(self: SceneGraphTree, show: bool) -> None: ...
    def showHiddenInUiPrimitives(self: SceneGraphTree) -> bool: ...
    def setShowHiddenInUiPrimitives(self: SceneGraphTree, show: bool) -> None: ...
    def allColumns(self: SceneGraphTree) -> Tuple[str, ...]: ...
    def visibleColumns(self: SceneGraphTree) -> Tuple[str, ...]: ...
    def setVisibleColumns(self: SceneGraphTree, columns: Sequence[str]) -> None: ...
    def filterPattern(self: SceneGraphTree) -> str: ...
    def setFilterPattern(self: SceneGraphTree, pattern: str) -> None: ...
    def filterVisible(self: SceneGraphTree) -> bool: ...
    def setFilterVisible(self: SceneGraphTree, visible: bool) -> None: ...
    def splitPosition(self: SceneGraphTree) -> float: ...
    def setSplitPosition(self: SceneGraphTree, position: Union[Sequence[float], Vector3]) -> None: ...
    def collectionPrimitives(self: SceneGraphTree) -> str: ...
    def setCollectionPrimitives(self: SceneGraphTree, pattern: str) -> None: ...
    def collectionFilterPattern(self: SceneGraphTree) -> str: ...
    def setCollectionFilterPattern(self: SceneGraphTree, pattern: str) -> None: ...
    def collectionFilterVisible(self: SceneGraphTree) -> bool: ...
    def setCollectionFilterVisible(self: SceneGraphTree, visible: bool) -> None: ...
    def collapsePrimitives(self: SceneGraphTree, paths) -> None: ...
    def expandPrimitives(self: SceneGraphTree, paths, collapse_others: bool=False, expand_leaf_primitives: bool=False) -> None: ...
    def expandedPrimitives(self: SceneGraphTree, include_leaf_primitives: bool=False) -> List[pxr.Sdf.Path]: ...

    def __repr__(self: SceneGraphTree) -> Any: ...  ## Added by typing stub update
class SceneViewer(PathBasedPaneTab):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def viewerType(self: SceneViewer) -> EnumValue: ...
    def viewports(self: SceneViewer) -> Tuple[GeometryViewport, ...]: ...
    def findViewport(self: SceneViewer, name: str) -> GeometryViewport: ...
    def curViewport(self: SceneViewer) -> GeometryViewport: ...
    def selectedViewport(self: SceneViewer) -> GeometryViewport: ...
    def currentState(self: SceneViewer) -> str: ...
    def enterViewState(self: SceneViewer, wait_for_exit: bool=False) -> None: ...
    def enterCurrentNodeState(self: SceneViewer, wait_for_exit: bool=False) -> None: ...
    def enterTranslateToolState(self: SceneViewer, wait_for_exit: bool=False) -> None: ...
    def enterRotateToolState(self: SceneViewer, wait_for_exit: bool=False) -> None: ...
    def enterScaleToolState(self: SceneViewer, wait_for_exit: bool=False) -> None: ...
    def setCurrentState(self: SceneViewer, state: str, wait_for_exit: bool=False, generate: EnumValue=stateGenerateMode.Insert, request_new_on_generate: bool=True, ex_situ_generate: bool=False) -> None: ...
    def isCreateInContext(self: SceneViewer) -> bool: ...
    def isWorldSpaceLocal(self: SceneViewer) -> bool: ...
    def viewportLayout(self: SceneViewer) -> EnumValue: ...
    def setViewportLayout(self: SceneViewer, layout: EnumValue, single: int=-1) -> None: ...
    def selectObjects(self: SceneViewer, prompt: str="Any", sel_index: int=0, allow_drag: bool=False, quick_select: bool=False, use_existing_selection: bool=True, allow_multisel: bool=True, allowed_types: Sequence[str]=("Any",), icon: Optional[str]=None, label: Optional[str]=None, prior_selection_paths: list=[], prior_selection_ids: list=[], prior_selections: list=[], toolbox_templategroup: Optional[ParmTemplateGroup]=None, toolbox1_templategroup: Optional[ParmTemplateGroup]=None, select_parm: str="Any") -> Tuple[Node, ...]: ...
    def selectGeometry(self: SceneViewer, prompt: str="Select geometry", sel_index: int=0, allow_drag: bool=False, quick_select: bool=False, use_existing_selection: bool=True, initial_selection: Optional[str]=None, initial_selection_type: Optional[EnumValue]=None, ordered: bool=False, geometry_types: Sequence[EnumValue]=(), primitive_types: Sequence[EnumValue]=(), allow_obj_sel: bool=True, icon: Optional[str]=None, label: Optional[str]=None, prior_selection_paths: list=[], prior_selection_ids: list=[], prior_selections: list=[], allow_other_sops: bool=True, consume_selections: bool=True) -> GeometrySelection: ...
    def selectDynamics(self: SceneViewer, prompt: str="Any", sel_index: int=0, allow_objects: bool=True, allow_modifiers: bool=False, quick_select: bool=False, use_existing_selection: bool=True, allow_multisel: bool=True, icon: Optional[str]=None, label: Optional[str]=None, prior_selection_paths: list=[], prior_selection_ids: list=[], prior_selections: list=[], toolbox_templategroup: Optional[ParmTemplateGroup]=None, toolbox1_templategroup: Optional[ParmTemplateGroup]=None, select_parm: str="Any") -> Tuple[DopData, ...]: ...
    def selectDynamicsPoints(self: SceneViewer, prompt: str="Any", sel_index: int=0, quick_select: bool=False, use_existing_selection: bool=True, allow_multisel: bool=True, only_select_points: bool=True, object_based_point_selection: bool=False, use_last_selected_object: bool=False, icon: Optional[str]=None, label: Optional[str]=None, prior_selection_paths: list=[], prior_selection_ids: list=[], prior_selections: list=[], toolbox_templategroup: Optional[ParmTemplateGroup]=None, toolbox1_templategroup: Optional[ParmTemplateGroup]=None, select_parm: str="Any") -> Tuple[DopData, GeometrySelection]: ...
    def selectDynamicsPolygons(self: SceneViewer, prompt: str="Any", sel_index: int=0, quick_select: bool=False, use_existing_selection: bool=True, object_based_point_selection: bool=False, use_last_selected_object: bool=False, icon: Optional[str]=None, label: Optional[str]=None, prior_selection_paths: list=[], prior_selection_ids: list=[], prior_selections: list=[], toolbox_templategroup: Optional[ParmTemplateGroup]=None, toolbox1_templategroup: Optional[ParmTemplateGroup]=None, select_parm: str="Any") -> Tuple[DopData, GeometrySelection]: ...
    def selectSceneGraph(self: SceneViewer, prompt: str="Any", preselection: list=[], prim_mask: EnumValue=scenePrimMask.ViewerSetting, quick_select: bool=False, use_existing_selection: bool=True, confirm_existing: bool=False, allow_multisel: bool=True, allow_drag: bool=True, propagate_selection: bool=True, path_prefix_mask: str="Any", prim_kind: str="Any", validate_selection_for_node: Optional[str]=None, select_parm: str="Any", allow_kind_mismatch: EnumValue=optionalBool.NoOpinion, allow_instance_proxies: EnumValue=optionalBool.NoOpinion) -> Tuple[str, ...]: ...
    def selectSceneGraphInstances(self: SceneViewer, prompt: str="Any", preselection: list=[], quick_select: bool=False, use_existing_selection: bool=True, confirm_existing: bool=False, allow_multisel: bool=True, allow_drag: bool=True, path_prefix_mask: str="Any", instance_level: int=0, instance_indices_only: bool=False, validate_selection_for_node: Optional[bool]=None, select_parm: str="Any") -> Tuple[str, ...]: ...
    def selectPositions(self: SceneViewer, prompt: str="Any", number_of_positions: int=1, min_number_of_positions: int=-1, connect_positions: bool=True, show_coordinates: bool=True, bbox: BoundingBox=BoundingBox(), position_type: EnumValue=positionType.WorldSpace, icon: Optional[str]=None, label: Optional[str]=None, toolbox_templategroup: Optional[ParmTemplateGroup]=None, toolbox1_templategroup: Optional[ParmTemplateGroup]=None, select_parm: str="Any") -> Tuple[Vector3, ...]: ...
    def selectOrientedPositions(self: SceneViewer, prompt: str="Any", number_of_positions: int=1, min_number_of_positions: int=-1, connect_positions: bool=True, show_coordinates: bool=True, bbox: BoundingBox=BoundingBox(), icon: Optional[BoundingBox]=None, label: Optional[str]=None, toolbox_templategroup: Optional[str]=None, toolbox1_templategroup: Optional[ParmTemplateGroup]=None, select_parm: str="Any") -> Tuple[Tuple[Vector3, Matrix3], ...]: ...
    def selectDrawableGeometry(self: SceneViewer, drawable_selection, selection_modifier: EnumValue=pickModifier.Replace) -> None: ...
    def currentGeometrySelection(self: SceneViewer) -> GeometrySelection: ...
    def currentGeometrySelectionParm(self: SceneViewer) -> str: ...
    def setCurrentGeometrySelection(self: SceneViewer, geometry_type: EnumValue, nodes: Sequence[Node], selections: Sequence[Selection]) -> None: ...
    def currentSceneGraphSelection(self: SceneViewer) -> Tuple[str, ...]: ...
    def setCurrentSceneGraphSelection(self: SceneViewer, selection: Sequence[str]) -> None: ...
    def locateSceneGraphPrim(self: SceneViewer, x: int, y: int) -> Tuple[float, str]: ...
    def sceneGraphStageLocked(self: SceneViewer) -> bool: ...
    def setSceneGraphStageLocked(self: SceneViewer, locked: bool) -> None: ...
    def snappingMode(self: SceneViewer) -> None: ...
    def setSnappingMode(self: SceneViewer, snapping_mode: EnumValue) -> None: ...
    def isSnappingToCurrentGeometry(self: SceneViewer) -> None: ...
    def setSnapToCurrentGeometry(self: SceneViewer, on: bool) -> None: ...
    def isSnappingToTemplates(self: SceneViewer) -> None: ...
    def setSnapToTemplates(self: SceneViewer, on: bool) -> None: ...
    def isSnappingToOtherObjects(self: SceneViewer) -> None: ...
    def setSnapToOtherObjects(self: SceneViewer, on: bool) -> None: ...
    def isSnappingToGuides(self: SceneViewer) -> bool: ...
    def setSnapToGuides(self: SceneViewer, on: bool) -> None: ...
    def isDepthSnapping(self: SceneViewer) -> None: ...
    def setDepthSnapping(self: SceneViewer, on: bool) -> None: ...
    def isOrientingOnSnap(self: SceneViewer) -> None: ...
    def setOrientOnSnap(self: SceneViewer, on: bool) -> None: ...
    def snappingGravity(self: SceneViewer) -> None: ...
    def snappingPriorities(self: SceneViewer) -> None: ...
    def isPickingVisibleGeometry(self: SceneViewer) -> None: ...
    def setPickingVisibleGeometry(self: SceneViewer, on: bool) -> None: ...
    def isPickingContainedGeometry(self: SceneViewer) -> None: ...
    def setPickingContainedGeometry(self: SceneViewer, on: bool) -> None: ...
    def isGroupPicking(self: SceneViewer) -> bool: ...
    def setGroupPicking(self: SceneViewer, on: bool) -> None: ...
    def isWholeGeometryPicking(self: SceneViewer) -> None: ...
    def setWholeGeometryPicking(self: SceneViewer, on: bool) -> None: ...
    def isSecureSelection(self: SceneViewer) -> None: ...
    def setSecureSelection(self: SceneViewer, on: bool) -> None: ...
    def isPickingCurrentNode(self: SceneViewer) -> None: ...
    def setPickingCurrentNode(self: SceneViewer, on: bool) -> None: ...
    def pickGeometryType(self: SceneViewer) -> None: ...
    def setPickGeometryType(self: SceneViewer, geometry_type: EnumValue) -> None: ...
    def selectionMode(self: SceneViewer) -> None: ...
    def setSelectionMode(self: SceneViewer, selection_mode: EnumValue) -> None: ...
    def pickStyle(self: SceneViewer) -> None: ...
    def setPickStyle(self: SceneViewer, style: EnumValue) -> None: ...
    def pickModifier(self: SceneViewer) -> None: ...
    def setPickModifier(self: SceneViewer, modifier: EnumValue) -> None: ...
    def defaultPickModifier(self: SceneViewer) -> None: ...
    def setDefaultPickModifier(self: SceneViewer, modifier: EnumValue) -> None: ...
    def pickFacing(self: SceneViewer) -> None: ...
    def setPickFacing(self: SceneViewer, facing: EnumValue) -> None: ...
    def activePickModifier(self: SceneViewer) -> None: ...
    def isGroupListVisible(self: SceneViewer) -> None: ...
    def setGroupListVisible(self: SceneViewer, on: bool) -> None: ...
    def isGroupListColoringGeometry(self: SceneViewer) -> None: ...
    def setGroupListColoringGeometry(self: SceneViewer, on: bool) -> None: ...
    def isGroupListShowingEmptyGroups(self: SceneViewer) -> None: ...
    def setGroupListShowingEmptyGroups(self: SceneViewer, on: bool) -> None: ...
    def isGroupListShowingOnlyPreSelectedGroups(self: SceneViewer) -> None: ...
    def setGroupListShowingOnlyPreSelectedGroups(self: SceneViewer, on: bool) -> None: ...
    def isGroupListCondensingPathHierarchies(self: SceneViewer) -> None: ...
    def setGroupListCondensingPathHierarchies(self: SceneViewer, on: bool) -> None: ...
    def groupListSize(self: SceneViewer) -> None: ...
    def setGroupListSize(self: SceneViewer, width: float, height: float) -> None: ...
    def groupListType(self: SceneViewer) -> None: ...
    def setGroupListType(self: SceneViewer, group_list_type: EnumValue) -> None: ...
    def groupListMask(self: SceneViewer) -> str: ...
    def setGroupListMask(self: SceneViewer, mask: str) -> None: ...
    def constructionPlane(self: SceneViewer) -> ConstructionPlane: ...
    def referencePlane(self: SceneViewer) -> ReferencePlane: ...
    def flipbookSettings(self: SceneViewer) -> FlipbookSettings: ...
    def flipbook(self: SceneViewer, viewport: Optional[GeometryViewport]=None, settings: Optional[FlipbookSettings]=None, open_dialog: bool=False) -> None: ...
    def runShelfTool(self: SceneViewer, tool_name: str) -> None: ...
    def beginStateUndo(self: SceneViewer, label: str) -> None: ...
    def endStateUndo(self: SceneViewer) -> None: ...
    def setPromptMessage(self: SceneViewer, msg: str, msg_type: EnumValue=promptMessageType.Prompt) -> None: ...
    def clearPromptMessage(self: SceneViewer) -> None: ...
    def flashMessage(self: SceneViewer, image: str, msg: str, duration: float=1.0, viewport: Optional[GeometryViewport]=None) -> Any: ...
    def showHandle(self: SceneViewer, name: str, value: bool) -> None: ...
    def openVisualizerEditor(self: SceneViewer, visualizer: ViewportVisualizer) -> None: ...
    def openOptionDialog(self: SceneViewer, path: str, label: str) -> None: ...
    def triggerStateSelector(self: SceneViewer, action: EnumValue, name: Optional[str]=None) -> None: ...
    def currentStateSelector(self: SceneViewer) -> str: ...
    def showCurrentSopGeometry(self: SceneViewer, value: bool) -> None: ...
    def isShowingCurrentSopGeometry(self: SceneViewer, value) -> bool: ...
    def showOperationBar(self: SceneViewer) -> bool: ...
    def isShowingOperationBar(self: SceneViewer) -> Any: ...
    def showColorCorrectionBar(self: SceneViewer, show: bool) -> None: ...
    def isShowingColorCorrectionBar(self: SceneViewer) -> bool: ...
    def showMemoryBar(self: SceneViewer, show: bool) -> None: ...
    def isShowingMemoryBar(self: SceneViewer) -> bool: ...
    def showDisplayOptionsBar(self: SceneViewer, show: bool) -> None: ...
    def isShowingDisplayOptionsBar(self: SceneViewer) -> bool: ...
    def showSelectionBar(self: SceneViewer, show: bool) -> None: ...
    def isShowingSelectionBar(self: SceneViewer) -> bool: ...
    def setIncludeColorCorrectionBar(self: SceneViewer, on: bool) -> None: ...
    def includeColorCorrectionBar(self: SceneViewer) -> bool: ...
    def setIncludeMemoryBar(self: SceneViewer, on: bool) -> None: ...
    def includeMemoryBar(self: SceneViewer) -> bool: ...
    def setGeometryVisibility(self: SceneViewer, sop_node: SopNode, on: bool) -> None: ...
    def geometryVisibility(self: SceneViewer, sop_node: SopNode) -> None: ...
    def usingOCIO(self: SceneViewer) -> bool: ...
    def setUsingOCIO(self: SceneViewer, enable: bool) -> None: ...
    def setOCIODisplayView(self: SceneViewer, display: str="Any", view: str="Any") -> None: ...
    def getOCIODisplay(self: SceneViewer) -> str: ...
    def getOCIOView(self: SceneViewer) -> str: ...
    def geometry(self: SceneViewer) -> Tuple[int, ...]: ...
    def runStateCommand(self: SceneViewer, name: str, args: Optional[Any]=None) -> None: ...
    def isViewingSceneGraph(self: SceneViewer) -> bool: ...
    def stage(self: SceneViewer) -> Usd.Stage: ...
    def stageSerial(self: SceneViewer) -> int: ...
    def setShowGeometry(self: SceneViewer, show: bool) -> None: ...
    def showGeometry(self: SceneViewer) -> bool: ...
    def setShowCameras(self: SceneViewer, show: bool) -> None: ...
    def showCameras(self: SceneViewer) -> bool: ...
    def setShowLights(self: SceneViewer, show: bool) -> None: ...
    def showLights(self: SceneViewer) -> bool: ...
    def setShowSelection(self: SceneViewer, show: bool) -> None: ...
    def showSelection(self: SceneViewer) -> bool: ...
    def setShowRenderTime(self: SceneViewer, show: bool) -> Any: ...
    def showRenderTime(self: SceneViewer) -> bool: ...
    def setShowRenderStats(self: SceneViewer, show: bool) -> Any: ...
    def showRenderStats(self: SceneViewer, show) -> None: ...
    def setSelectionKind(self: SceneViewer, kind: str) -> None: ...
    def setSelectionPointInstances(self: SceneViewer, topmost: bool) -> None: ...
    def selectionKind(self: SceneViewer) -> str: ...
    def isSelectingPointInstances(self: SceneViewer) -> bool: ...
    def isSelectingTopmostInstance(self: SceneViewer) -> bool: ...
    def setSelectionAllowKindMismatch(self: SceneViewer, allow: bool) -> None: ...
    def selectionAllowKindMismatch(self: SceneViewer) -> None: ...
    def setSelectionAllowInstanceProxies(self: SceneViewer, allow: bool) -> None: ...
    def selectionAllowInstanceProxies(self: SceneViewer) -> None: ...
    def setSelectionAllowHiddenPrims(self: SceneViewer, allow: bool) -> None: ...
    def selectionAllowHiddenPrims(self: SceneViewer) -> None: ...
    def setStageControlsPlaybar(self: SceneViewer, controls_playbar: bool) -> None: ...
    def stageControlsPlaybar(self: SceneViewer) -> bool: ...
    def hydraRenderers(self: SceneViewer) -> Tuple[str, ...]: ...
    def setHydraRenderer(self: SceneViewer, ren_name: str) -> None: ...
    def currentHydraRenderer(self: SceneViewer) -> str: ...
    def restartRenderer(self: SceneViewer) -> None: ...
    def showProxyPurpose(self: SceneViewer, show_proxy: bool, renderer: Optional[str]=None) -> None: ...
    def showGuidePurpose(self: SceneViewer, show_guide: bool, renderer: Optional[str]=None) -> None: ...
    def showRenderPurpose(self: SceneViewer, show_render: bool, renderer: Optional[str]=None) -> None: ...
    def useViewportOverrides(self: SceneViewer, use_overrides: bool, renderer: Optional[str]=None) -> None: ...
    def useViewportLoadMasks(self: SceneViewer, use_loadmasks: bool, renderer: Optional[str]=None) -> None: ...
    def usePostLayers(self: SceneViewer, use_postlayers: bool, renderer: Optional[str]=None) -> None: ...
    def showingProxyPurpose(self: SceneViewer, renderer: Optional[str]=None) -> bool: ...
    def showingGuidePurpose(self: SceneViewer, renderer: Optional[str]=None) -> bool: ...
    def showingRenderPurpose(self: SceneViewer, renderer: Optional[str]=None) -> bool: ...
    def usingViewportOverrides(self: SceneViewer, renderer: Optional[str]=None) -> bool: ...
    def usingViewportLoadMasks(self: SceneViewer, renderer: Optional[str]=None) -> bool: ...
    def usingPostLayers(self: SceneViewer, renderer: Optional[str]=None) -> bool: ...
    def addEventCallback(self: SceneViewer, callback) -> None: ...
    def removeEventCallback(self: SceneViewer, callback) -> None: ...
    def clearEventCallbacks(self: SceneViewer) -> None: ...
    def eventCallbacks(self: SceneViewer) -> Tuple[Callable, ...]: ...
    def qtWindow(self: SceneViewer) -> QtWidgets.QWidget: ...

    def __repr__(self: SceneViewer) -> Any: ...  ## Added by typing stub update
    def _waitForStateExit(self: SceneViewer, state: Optional[str]=None) -> Any: ...  ## Added by typing stub update
    def _currentBaseState(self: SceneViewer) -> Any: ...  ## Added by typing stub update
    def _getCurrentStateParmNames(self: SceneViewer) -> Any: ...  ## Added by typing stub update
    def _evalCurrentStateParm(self: SceneViewer, name: str) -> Any: ...  ## Added by typing stub update
    def _setCurrentStateParm(self: SceneViewer, name: str, value: str) -> Any: ...  ## Added by typing stub update
    def _pressCurrentStateButton(self: SceneViewer, name: str) -> Any: ...  ## Added by typing stub update
    def _hudInfo(self: SceneViewer, *args: int, **kwargs: int) -> Any: ...  ## Added by typing stub update
class ScriptEvalContext:
    thisown: Any = ...
    def __init__(self: ScriptEvalContext, node_or_parm: Parm) -> None: ...
    __swig_destroy__: Any = ...
    def node(self: ScriptEvalContext) -> None: ...
    def parm(self: ScriptEvalContext) -> None: ...
    def __enter__(self: ScriptEvalContext) -> Any: ...
    def __exit__(self: ScriptEvalContext, type, value, traceback) -> Any: ...

    def __repr__(self: ScriptEvalContext) -> Any: ...  ## Added by typing stub update
class Selection:
    thisown: Any = ...
    def __init__(self: Selection, edges: Geometry) -> None: ...
    __swig_destroy__: Any = ...
    def freeze(self: Selection) -> Selection: ...
    def invert(self: Selection, geo: Geometry) -> None: ...
    def convert(self: Selection, geo: Geometry, selection_type: EnumValue, select_only_whole: bool=False) -> None: ...
    def boundary(self: Selection, geo: Geometry, uv_connectivity: bool=False) -> None: ...
    def grow(self: Selection, geo: Geometry, uv_connectivity: bool=False) -> None: ...
    def shrink(self: Selection, geo: Geometry, uv_connectivity: bool=False) -> None: ...
    def combine(self: Selection, geo: Geometry, selection: Selection, modifier: EnumValue) -> None: ...
    def clear(self: Selection) -> None: ...
    def selectionType(self: Selection) -> None: ...
    def numSelected(self: Selection) -> int: ...
    def prims(self: Selection, geo: Geometry) -> Tuple[Prim, ...]: ...
    def points(self: Selection, geo: Geometry) -> Tuple[Point, ...]: ...
    def vertices(self: Selection, geo: Geometry) -> Tuple[Vertex, ...]: ...
    def edges(self: Selection, geo: Geometry) -> Tuple[Edge, ...]: ...
    def selectionString(self: Selection, geo: Geometry, force_numeric: bool=False, collapse_where_possible: bool=True, asterisk_to_select_all: bool=False) -> str: ...

    def __repr__(self: Selection) -> Any: ...  ## Added by typing stub update
class Selector:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: Selector) -> str: ...
    def nodeType(self: Selector) -> NodeType: ...
    def selectorType(self: Selector) -> str: ...
    def geometryTypes(self: Selector) -> EnumValue: ...
    def groupTypeParmValues(self: Selector) -> Tuple[int, ...]: ...
    def ordered(self: Selector) -> bool: ...
    def prompt(self: Selector) -> str: ...
    def primitiveTypes(self: Selector) -> EnumValue: ...
    def groupParmName(self: Selector) -> str: ...
    def groupTypeParmName(self: Selector) -> str: ...
    def inputIndex(self: Selector) -> int: ...
    def inputRequired(self: Selector) -> bool: ...
    def allowDragging(self: Selector) -> bool: ...
    def emptyStringSelectsAll(self: Selector) -> bool: ...
    def extraInfo(self: Selector) -> str: ...
    def destroy(self: Selector) -> None: ...

    def __repr__(self: Selector) -> Any: ...  ## Added by typing stub update
class SeparatorParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, is_hidden: bool=False, tags: dict={}) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: SeparatorParmTemplate) -> Any: ...  ## Added by typing stub update
class Shelf(ShelfElement):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def tools(self: Shelf) -> Tuple[Tool, ...]: ...
    def setTools(self: Shelf, tools: Sequence[Tool]) -> None: ...
    def destroy(self: Shelf) -> None: ...

    def __repr__(self: Shelf) -> Any: ...  ## Added by typing stub update
class ShelfDock:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def shelfSets(self: ShelfDock) -> Tuple[ShelfSet, ...]: ...
    def iconsize(self: ShelfDock) -> Tuple[int, int]: ...
    def show(self: ShelfDock, on: bool) -> None: ...

    def __repr__(self: ShelfDock) -> Any: ...  ## Added by typing stub update
class ShelfSet(ShelfElement):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def shelves(self: ShelfSet) -> Tuple[Shelf, ...]: ...
    def setShelves(self: ShelfSet, shelves: Sequence[Shelf]) -> None: ...
    def destroy(self: ShelfSet) -> None: ...

    def __repr__(self: ShelfSet) -> Any: ...  ## Added by typing stub update
class ShellIO:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def readline(self: ShellIO, size: int=-1) -> str: ...
    def addCloseCallback(self: ShellIO, callback) -> None: ...
    def removeCloseCallback(self: ShellIO, callback) -> None: ...
    def closeCallbacks(self: ShellIO) -> Tuple[Callable, ...]: ...
    def CloseCallbacks(self: ShellIO) -> Any: ...
    def addExitCallback(self: ShellIO, callback) -> Any: ...
    def removeExitCallback(self: ShellIO, callback) -> Any: ...
    def exitCallbacks(self: ShellIO) -> Any: ...
    def write(self: ShellIO, data: str) -> None: ...
    def getAndClearWrittenData(self: ShellIO) -> str: ...
    def addDataForReading(self: ShellIO, data: str) -> None: ...
    def addEOFForReading(self: ShellIO) -> None: ...
    def interruptShellThread(self: ShellIO) -> None: ...
    def isWaitingForCommand(self: ShellIO) -> bool: ...
    def setIsWaitingForCommand(self: ShellIO, on: bool) -> None: ...
    def isatty(self: ShellIO) -> bool: ...
    def flush(self: ShellIO) -> Any: ...

class shelves:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def shelfSets() -> Dict[str, ShelfSet]: ...
    @staticmethod
    def shelves() -> Dict[str, Shelf]: ...
    @staticmethod
    def tools() -> Dict[str, Tool]: ...
    @staticmethod
    def tool(tool_name: str) -> Optional[Tool]: ...
    @staticmethod
    def isToolDeleted(tool_name: str) -> Any: ...
    @staticmethod
    def loadFile(file_path: str) -> None: ...
    @staticmethod
    def reloadShelfFiles() -> None: ...
    @staticmethod
    def runningTool() -> Optional[Tool]: ...
    @staticmethod
    def beginChangeBlock() -> None: ...
    @staticmethod
    def endChangeBlock() -> None: ...
    @staticmethod
    def newShelfSet(file_path: Optional[str]=None, name: Optional[str]=None, label: Optional[str]=None) -> ShelfSet: ...
    @staticmethod
    def newShelf(file_path: Optional[str]=None, name: Optional[str]=None, label: Optional[str]=None) -> Shelf: ...
    @staticmethod
    def newTool(file_path: Optional[str]=None, name: Optional[str]=None, label: Optional[str]=None, script: Optional[str]=None, language: EnumValue=scriptLanguage.Python, icon: Optional[str]=None, help: Optional[str]=None, help_url: Optional[str]=None, network_categories: Sequence[NodeTypeCategory]=(), viewer_categories: Sequence[NodeTypeCategory]=(), cop_viewer_categories: Sequence[NodeTypeCategory]=(), network_op_type: Optional[str]=None, viewer_op_type: Optional[str]=None, locations: Sequence[str]=()) -> Tool: ...
    @staticmethod
    def defaultFilePath() -> str: ...
    @staticmethod
    def defaultToolName(nodetype_category_name: str, nodetype_name: str) -> Any: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _newAssetTool(name: Optional[str]=None, label: Optional[str]=None, icon: Optional[str]=None, help: Optional[str]=None, help_url: Optional[str]=None) -> Any: ...  ## Added by typing stub update
class ShopNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def shaderString(self: ShopNode, render_type: Optional[str]=None) -> str: ...
    def shaderCode(self: ShopNode, *args: EnumValue) -> Any: ...
    def shaderName(self: ShopNode, as_otl_path: bool=True, shader_type_name: Optional[str]=None) -> str: ...
    def supportedRenderers(self: ShopNode) -> Tuple[str, ...]: ...
    def definingVopNetNode(self: ShopNode) -> Optional[VopNetNode]: ...
    def shaderType(self: ShopNode) -> EnumValue: ...
    def coshaderNodes(self: ShopNode, parm_name: str) -> Tuple[ShopNode, ...]: ...

    def __repr__(self: ShopNode) -> Any: ...  ## Added by typing stub update
class ShopNodeType(NodeType):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def shaderType(self: ShopNodeType) -> shaderType: ...
    def renderMask(self: ShopNodeType) -> str: ...

    def __repr__(self: ShopNodeType) -> Any: ...  ## Added by typing stub update
class SopNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def geometry(self: SopNode, output_index: int=0) -> Geometry: ...
    def geometryNoDep(self: SopNode, output_index: int=0) -> Geometry: ...
    def geometryDep(self: SopNode, output_index: int=0) -> None: ...
    def geometryAtFrame(self: SopNode, frame: float, output_index: int=0) -> Geometry: ...
    def inputGeometry(self: SopNode, index: int) -> Geometry: ...
    def inputGeometryAtFrame(self: SopNode, frame: float, index: int) -> Geometry: ...
    def geometryDelta(self: SopNode) -> GeometryDelta: ...
    def hasVerb(self: SopNode) -> bool: ...
    def verb(self: SopNode) -> SopVerb: ...
    def selection(self: SopNode, selection_type: EnumValue) -> Selection: ...
    def setSelection(self: SopNode, selection: Selection) -> None: ...
    def curPoint(self: SopNode) -> Point: ...
    def setCurPoint(self: SopNode, point_or_none: Optional[Point]) -> None: ...
    def curPrim(self: SopNode) -> Prim: ...
    def setCurPrim(self: SopNode, prim_or_none: Optional[Prim]) -> None: ...
    def curVertex(self: SopNode) -> Vertex: ...
    def setCurVertex(self: SopNode, vertex_or_none: Optional[Vertex]) -> None: ...
    def managesAttribDataIds(self: SopNode) -> bool: ...
    def setManagesAttribDataIds(self: SopNode, on: bool) -> None: ...
    def isBypassed(self: SopNode) -> bool: ...
    def bypass(self: SopNode, on: bool) -> None: ...
    def isDisplayFlagSet(self: SopNode) -> bool: ...
    def setDisplayFlag(self: SopNode, on: bool) -> None: ...
    def isRenderFlagSet(self: SopNode) -> bool: ...
    def setRenderFlag(self: SopNode, on: bool) -> None: ...
    def isTemplateFlagSet(self: SopNode) -> bool: ...
    def setTemplateFlag(self: SopNode, on: bool) -> None: ...
    def isSelectableTemplateFlagSet(self: SopNode) -> bool: ...
    def setSelectableTemplateFlag(self: SopNode, on: bool) -> None: ...
    def isHighlightFlagSet(self: SopNode) -> bool: ...
    def setHighlightFlag(self: SopNode, on: bool) -> None: ...
    def isSoftLocked(self: SopNode) -> bool: ...
    def setSoftLocked(self: SopNode, on: bool) -> None: ...
    def isHardLocked(self: SopNode) -> bool: ...
    def setHardLocked(self: SopNode, on: bool) -> None: ...
    def isUnloadFlagSet(self: SopNode) -> bool: ...
    def setUnloadFlag(self: SopNode, on: bool) -> None: ...
    def copyNodeSelectionToUserSelection(self: SopNode, force_cook: bool=False) -> Any: ...
    def displayNode(self: SopNode) -> Node: ...
    def renderNode(self: SopNode) -> Node: ...

    def __repr__(self: SopNode) -> Any: ...  ## Added by typing stub update
    def _sendSelectionChangedEvent(self: SopNode) -> Any: ...  ## Added by typing stub update
    def _setCurrentMicroNodeName(self: SopNode, name: str) -> Any: ...  ## Added by typing stub update
    def _getMicroNodesStates(self: SopNode) -> Any: ...  ## Added by typing stub update
    def _dirtyMicroNodesStates(self: SopNode, names: Sequence[str]) -> Any: ...  ## Added by typing stub update
class SopNodeType(NodeType):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def selectors(self: SopNodeType, selector_indices: Sequence[int]=()) -> Tuple[Selector, ...]: ...
    def addSelector(self: SopNodeType, name: str, selector_type: str, prompt: str="Any", primitive_types: Sequence[EnumValue]=(), group_parm_name: Optional[str]=None, group_type_parm_name: Optional[str]=None, input_index: int=0, input_required: bool=True, allow_dragging: bool=False, empty_string_selects_all: bool=True) -> Selector: ...

    def __repr__(self: SopNodeType) -> Any: ...  ## Added by typing stub update
class SopVerb:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def execute(self: SopVerb, destgeo: Geometry, inputgeolist: Sequence[Geometry]) -> None: ...
    def executeAtTime(self: SopVerb, destgeo: Geometry, inputgeolist: Sequence[Geometry], time: float, add_time_dep: bool) -> None: ...
    def loadParmsFromNode(self: SopVerb, sopnode: SopNode, time) -> None: ...
    def loadParmsFromNodeAtTime(self: SopVerb, sopnode: SopNode, time: float) -> Any: ...
    def parms(self: SopVerb) -> Dict[str, Any]: ...
    def setParms(self: SopVerb, parmdictionary: Dict[str, Any]) -> None: ...
    def minNumInputs(self: SopVerb) -> int: ...

    def __repr__(self: SopVerb) -> Any: ...  ## Added by typing stub update
class StringKeyframe(BaseKeyframe):
    thisown: Any = ...
    def __init__(self: StringKeyframe, expression: Optional[str]=None, time: Optional[float]=None, language: Optional[EnumValue]=exprLanguage.Python) -> None: ...
    __swig_destroy__: Any = ...
    def evaluatedType(self: StringKeyframe) -> EnumValue: ...

    def __repr__(self: StringKeyframe) -> Any: ...  ## Added by typing stub update
class StringParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, label: str, num_components, default_value: Iterable[Any]=(), naming_scheme: EnumValue=parmNamingScheme.Base1, string_type: EnumValue=stringParmType.Regular, file_type: EnumValue=fileType.Any, menu_items: Iterable[Any]=(), menu_labels: Iterable[Any]=(), icon_names: Iterable[Any]=(), item_generator_script: Optional[str]=None, item_generator_script_language: Optional[EnumValue]=None, menu_type: EnumValue=menuType.Normal, disable_when: Optional[str]=None, is_hidden: bool=False, is_label_hidden: bool=False, join_with_next: bool=False, help: Optional[str]=None, script_callback: Optional[str]=None, script_callback_language: EnumValue=scriptLanguage.Hscript, tags: dict={}, default_expression: Iterable[Any]=(), default_expression_language: Iterable[Any]=()) -> None: ...
    __swig_destroy__: Any = ...
    def stringType(self: StringParmTemplate) -> EnumValue: ...
    def setStringType(self: StringParmTemplate, string_type: EnumValue) -> None: ...
    def fileType(self: StringParmTemplate) -> EnumValue: ...
    def setFileType(self: StringParmTemplate, file_type: EnumValue) -> None: ...
    def defaultValue(self: StringParmTemplate) -> Tuple[str, ...]: ...
    def setDefaultValue(self: StringParmTemplate, tuple_of_default_values: Sequence[str]) -> None: ...
    def defaultExpression(self: StringParmTemplate) -> Tuple[str, ...]: ...
    def setDefaultExpression(self: StringParmTemplate, tuple_of_default_expressions: Sequence[str]) -> None: ...
    def defaultExpressionLanguage(self: StringParmTemplate) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self: StringParmTemplate, tuple_of_default_expression_languages: Sequence[EnumValue]) -> None: ...
    def menuItems(self: StringParmTemplate) -> Tuple[str, ...]: ...
    def setMenuItems(self: StringParmTemplate, menu_items: Sequence[str]) -> None: ...
    def menuLabels(self: StringParmTemplate) -> Tuple[str, ...]: ...
    def setMenuLabels(self: StringParmTemplate, menu_labels: Sequence[str]) -> None: ...
    def iconNames(self: StringParmTemplate) -> Tuple[str, ...]: ...
    def setIconNames(self: StringParmTemplate, icon_names: Sequence[str]) -> None: ...
    def itemGeneratorScript(self: StringParmTemplate) -> EnumValue: ...
    def setItemGeneratorScript(self: StringParmTemplate, item_generator_script: str) -> None: ...
    def itemGeneratorScriptLanguage(self: StringParmTemplate) -> Any: ...
    def setItemGeneratorScriptLanguage(self: StringParmTemplate, language: EnumValue) -> None: ...
    def menuType(self: StringParmTemplate) -> EnumValue: ...
    def setMenuType(self: StringParmTemplate, menu_type: EnumValue) -> None: ...

    def __repr__(self: StringParmTemplate) -> Any: ...  ## Added by typing stub update
class styles:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def hasStyle(name: str) -> bool: ...
    @staticmethod
    def styles(arg2: str) -> Tuple[str, ...]: ...
    @staticmethod
    def description(name: str) -> str: ...
    @staticmethod
    def stylesheet(name: str) -> str: ...
    @staticmethod
    def errors(name: str) -> str: ...
    @staticmethod
    def addStyle(name: str, description: str, stylesheet: str) -> None: ...
    @staticmethod
    def renameStyle(old_name: str, new_name: str) -> None: ...
    @staticmethod
    def reorderStyles(names: Sequence[str]) -> None: ...
    @staticmethod
    def removeStyle(name: str) -> None: ...
    @staticmethod
    def removeAll() -> None: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class StyleSheet:
    thisown: Any = ...
    def __init__(self: StyleSheet, json_text: str) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: StyleSheet) -> Any: ...
    def clone(self: StyleSheet) -> StyleSheet: ...
    def cloneWithObject(self: StyleSheet, object: Node) -> StyleSheet: ...
    def cloneWithPrim(self: StyleSheet, prim: Prim) -> StyleSheet: ...
    def cloneWithShape(self: StyleSheet, shape_name: str, prim: Prim) -> StyleSheet: ...
    def cloneWithAddedStyleSheet(self: StyleSheet, stylesheet: StyleSheet, target: str) -> StyleSheet: ...
    def errors(self: StyleSheet) -> str: ...
    def asJSON(self: StyleSheet) -> str: ...

    def __repr__(self: StyleSheet) -> Any: ...  ## Added by typing stub update
class SubnetIndirectInput(IndirectInput):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: SubnetIndirectInput) -> Any: ...
    def inputConnections(self: SubnetIndirectInput) -> Tuple[NodeConnection, ...]: ...
    def number(self: SubnetIndirectInput) -> int: ...

    def __repr__(self: SubnetIndirectInput) -> Any: ...  ## Added by typing stub update
class Surface(Prim):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def numRows(self: Surface) -> None: ...
    def numCols(self: Surface) -> None: ...
    def vertex(self: Surface, u_index: int, v_index: int) -> None: ...
    def verticesInRow(self: Surface, v_index: int) -> None: ...
    def verticesInCol(self: Surface, u_index: int) -> Any: ...
    def isClosedInU(self: Surface) -> None: ...
    def isClosedInV(self: Surface) -> None: ...
    def positionAt(self: Surface, u: float, v: float) -> Vector3: ...
    def normalAt(self: Surface, u: float, v: float) -> Vector3: ...
    def attribValueAt(self: Surface, attrib_or_name: Union[str, Attrib], u: float, v: float, du: int=0, dv: int=0) -> Union[int, float, str, Tuple[int, ...], Tuple[float, ...], Tuple[str, ...]]: ...
    def addRow(self: Surface, after: int=-1) -> None: ...
    def addCol(self: Surface, after: int=-1) -> None: ...

    def __repr__(self: Surface) -> Any: ...  ## Added by typing stub update
class Take:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isCurrent(self: Take) -> bool: ...
    def name(self: Take) -> str: ...
    def setName(self: Take, name: str) -> None: ...
    def parent(self: Take) -> Take: ...
    def path(self: Take) -> str: ...
    def addChildTake(self: Take, name: str) -> Take: ...
    def insertTakeAbove(self: Take, name: str) -> Take: ...
    def addNodeDisplayFlag(self: Take, node: Node) -> None: ...
    def removeNodeDisplayFlag(self: Take, node: Node) -> Any: ...
    def addNodeBypassFlag(self: Take, node: Node) -> None: ...
    def removeNodeBypassFlag(self: Take, node: Node) -> Any: ...
    def addNodeRenderFlag(self: Take, node: Node) -> None: ...
    def removeNodeRenderFlag(self: Take, node: Node) -> Any: ...
    def hasParmTuple(self: Take, parm_tuple: ParmTuple) -> bool: ...
    def parmTuples(self: Take) -> Tuple[ParmTuple, ...]: ...
    def addParmTuple(self: Take, parm_tuple: ParmTuple) -> None: ...
    def removeParmTuple(self: Take, parm_tuple: ParmTuple) -> None: ...
    def addParmTuplesFromTake(self: Take, take: Take, overwrite_existing: bool=True) -> None: ...
    def addParmTuplesFromNode(self: Take, node: Node) -> Any: ...
    def removeParmTuplesFromNode(self: Take, node: Node) -> None: ...
    def children(self: Take) -> Tuple[Take, ...]: ...
    def saveToFile(self: Take, filename: str, recurse: bool=False) -> None: ...
    def loadChildTakeFromFile(self: Take, filename: str) -> Tuple[Take, ...]: ...
    def moveUnderTake(self: Take, take: Take) -> None: ...
    def destroy(self: Take, recurse: bool=False) -> None: ...

    def __repr__(self: Take) -> Any: ...  ## Added by typing stub update
class takes:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def takes() -> Tuple[Take, ...]: ...
    @staticmethod
    def currentTake() -> Take: ...
    @staticmethod
    def setCurrentTake(take: Take) -> None: ...
    @staticmethod
    def rootTake() -> Take: ...
    @staticmethod
    def findTake(take_name: str) -> Optional[Take]: ...
    @staticmethod
    def defaultTakeName() -> None: ...
    @staticmethod
    def setDefaultTakeName(arg2: str) -> None: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class text:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def expandString(str: str) -> str: ...
    @staticmethod
    def expandStringAtFrame(str: str, frame_number: float) -> str: ...
    @staticmethod
    def incrementNumberedString(str: str) -> str: ...
    @staticmethod
    def encode(str: str) -> str: ...
    @staticmethod
    def decode(str: str) -> str: ...
    @staticmethod
    def encodeAttrib(str: str) -> str: ...
    @staticmethod
    def decodeAttrib(str: str) -> str: ...
    @staticmethod
    def encodeParm(str: str) -> str: ...
    @staticmethod
    def decodeParm(str: str) -> str: ...
    @staticmethod
    def alphaNumeric(str: str) -> str: ...
    @staticmethod
    def variableName(str: str, safe_chars: str="Any") -> str: ...
    @staticmethod
    def abspath(path: str, base_path: Optional[str]=None) -> str: ...
    @staticmethod
    def relpath(path: str, base_path: Optional[str]=None) -> str: ...
    @staticmethod
    def normpath(path: str) -> str: ...
    @staticmethod
    def collapseCommonVars(path: str, vars: Sequence[str]=["Any", "Any"]) -> str: ...
    @staticmethod
    def patternRename(input_string: str, pattern_find: str, pattern_replace: str) -> str: ...
    @staticmethod
    def patternMatch(pattern_string: str, input_string: str, ignore_case: bool=False, path_match: bool=False) -> bool: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class TextDrawable(AdvancedDrawable):
    thisown: Any = ...
    def __init__(self: TextDrawable, scene_viewer: SceneViewer, name: str, label: Optional[Any]=None, params: Optional[str]=None) -> None: ...
    __swig_destroy__: Any = ...
    def size(self: TextDrawable, text: str) -> Tuple[float, ...]: ...

    def __repr__(self: TextDrawable) -> Any: ...  ## Added by typing stub update
class ToggleParmTemplate(ParmTemplate):
    thisown: Any = ...
    def __init__(self, name: str, label: str, default_value: bool=False, disable_when: Optional[str]=None, is_hidden: bool=False, is_label_hidden: bool=False, join_with_next: bool=False, help: Optional[str]=None, script_callback: Optional[str]=None, script_callback_language: EnumValue=scriptLanguage.Hscript, tags: dict={}, default_expression: str="Any", default_expression_language: EnumValue=scriptLanguage.Hscript) -> None: ...
    __swig_destroy__: Any = ...
    def defaultValue(self: ToggleParmTemplate) -> bool: ...
    def setDefaultValue(self: ToggleParmTemplate, default_value: bool) -> None: ...
    def defaultExpression(self: ToggleParmTemplate) -> str: ...
    def setDefaultExpression(self: ToggleParmTemplate, default_expression: str) -> None: ...
    def defaultExpressionLanguage(self: ToggleParmTemplate) -> Tuple[EnumValue, ...]: ...
    def setDefaultExpressionLanguage(self: ToggleParmTemplate, default_expression_language: EnumValue) -> None: ...

    def __repr__(self: ToggleParmTemplate) -> Any: ...  ## Added by typing stub update
class Tool(ShelfElement):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __lt__(self: Tool, other: Tool) -> Any: ...
    def __hash__(self: Tool) -> Any: ...
    def script(self: Tool) -> str: ...
    def setScript(self: Tool, script: str) -> None: ...
    def language(self: Tool) -> EnumValue: ...
    def setLanguage(self: Tool, language: EnumValue) -> None: ...
    def icon(self: Tool) -> str: ...
    def setIcon(self: Tool, icon: str) -> None: ...
    def help(self: Tool) -> str: ...
    def setHelp(self: Tool, help: str) -> None: ...
    def helpURL(self: Tool) -> str: ...
    def setHelpURL(self: Tool, help_url: str) -> None: ...
    def toolMenuCategories(self: Tool, pane_type: EnumValue) -> Tuple[NodeTypeCategory, ...]: ...
    def setToolMenuCategories(self: Tool, pane_type: EnumValue, categories: Sequence[NodeTypeCategory]) -> None: ...
    def toolMenuOpType(self: Tool, pane_type: EnumValue) -> str: ...
    def setToolMenuOpType(self: Tool, pane_type: EnumValue, op_type: str) -> None: ...
    def toolMenuLocations(self: Tool) -> Tuple[str, ...]: ...
    def setToolLocations(self: Tool, locations: Sequence[str]) -> None: ...
    def keywords(self: Tool) -> Any: ...
    def setKeywords(self: Tool, keywords: Sequence[str]) -> Any: ...
    def setData(self: Tool, script: str="Any", language: EnumValue=scriptLanguage.Python, icon: str="Any", help: str="Any", help_url: str="Any", network_categories: Sequence[NodeTypeCategory]=(), viewer_categories: Sequence[NodeTypeCategory]=(), cop_viewer_categories: Sequence[NodeTypeCategory]=(), network_op_type: str="Any", viewer_op_type: str="Any", locations: Sequence[str]=()) -> None: ...
    def destroy(self: Tool) -> None: ...

    def __repr__(self: Tool) -> Any: ...  ## Added by typing stub update
class TopNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def isBypassed(self: TopNode) -> bool: ...
    def bypass(self: TopNode, on: bool) -> None: ...
    def isDisplayFlagSet(self: TopNode) -> bool: ...
    def setDisplayFlag(self: TopNode, on: bool) -> None: ...
    def isRenderFlagSet(self: TopNode) -> bool: ...
    def setRenderFlag(self: TopNode, on: bool) -> None: ...
    def displayNode(self: TopNode) -> Node: ...
    def renderNode(self: TopNode) -> Node: ...
    def outputNode(self: TopNode) -> Node: ...
    def topParent(self: TopNode) -> Any: ...
    def cookWorkItems(self: TopNode, block: bool=False, generate_only: bool=False, tops_only: bool=False, save_prompt: bool=False, nodes: list=[]) -> None: ...
    def cookOutputWorkItems(self: TopNode, include_display_node: bool, block: bool=False, generate_only: bool=False, tops_only: bool=False) -> None: ...
    def cookAllOutputWorkItems(self: TopNode, include_display_node: bool, block: bool=False, generate_only: bool=False, tops_only: bool=False, save_prompt: bool=False) -> Any: ...
    def generateStaticWorkItems(self: TopNode, block: bool=False) -> None: ...
    def dirtyAllWorkItems(self: TopNode, remove_outputs: bool) -> None: ...
    def dirtyWorkItems(self: TopNode, remove_outputs: bool) -> None: ...
    def generateStaticItems(self: TopNode, block: bool) -> None: ...
    def dirtyAllTasks(self: TopNode, remove_outputs: bool) -> None: ...
    def dirtyTasks(self: TopNode, remove_outputs: bool) -> None: ...
    def executeGraph(self: TopNode, filter_static: bool=False, block: bool=False, generate_only: bool=False, tops_only: bool=False) -> None: ...
    def graphCommands(self: TopNode) -> str: ...
    def taskGraphCommands(self: TopNode) -> str: ...
    def setSelectedWorkItem(self: TopNode, idx: int) -> None: ...
    def getSelectedWorkItem(self: TopNode) -> int: ...
    def getWorkItemName(self: TopNode, idx: int) -> str: ...
    def getPDGGraphContextName(self: TopNode) -> str: ...
    def getPDGNodeName(self: TopNode) -> str: ...
    def getPDGNodeId(self: TopNode) -> int: ...
    def cancelCook(self: TopNode) -> None: ...
    def pauseCook(self: TopNode) -> None: ...
    def addPDGFilter(self: TopNode, idx: int) -> bool: ...
    def removePDGFilter(self: TopNode, idx: int) -> Any: ...
    def isPDGFilter(self: TopNode, idx: int) -> Any: ...
    def enablePDGFilter(self: TopNode, filter_on: bool) -> None: ...
    def workItemStates(self: TopNode) -> List[int]: ...
    def isProcessor(self: TopNode) -> bool: ...
    def isPartitioner(self: TopNode) -> bool: ...
    def isMapper(self: TopNode) -> None: ...
    def isScheduler(self: TopNode) -> None: ...
    def isServiceCompatible(self: TopNode, service_name: str) -> Any: ...
    def isFilterOn(self: TopNode) -> bool: ...
    def getFilterNodes(self: TopNode) -> Tuple[Node, ...]: ...
    def outputDataTypes(self: TopNode) -> Tuple[str, ...]: ...
    def inputDataTypes(self: TopNode) -> Tuple[str, ...]: ...
    def getCookState(self: TopNode, force: bool) -> Any: ...
    def getDataLayerInterfaceId(self: TopNode) -> Any: ...

    def __repr__(self: TopNode) -> Any: ...  ## Added by typing stub update
class Track:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def chopNode(self: Track) -> Optional[ChopNode]: ...
    def clip(self: Track) -> Clip: ...
    def name(self: Track) -> str: ...
    def eval(self: Track) -> float: ...
    def evalAtTime(self: Track, time: float) -> float: ...
    def evalAtFrame(self: Track, frame: float) -> float: ...
    def evalAtSample(self: Track, sample: float) -> float: ...
    def evalAtTimeRange(self: Track, start: float, end: float) -> Tuple[float, ...]: ...
    def evalAtFrameRange(self: Track, start: float, end: float) -> Tuple[float, ...]: ...
    def evalAtSampleRange(self: Track, start: float, end: float) -> Tuple[float, ...]: ...
    def numSamples(self: Track) -> int: ...
    def allSamples(self: Track) -> Tuple[float, ...]: ...
    def evalAtSampleIndex(self: Track, index: int) -> float: ...

    def __repr__(self: Track) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Track) -> Any: ...  ## Added by typing stub update
class ui:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def shellIO() -> ShellIO: ...
    @staticmethod
    def curDesktop() -> Desktop: ...
    @staticmethod
    def desktop(name: str) -> Desktop: ...
    @staticmethod
    def desktops() -> Tuple[Desktop, ...]: ...
    @staticmethod
    def radialMenu(name: str) -> RadialMenu: ...
    @staticmethod
    def radialMenus() -> Tuple[RadialMenu, ...]: ...
    @staticmethod
    def createRadialMenu(name: str, label: str) -> RadialMenu: ...
    @staticmethod
    def createRadialItem(submenu: bool=False, callback: bool=False) -> RadialScriptItem: ...
    @staticmethod
    def injectRadialItem(name: str) -> None: ...
    @staticmethod
    def injectRadialMenu(name: str) -> Any: ...
    @staticmethod
    def updateMainMenuBar() -> None: ...
    @staticmethod
    def panes() -> Tuple[Pane, ...]: ...
    @staticmethod
    def paneTabs() -> Tuple[PaneTab, ...]: ...
    @staticmethod
    def currentPaneTabs() -> Tuple[PaneTab, ...]: ...
    @staticmethod
    def paneTabOfType(type: EnumValue, index: int=0) -> Optional[PaneTab]: ...
    @staticmethod
    def findPane(pane_id: int) -> Optional[Pane]: ...
    @staticmethod
    def findPaneTab(name: str) -> Optional[PaneTab]: ...
    @staticmethod
    def floatingPaneTabs() -> Tuple[PaneTab, ...]: ...
    @staticmethod
    def floatingPanels() -> Tuple[FloatingPanel, ...]: ...
    @staticmethod
    def paneUnderCursor() -> None: ...
    @staticmethod
    def paneTabUnderCursor() -> None: ...
    @staticmethod
    def isUserInteracting() -> None: ...
    @staticmethod
    def setUserInteracting(arg2: bool) -> None: ...
    @staticmethod
    def orientationUpAxis() -> EnumValue: ...
    @staticmethod
    def handleOrientToNormalAxis() -> EnumValue: ...
    @staticmethod
    def displayConfirmation(text: str, severity: EnumValue=severityType.Message, help: Optional[str]=None, title: Optional[str]=None, details: Optional[str]=None, destails_label: Optional[str]=None, destails_expanded: bool=False) -> bool: ...
    @staticmethod
    def displayCustomConfirmation(text: str, buttons: Sequence[str]=(), severity: EnumValue=severityType.Message, default_choice: int=0, close_choice: int=-1, help: Optional[str]=None, title: Optional[str]=None, details: Optional[str]=None, details_label: Optional[str]=None, suppress: EnumValue=confirmType.OverwriteFile) -> int: ...
    @staticmethod
    def displayMessage(text: str, buttons: Sequence[str]=("Any",), severity: EnumValue=severityType.Message, default_choice: int=0, close_choice: int=-1, help: Optional[str]=None, title: Optional[str]=None, details: Optional[str]=None, details_label: Optional[str]=None, details_expanded: bool=False) -> int: ...
    @staticmethod
    def readInput(message: str, buttons: Sequence[str]=("Any",), severity: EnumValue=severityType.Message, default_choice: int=0, close_choice: int=-1, help: Optional[str]=None, title: Optional[str]=None, initial_contents: Optional[str]=None) -> Tuple[int, str]: ...
    @staticmethod
    def readMultiInput(message: str, input_labels: Sequence[str], password_input_indices: Sequence[int]=(), buttons: Sequence[str]=("Any",), severity: EnumValue=severityType.Message, default_choice: int=0, close_choice: int=-1, help: Optional[str]=None, title: Optional[str]=None, initial_contents: Sequence[str]=("Any",)) -> Tuple[int, Tuple[str, ...]]: ...
    @staticmethod
    def selectFromList(choices: Sequence[str], default_choices: Sequence[int]=(), exclusive: bool=False, message: Optional[str]=None, title: Optional[str]=None, column_header: str="Any", num_visible_rows: int=10, clear_on_cancel: bool=False, width: int=0, height: int=0, sort: bool=False) -> Tuple[int, ...]: ...
    @staticmethod
    def selectFromTree(choices: Sequence[str], picked: Sequence[str]=(), exclusive: bool=False, message: Optional[str]=None, title: Optional[str]=None, clear_on_cancel: bool=False, width: int=0, height: int=0) -> Tuple[str, ...]: ...
    @staticmethod
    def selectParmTag(width: int=0, height: int=0) -> Tuple[str, ...]: ...
    @staticmethod
    def selectParm(category: Optional[NodeTypeCategory]=None, bound_parms_only: bool=False, relative_to_node: Optional[Node]=None, message: Optional[str]=None, title: Optional[str]=None, initial_parms: Sequence[str]=(), multiple_select: bool=True, width: int=0, height: int=0) -> Tuple[str, ...]: ...
    @staticmethod
    def selectParmTuple(category: Optional[NodeTypeCategory]=None, bound_parms_only: bool=False, relative_to_node: Optional[Node]=None, message: Optional[str]=None, title: Optional[str]=None, initial_parm_tuples: Sequence[str]=(), multiple_select: bool=True, width: int=0, height: int=0) -> Tuple[str, ...]: ...
    @staticmethod
    def selectColor(initial_color: Optional[Color]=None) -> Optional[Color]: ...
    @staticmethod
    def loadPaletteFile(file: str) -> Tuple[Color, ...]: ...
    @staticmethod
    def savePaletteFile(file: str, colors: Sequence[Color]) -> None: ...
    @staticmethod
    def updateValueLadder(cursor_x: int, cursor_y: int, alt_key: bool, shift_key: bool) -> None: ...
    @staticmethod
    def closeValueLadder() -> None: ...
    @staticmethod
    def displayFileDependencyDialog(rop_node: Optional[Node]=None, uploaded_files: Sequence[str]=(), forced_unselected_patterns: Sequence[str]=(), project_dir_variable: str="Any", is_standalone: bool=True) -> Tuple[bool, Tuple[Tuple[Parm, str], ...]]: ...
    @staticmethod
    def displayNodeHelp(node_type: NodeType) -> None: ...
    @staticmethod
    def openRenderDialog(rop_node: RopNode) -> None: ...
    @staticmethod
    def openRenameSelectedDialog(node: Node) -> None: ...
    @staticmethod
    def openParameterInterfaceDialog(node: Node, open_tab: Optional[EnumValue]=None, open_tab_tree_path: str="Any") -> None: ...
    @staticmethod
    def updateMode() -> EnumValue: ...
    @staticmethod
    def setUpdateMode(mode: EnumValue) -> None: ...
    @staticmethod
    def triggerUpdate() -> None: ...
    @staticmethod
    def reloadViewportColorSchemes() -> Any: ...
    @staticmethod
    def isAutoKey() -> bool: ...
    @staticmethod
    def removeAllSelectionCallbacks() -> None: ...
    @staticmethod
    def createDialog(ui_file_name: str) -> Dialog: ...
    @staticmethod
    def findDialog(ui_file_name: str) -> Dialog: ...
    @staticmethod
    def dialogs() -> Tuple[Dialog, ...]: ...
    @staticmethod
    def writePythonShellHistoryFile(filename: Optional[str]=None) -> None: ...
    @staticmethod
    def readPythonShellHistoryFile(filename: Optional[str]=None) -> None: ...
    @staticmethod
    def setStatusMessage(message: str, severity: EnumValue=severityType.Message) -> None: ...
    @staticmethod
    def statusMessage() -> EnumValue: ...
    @staticmethod
    def openAssetUploadDialog(uploading_node: Node, session_key: str, containing_node: Node) -> Any: ...
    @staticmethod
    def openAssetDependenciesDialog(uploading_nodes: Sequence[Node], uploaded_nodes: Sequence[Node], session_key: str, containing_node: Node) -> Any: ...
    @staticmethod
    def hasDragSourceData(index: int) -> bool: ...
    @staticmethod
    def getDragSourceData(label: str, index: int=0) -> Any: ...
    @staticmethod
    def resourceValueFromName(name: str) -> str: ...
    @staticmethod
    def colorFromName(name: str) -> Color: ...
    @staticmethod
    def globalScaleFactor() -> float: ...
    @staticmethod
    def scaledSize(size: int) -> int: ...
    @staticmethod
    def inchesToPixels(inches: float) -> float: ...
    @staticmethod
    def pixelsToInches(pixels: float) -> float: ...
    @staticmethod
    def copyTextToClipboard(text: str) -> None: ...
    @staticmethod
    def getTextFromClipboard() -> str: ...
    @staticmethod
    def hotkeys(hotkey_symbol: str) -> Tuple[str, ...]: ...
    @staticmethod
    def hotkeyDescription(hotkey_symbol: str) -> str: ...
    @staticmethod
    def isKeyMatch(key: str, hotkey_symbol: str) -> bool: ...
    @staticmethod
    def openCaptureWeightSpreadsheet(node: Node, pattern: Optional[str]=None) -> None: ...
    @staticmethod
    def registerViewerState(template: ViewerStateTemplate) -> None: ...
    @staticmethod
    def registerViewerStateFile(file_path: str) -> None: ...
    @staticmethod
    def registerViewerStates() -> None: ...
    @staticmethod
    def unregisterViewerState(state_name: str) -> None: ...
    @staticmethod
    def unregisterViewerStateFile(file_path: str) -> None: ...
    @staticmethod
    def isRegisteredViewerState(state_name: str) -> bool: ...
    @staticmethod
    def reloadViewerState(state_names: Optional[str]=None) -> None: ...
    @staticmethod
    def reloadViewerStates(*args: Sequence[str], **kwargs) -> Any: ...
    @staticmethod
    def viewerStateInfo(state_names: Sequence[str]) -> str: ...
    @staticmethod
    def viewerStateInfoFromFile(state_filepath: str) -> Tuple[str, str]: ...
    @staticmethod
    def viewerHandleInfo(handle_names: Sequence[str]) -> str: ...
    @staticmethod
    def printResourceMessage(resource_type: EnumValue, message: str, message_type: EnumValue=severityType.Message) -> None: ...
    @staticmethod
    def fireResourceCustomEvent(resource_type: EnumValue, user_data: Dict[str, Any], queue: bool=True) -> None: ...
    @staticmethod
    def showInFileBrowser(file_path: str) -> None: ...
    @staticmethod
    def showFloatingParameterEditor(node: Node, reuse: bool=True) -> Any: ...
    @staticmethod
    def openParameterExpressionEditor(parm: Parm) -> None: ...
    @staticmethod
    def openPreferences(page: str) -> None: ...
    @staticmethod
    def hideAllMinimizedStowbars() -> bool: ...
    @staticmethod
    def setHideAllMinimizedStowbars(on: bool) -> bool: ...
    @staticmethod
    def registerViewerHandle(template: ViewerHandleTemplate) -> None: ...
    @staticmethod
    def registerViewerHandles() -> None: ...
    @staticmethod
    def registerViewerHandleFile(handle_file: str) -> None: ...
    @staticmethod
    def unregisterViewerHandle(handle_name: str) -> None: ...
    @staticmethod
    def unregisterViewerHandleFile(handle_file: str) -> None: ...
    @staticmethod
    def isRegisteredViewerHandle(handle_name: str) -> bool: ...
    @staticmethod
    def reloadViewerHandle(handle_name: str) -> None: ...
    @staticmethod
    def loadPackage(file_path: str) -> None: ...
    @staticmethod
    def loadPackageArchive(file_path: str, extract_path: Optional[str]=None) -> List[str]: ...
    @staticmethod
    def unloadPackage(file_path: str) -> None: ...
    @staticmethod
    def reloadPackage(file_path: str) -> None: ...
    @staticmethod
    def packageInfo(file_paths: Sequence[str]) -> str: ...
    @staticmethod
    def sharedLayoutDataSource() -> AssetGalleryDataSource: ...
    @staticmethod
    def setSharedLayoutDataSource(datasource: AssetGalleryDataSource) -> None: ...
    @staticmethod
    def reloadSharedLayoutDataSource() -> None: ...
    @staticmethod
    def selectMultipleNodes(relative_to_node: Optional[Node]=None, initial_node: Optional[Node]=None, node_type_filter: Optional[EnumValue]=None, title: Optional[str]=None, width: int=0, height: int=0, custom_node_filter_callback: Optional[Any]=None) -> Tuple[Optional[str], ...]: ...
    @staticmethod
    def openColorEditor(color_change_callback, include_alpha: bool=False, initial_color: Optional[Color]=None, initial_alpha: float=1.0) -> None: ...
    @staticmethod
    def openValueLadder(initial_value: float, value_changed_callback, type: EnumValue=valueLadderType.Generic, data_type: EnumValue=valueLadderDataType.Float) -> None: ...
    @staticmethod
    def addEventLoopCallback(callback) -> None: ...
    @staticmethod
    def removeEventLoopCallback(callback) -> None: ...
    @staticmethod
    def postEventCallback(callback) -> None: ...
    @staticmethod
    def removePostedEventCallback(callback) -> None: ...
    @staticmethod
    def eventLoopCallbacks() -> Tuple[Callable, ...]: ...
    @staticmethod
    def waitUntil(condition_callback) -> None: ...
    @staticmethod
    def addTriggerUpdateCallback(callback) -> None: ...
    @staticmethod
    def removeTriggerUpdateCallback(callback) -> Any: ...
    @staticmethod
    def addSelectionCallback(callback) -> None: ...
    @staticmethod
    def removeSelectionCallback(callback) -> None: ...
    @staticmethod
    def selectionCallbacks() -> Tuple[Callable, ...]: ...
    @staticmethod
    def addResourceEventCallback(callback) -> None: ...
    @staticmethod
    def removeResourceEventCallback(callback) -> None: ...
    @staticmethod
    def openFileEditor(title: str, file_path: str, action_callback: Optional[Any]=None, params: Optional[Dict[str, Any]]=None) -> None: ...
    @staticmethod
    def openViewerStateCodeGenDialog(category: NodeTypeCategory, action_callback, operator_name: Optional[str]=None) -> None: ...
    @staticmethod
    def openViewerHandleCodeGenDialog(categories: NodeTypeCategory, action_callback) -> None: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _getActiveRadialMenu() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _setActiveRadialMenu(name: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _selectFile(*args: str, **kwargs: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _openColorEditor(color_changed_callback, include_alpha: bool=False, initial_color: Optional[Color]=None, initial_alpha: float=1.0) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _openTypePropertiesDialogForNode(node: Node, promote_spare_parms: bool, immediately_save: bool) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _openTypePropertiesDialogForNodeType(node_type: NodeType, promote_spare_parms: bool, immediately_save: bool) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _getTabMenuIconSize() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _processEvents() -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _geoSpreadsheetCellText(sheet_id: int, row: int, col: int) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _openCaptureWeightSpreadsheet2(node: Node) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _closeCaptureWeightSpreadsheet(identifier: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _selectNodeData(*args: str, **kwargs: str) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def _selectNode(relative_to_node: Optional[Node]=None, initial_node: Optional[Node]=None, node_type_filter: Optional[EnumValue]=None, title: Optional[str]=None, width: int=0, height: int=0, multiple_select: bool=False, custom_node_filter_callback: Optional[Any]=None) -> Any: ...  ## Added by typing stub update
    @staticmethod
    def selectFile(start_directory: Optional[str]=None, title: Optional[str]=None, collapse_sequences: bool=False, file_type: EnumValue=fileType.Any, pattern: Optional[str]=None, default_value: Optional[str]=None, multiple_select: bool=False, image_chooser: bool=False, chooser_mode: EnumValue=fileChooserMode.ReadAndWrite, width: int=0, height: int=0) -> str: ...  ## Added by typing stub update
class UIEvent:
    thisown: Any = ...
    def __init__(self: UIEvent, val: int) -> None: ...
    __swig_destroy__: Any = ...
    def device(self: UIEvent) -> UIEventDevice: ...
    def hasQueuedEvents(self: UIEvent) -> bool: ...
    def queuedEvents(self: UIEvent) -> List[UIEventDevice]: ...
    def value(self: UIEvent) -> Any: ...
    def reason(self: UIEvent) -> EnumValue: ...
    def valueType(self: UIEvent) -> Any: ...

    def __repr__(self: UIEvent) -> Any: ...  ## Added by typing stub update
class UIEventDevice:
    thisown: Any = ...
    def __init__(self: UIEventDevice, val: int, val2: int) -> None: ...
    __swig_destroy__: Any = ...
    def isAltKey(self: UIEventDevice) -> bool: ...
    def isAutoRepeat(self: UIEventDevice) -> bool: ...
    def isCapsLock(self: UIEventDevice) -> bool: ...
    def isCtrlKey(self: UIEventDevice) -> bool: ...
    def isKeyPad(self: UIEventDevice) -> bool: ...
    def isShiftKey(self: UIEventDevice) -> bool: ...
    def isArrowDown(self: UIEventDevice) -> bool: ...
    def isArrowLeft(self: UIEventDevice) -> bool: ...
    def isArrowRight(self: UIEventDevice) -> bool: ...
    def isArrowUp(self: UIEventDevice) -> bool: ...
    def isKeyPressed(self: UIEventDevice) -> bool: ...
    def isFunctionKey(self: UIEventDevice) -> bool: ...
    def keyValue(self: UIEventDevice) -> int: ...
    def keyString(self: UIEventDevice) -> str: ...
    def modifierString(self: UIEventDevice) -> str: ...
    def isKeyUp(self: UIEventDevice) -> bool: ...
    def isKeyDown(self: UIEventDevice) -> bool: ...
    def isLeftButton(self: UIEventDevice) -> bool: ...
    def isMiddleButton(self: UIEventDevice) -> bool: ...
    def isRightButton(self: UIEventDevice) -> bool: ...
    def mouseWheel(self: UIEventDevice) -> int: ...
    def mouseX(self: UIEventDevice) -> int: ...
    def mouseY(self: UIEventDevice) -> int: ...
    def isTablet(self: UIEventDevice) -> bool: ...
    def tabletAngle(self: UIEventDevice) -> float: ...
    def tabletPressure(self: UIEventDevice) -> float: ...
    def tabletRoll(self: UIEventDevice) -> float: ...
    def tabletTilt(self: UIEventDevice) -> float: ...
    def time(self: UIEventDevice) -> None: ...

    def __repr__(self: UIEventDevice) -> Any: ...  ## Added by typing stub update
class undos:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def areEnabled() -> bool: ...
    @staticmethod
    def disabler() -> UndosDisabler: ...
    @staticmethod
    def group(label: str) -> UndosGroup: ...
    @staticmethod
    def removeUndos(tag: str) -> None: ...
    @staticmethod
    def clear() -> None: ...
    @staticmethod
    def memoryUsage() -> int: ...
    @staticmethod
    def memoryUsageLimit() -> int: ...
    @staticmethod
    def performUndo() -> None: ...
    @staticmethod
    def performRedo() -> None: ...
    @staticmethod
    def undoLabels() -> Tuple[str, ...]: ...
    @staticmethod
    def redoLabels() -> Tuple[str, ...]: ...
    @staticmethod
    def add(undo, label: str, tag: Optional[str]=None) -> None: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class UndosDisabler:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __enter__(self: UndosDisabler) -> Any: ...
    def __exit__(self: UndosDisabler, type, value, traceback) -> Any: ...

    def __repr__(self: UndosDisabler) -> Any: ...  ## Added by typing stub update
class UndosGroup:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def label(self: UndosGroup) -> None: ...
    def __enter__(self: UndosGroup) -> Any: ...
    def __exit__(self: UndosGroup, type, value, traceback) -> Any: ...

    def __repr__(self: UndosGroup) -> Any: ...  ## Added by typing stub update
class VDB(Prim):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def sample(self: VDB, position: Union[Sequence[float], Vector3]) -> float: ...
    def samplev(self: VDB, position: Union[Sequence[float], Vector3]) -> Vector3: ...
    def gradient(self: VDB, position: Union[Sequence[float], Vector3]) -> Vector3: ...
    def voxel(self: VDB, index: Sequence[int]) -> float: ...
    def resolution(self: VDB) -> Vector3: ...
    def indexToPos(self: VDB, index: Sequence[int]) -> Vector3: ...
    def posToIndex(self: VDB, position: Union[Sequence[float], Vector3]) -> Tuple[int, ...]: ...
    def isSDF(self: VDB) -> bool: ...
    def isHeightField(self: VDB) -> bool: ...
    def volumeMax(self: VDB) -> float: ...
    def volumeMin(self: VDB) -> float: ...
    def volumeAverage(self: VDB) -> float: ...
    def transform(self: VDB) -> Matrix3: ...
    def taper(self: VDB) -> int: ...
    def vertex(self: VDB, index: int) -> None: ...
    def isEmpty(self: VDB) -> bool: ...
    def activeVoxelCount(self: VDB) -> int: ...
    def activeVoxelBoundingBox(self: VDB) -> BoundingBox: ...
    def voxelSize(self: VDB) -> Vector3: ...
    def dataType(self: VDB) -> EnumValue: ...
    def voxelRangeAsBool(self: Prim, range: BoundingBox) -> Tuple[bool, ...]: ...
    def voxelRangeAsFloat(self: Prim, range: BoundingBox) -> Tuple[float, ...]: ...
    def voxelRangeAsInt(self: Prim, range: BoundingBox) -> Tuple[int, ...]: ...
    def voxelRangeAsVector3(self: Prim, range: BoundingBox) -> Tuple[Vector3, ...]: ...
    def voxelRange(self: Prim, range: BoundingBox) -> Union[Tuple[bool, ...], Tuple[int, ...], Tuple[float, ...], Tuple[Vector3, ...]]: ...

    def __repr__(self: VDB) -> Any: ...  ## Added by typing stub update
class Vector2:
    thisown: Any = ...
    @overload
    def __init__(self: Vector2, values: SizedItems[float]=(0.0, 0.0)) -> None: ...
    @overload
    def __init__(self: Vector2, x: float=0.0, y: float=0.0) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: Vector2, vector2: Union[SizedItems[float], Vector2], tolerance: float=0.00001) -> bool: ...
    def almostEqual(self: Vector2, vector2: Union[SizedItems[float], Vector2], tolerance: float=0.00001) -> bool: ...
    def __hash__(self: Vector2) -> Any: ...
    def __getitem__(self: Vector2, index: int) -> float: ...
    def __setitem__(self: Vector2, index: int, value: float) -> None: ...
    def __len__(self: Vector2) -> int: ...
    def setTo(self: Vector2, sequence: SizedItems[float]) -> None: ...
    def __add__(self: Vector2, vector2: Union[SizedItems[float], Vector2]) -> Vector2: ...
    def __sub__(self: Vector2, vector2: Union[SizedItems[float], Vector2]) -> Vector2: ...
    def __neg__(self: Vector2) -> Vector2: ...
    def __rmul__(self: Vector2, scalar: float) -> Vector2: ...
    def __mul__(self: Vector2, scalar_or_matrix2: Union[float, Matrix2]) -> Vector2: ...
    def __div__(self: Vector2, scalar: float) -> Vector2: ...
    def __truediv__(self: Vector2, scalar: float) -> Any: ...
    def normalized(self: Vector2) -> Vector2: ...
    def length(self: Vector2) -> float: ...
    def lengthSquared(self: Vector2) -> float: ...
    def distanceTo(self: Vector2, vector2: Union[SizedItems[float], Vector2]) -> float: ...
    def dot(self: Vector2, vector2: Union[SizedItems[float], Vector2]) -> float: ...
    def x(self: Vector2) -> float: ...
    def y(self: Vector2) -> float: ...

    def __str__(self: Vector2) -> Any: ...  ## Added by typing stub update
    def __repr__(self: Vector2) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Vector2) -> Any: ...  ## Added by typing stub update
    def __iter__(self: Vector2) -> Iterator[float]: ...  ## Added by typing stub update
class Vector3:
    thisown: Any = ...
    @overload
    def __init__(self: Vector3, values: SizedItems[float]=(0.0, 0.0, 0.0)) -> None: ...
    @overload
    def __init__(self: Vector3, x: float=0.0, y: float=0.0, z: float=0.0) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: Vector3, vector3: Union[SizedItems[float], Vector3], tolerance: float=0.00001) -> bool: ...
    def almostEqual(self: Vector3, vector3: Union[SizedItems[float], Vector3], tolerance: float=0.00001) -> bool: ...
    def __hash__(self: Vector3) -> Any: ...
    def __getitem__(self: Vector3, index: int) -> float: ...
    def __setitem__(self: Vector3, index: int, value: float) -> None: ...
    def __len__(self: Vector3) -> int: ...
    def setTo(self: Vector3, sequence: SizedItems[float]) -> None: ...
    def __add__(self: Vector3, vector3: Union[SizedItems[float], Vector3]) -> Vector3: ...
    def __sub__(self: Vector3, vector3: Union[SizedItems[float], Vector3]) -> Vector3: ...
    def __neg__(self: Vector3) -> Vector3: ...
    def __rmul__(self: Vector3, scalar: float) -> Vector3: ...
    def __mul__(self: Vector3, scalar_or_matrix3_or_matrix4: Union[float, Matrix3, Matrix4]) -> Vector3: ...
    def __div__(self: Vector3, scalar: float) -> Vector3: ...
    def __truediv__(self: Vector3, scalar: float) -> Any: ...
    def normalized(self: Vector3) -> Vector3: ...
    def multiplyAsDir(self: Vector3, matrix4: Matrix4) -> Vector3: ...
    def length(self: Vector3) -> float: ...
    def lengthSquared(self: Vector3) -> float: ...
    def matrixToRotateTo(self: Vector3, vector3: Union[SizedItems[float], Vector3]) -> Matrix4: ...
    def smoothRotation(self: Vector3, reference: Vector3, rotate_order: str="Any") -> Vector3: ...
    def distanceTo(self: Vector3, vector3: Union[SizedItems[float], Vector3]) -> float: ...
    def angleTo(self: Vector3, vector3: Union[SizedItems[float], Vector3]) -> float: ...
    def dot(self: Vector3, vector3: Union[Sequence[float], Vector3]) -> float: ...
    def cross(self: Vector3, vector3: Union[SizedItems[float], Vector3]) -> Vector3: ...
    def ocio_transform(self: Vector3, src_space: str, dest_space: str) -> Vector3: ...
    def x(self: Vector3) -> float: ...
    def y(self: Vector3) -> float: ...
    def z(self: Vector3) -> float: ...
    def distanceToSegment(self: Vector3, point1: Vector3, point2: Vector3) -> Vector3: ...
    def distance2ToSegment(self: Vector3, point1: Vector3, point2: Vector3) -> Any: ...
    def pointOnSegment(self: Vector3, point1: Vector3, point2: Vector3) -> Any: ...

    def __str__(self: Vector3) -> Any: ...  ## Added by typing stub update
    def __repr__(self: Vector3) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Vector3) -> Any: ...  ## Added by typing stub update
    def __iter__(self: Vector3) -> Iterator[float]: ...  ## Added by typing stub update
class Vector4:
    thisown: Any = ...
    @overload
    def __init__(self: Vector4, values: SizedItems[float]=(0.0, 0.0, 0.0, 0.0)) -> None: ...
    @overload
    def __init__(self: Vector4, x: float=0.0, y: float=0.0, z: float=0.0, w: float=0.0) -> None: ...
    __swig_destroy__: Any = ...
    def isAlmostEqual(self: Vector4, vector4: Union[SizedItems[float], Vector4, Quaternion], tolerance: float=0.00001) -> bool: ...
    def almostEqual(self: Vector4, vector4: Union[SizedItems[float], Vector4, Quaternion], tolerance: float=0.00001) -> bool: ...
    def __hash__(self: Vector4) -> Any: ...
    def __getitem__(self: Vector4, index: int) -> float: ...
    def __setitem__(self: Vector4, index: int, value: float) -> None: ...
    def __len__(self: Vector4) -> int: ...
    def setTo(self: Vector4, sequence: SizedItems[float]) -> None: ...
    def __add__(self: Vector4, vector4: Union[SizedItems[float], Vector4, Quaternion]) -> Vector4: ...
    def __sub__(self: Vector4, vector4: Union[SizedItems[float], Vector4, Quaternion]) -> Vector4: ...
    def __rmul__(self: Vector4, scalar: float) -> Vector4: ...
    def __mul__(self: Vector4, scalar_or_matrix4: Union[float, Matrix4]) -> Vector4: ...
    def __div__(self: Vector4, scalar: float) -> Vector4: ...
    def __truediv__(self: Vector4, scalar: float) -> Any: ...
    def normalized(self: Vector4) -> Vector4: ...
    def length(self: Vector4) -> float: ...
    def lengthSquared(self: Vector4) -> float: ...
    def dot(self: Vector4, vector4: Union[SizedItems[float], Vector4, Quaternion]) -> float: ...
    def ocio_transform(self: Vector4, src_space: str, dest_space: str) -> Vector4: ...
    def x(self: Vector4) -> float: ...
    def y(self: Vector4) -> float: ...
    def z(self: Vector4) -> float: ...
    def w(self: Vector4) -> float: ...

    def __str__(self: Vector4) -> Any: ...  ## Added by typing stub update
    def __repr__(self: Vector4) -> Any: ...  ## Added by typing stub update
    def _asVoidPointer(self: Vector4) -> Any: ...  ## Added by typing stub update
    def __iter__(self: Vector4) -> Iterator[float]: ...  ## Added by typing stub update
class Vertex:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: Vertex) -> Any: ...
    def geometry(self: Vertex) -> Geometry: ...
    def prim(self: Vertex) -> Prim: ...
    def point(self: Vertex) -> Point: ...
    def number(self: Vertex) -> int: ...
    def linearNumber(self: Vertex) -> int: ...
    def attribType(self: Vertex) -> EnumValue: ...
    def floatAttribValue(self: Vertex, name_or_attrib: Union[str, Attrib]) -> float: ...
    def floatListAttribValue(self: Vertex, name_or_attrib: Union[str, Attrib]) -> Tuple[float, ...]: ...
    def intAttribValue(self: Vertex, name_or_attrib: Union[str, Attrib]) -> int: ...
    def intListAttribValue(self: Vertex, name_or_attrib: Union[str, Attrib]) -> Tuple[int, ...]: ...
    def stringAttribValue(self: Vertex, name_or_attrib: Union[str, Attrib]) -> str: ...
    def stringListAttribValue(self: Vertex, name_or_attrib: Union[str, Attrib]) -> Tuple[str, ...]: ...
    def dictAttribValue(self: Vertex, name_or_attrib: Union[str, Attrib]) -> dict: ...
    def dictListAttribValue(self: Vertex, name_or_attrib: Union[str, Attrib]) -> Tuple[str, ...]: ...
    def setAttribValue(self: Vertex, name_or_attrib: Union[str, Attrib], attrib_value: Dict[str, Any]) -> None: ...
    def attribValue(self: Vertex, name_or_attrib: Union[str, Attrib]) -> Union[Union[int, float, str, tuple],dict]: ...

    def __repr__(self: Vertex) -> Any: ...  ## Added by typing stub update
    def _attribInfo(self: Vertex, name: str, attr_data_type: int, attr_size: int, is_array_type: bool) -> Any: ...  ## Added by typing stub update
class VertexGroup:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def __hash__(self: VertexGroup) -> Any: ...
    def geometry(self: VertexGroup) -> Geometry: ...
    def name(self: VertexGroup) -> None: ...
    def iterVertices(self: VertexGroup) -> Iterator[Vertex]: ...
    def vertices(self: VertexGroup) -> Tuple[Vertex, ...]: ...
    def contains(self: VertexGroup, vertex: Vertex) -> bool: ...
    def isOrdered(self: VertexGroup) -> bool: ...
    def add(self: VertexGroup, vertex_or_list_or_vertex_group: Union[Vertex, Sequence[Vertex], VertexGroup]) -> None: ...
    def remove(self: VertexGroup, vertex_or_list_or_vertex_group: Union[Vertex, Sequence[Vertex], VertexGroup]) -> None: ...
    def clear(self: VertexGroup) -> None: ...
    def destroy(self: VertexGroup) -> None: ...
    def vertexCount(self: VertexGroup) -> int: ...
    def optionType(self: VertexGroup, name: str) -> EnumValue: ...
    def setOption(self: VertexGroup, name: str, value, type_hint: EnumValue=fieldType.NoSuchField) -> None: ...
    def removeOption(self: VertexGroup, name: str) -> None: ...
    def dataId(self: VertexGroup) -> None: ...
    def incrementDataId(self: VertexGroup) -> None: ...
    def options(self: VertexGroup, name: str) -> Union[bool, int, float, str, Vector2, Vector4, Quaternion, Matrix3, Matrix4, Tuple[int, ...], Tuple[float, ...]]: ...
    def option(self: VertexGroup, option_name: str) -> Any: ...

    def __repr__(self: VertexGroup) -> Any: ...  ## Added by typing stub update
class VexContext:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: VexContext) -> str: ...
    def nodeTypeCategory(self: VexContext) -> NodeTypeCategory: ...
    def shaderType(self: VexContext) -> Union[EnumValue,None]: ...
    def pathsToLoadedVexFunctions(self: VexContext) -> Dict[str, str]: ...

    def __repr__(self: VexContext) -> Any: ...  ## Added by typing stub update
class ViewerDragger:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: ViewerDragger) -> str: ...
    def valid(self: ViewerDragger) -> bool: ...
    def startDrag(self: ViewerDragger, ui_event: ViewerEvent, start_pos: Vector3) -> None: ...
    def startDragAcrossFloor(self: ViewerDragger, ui_event: ViewerEvent, start_pos: Vector3, mouse_offset) -> None: ...
    def startDragAlongLine(self: ViewerDragger, ui_event: ViewerEvent, line_origin: Vector3, line_dir: Vector3) -> None: ...
    def startDragAlongPlane(self: ViewerDragger, ui_event: ViewerEvent, plane_point: Vector3, plane_normal: Vector3) -> None: ...
    def startDragRotate(self: ViewerDragger, ui_event: ViewerEvent, center_pos: Vector3, radius: float, rotate_axis: Vector3, orient: Matrix3) -> None: ...
    def drag(self: ViewerDragger, ui_event: ViewerEvent) -> Dict[str, Union[Vector3, Matrix3]]: ...
    def endDrag(self: ViewerDragger) -> None: ...
    def position(self: ViewerDragger) -> Vector3: ...
    def startPosition(self: ViewerDragger) -> Vector3: ...
    def startDirection(self: ViewerDragger) -> Vector3: ...
    def startRotatePosition(self: ViewerDragger) -> Vector3: ...
    def viewport(self: ViewerDragger) -> GeometryViewport: ...

class ViewerEvent(UIEvent):
    thisown: Any = ...
    def __init__(self: ViewerEvent, sceneViewer: SceneViewer, val: int) -> None: ...
    __swig_destroy__: Any = ...
    def ray(self: ViewerEvent) -> Tuple[Vector3, Vector3]: ...
    def snappingRay(self: ViewerEvent) -> dict: ...
    def screenToRay(self: ViewerEvent, scrx: float, scry: float) -> Tuple[Vector3, Vector3]: ...
    def curViewport(self: ViewerEvent) -> GeometryViewport: ...

    def __repr__(self: ViewerEvent) -> Any: ...  ## Added by typing stub update
class ViewerStateContext(GadgetContext):
    thisown: Any = ...
    def __init__(self: ViewerStateContext, val: int) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: ViewerStateContext) -> Any: ...  ## Added by typing stub update
class ViewerHandleDragger(ViewerDragger):
    thisown: Any = ...
    def __init__(self: ViewerHandleDragger, name: str) -> None: ...
    __swig_destroy__: Any = ...

    def __repr__(self: ViewerHandleDragger) -> Any: ...  ## Added by typing stub update
class ViewerHandleContext(GadgetContext):
    thisown: Any = ...
    def __init__(self: ViewerHandleContext, val: int) -> None: ...
    __swig_destroy__: Any = ...
    def isParameterEnabled(self: ViewerHandleContext, parm_name: str) -> bool: ...
    def scaleFactor(self: ViewerHandleContext, ref_position: Vector3) -> float: ...
    def scaleValue(self: ViewerHandleContext) -> float: ...
    def objectWorldTransform(self: ViewerHandleContext) -> Matrix4: ...
    def objectLocalTransform(self: ViewerHandleContext) -> Matrix4: ...

    def __repr__(self: ViewerHandleContext) -> Any: ...  ## Added by typing stub update
class ViewerHandleTemplate:
    thisown: Any = ...
    def __init__(self: ViewerHandleTemplate, name: str, label: str, categories: Sequence[NodeTypeCategory]) -> None: ...
    __swig_destroy__: Any = ...
    def typeName(self: ViewerHandleTemplate) -> str: ...
    def categories(self: ViewerHandleTemplate) -> List[NodeTypeCategory]: ...
    def bindMenu(self: ViewerHandleTemplate, menu: ViewerStateMenu) -> None: ...
    def bindIcon(self: ViewerHandleTemplate, icon_name: str) -> None: ...
    def bindGadget(self: ViewerHandleTemplate, drawable_type: EnumValue, gadget_name: str, gadget_label: Optional[str]=None, parms: Optional[Sequence[str]]=None) -> None: ...
    def bindParameter(self: ViewerHandleTemplate, param_type: EnumValue, name: str, label: Optional[str]=None, default_value: Optional[Any]=None, num_components: int=1, min_limit: int=0, max_limit: int=1, visible: bool=True) -> None: ...
    def exportParameters(self: ViewerHandleTemplate, params: Sequence[str]) -> None: ...
    def bindSetting(self: ViewerHandleTemplate, param_type: EnumValue, name: str, label: Optional[str]=None, menu_as_button_strip: bool=False, menu_items: Optional[bool]=None, num_components: int=1, default_value: Optional[int]=None, min_limit: int=0, max_limit: int=1, align: bool=False) -> None: ...
    def bindFactory(self: ViewerHandleTemplate, callable) -> None: ...

    def __repr__(self: ViewerHandleTemplate) -> Any: ...  ## Added by typing stub update
class ViewerState:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: ViewerState) -> str: ...
    def description(self: ViewerState) -> str: ...
    def icon(self: ViewerState) -> str: ...
    def categories(self: ViewerState) -> Tuple[NodeTypeCategory, ...]: ...
    def nodeType(self: ViewerState) -> Optional[NodeType]: ...
    def isHidden(self: ViewerState) -> Any: ...
    def hotkey(self: ViewerState) -> str: ...
    def parmTemplates(self: ViewerState) -> ParmTemplateGroup: ...

    def __repr__(self: ViewerState) -> Any: ...  ## Added by typing stub update
class ViewerStateDragger(ViewerDragger):
    thisown: Any = ...
    def __init__(self: ViewerStateDragger, name: str, xform: Matrix4=Matrix4(1.0), inv_xform: Matrix4=Matrix4(1.0)) -> None: ...
    __swig_destroy__: Any = ...
    def setTransform(self: ViewerStateDragger, xform: Matrix4) -> None: ...
    def setInverseTransform(self: ViewerStateDragger, inv_xform: Matrix4) -> None: ...
    def transform(self: ViewerStateDragger) -> None: ...
    def inverseTransform(self: ViewerStateDragger) -> None: ...

    def __repr__(self: ViewerStateDragger) -> Any: ...  ## Added by typing stub update
class ViewerStateMenu:
    thisown: Any = ...
    def __init__(self: ViewerStateMenu, id: str, label: str) -> None: ...
    __swig_destroy__: Any = ...
    def addToggleItem(self: ViewerStateMenu, id: str, label: str, default: bool, hotkey: str="Any") -> None: ...
    def addActionItem(self: ViewerStateMenu, id: str, label: str, hotkey: str="Any") -> None: ...
    def addSeparator(self: ViewerStateMenu) -> None: ...
    def addRadioStrip(self: ViewerStateMenu, id: str, label: str, default: str) -> None: ...
    def addRadioStripItem(self: ViewerStateMenu, strip_id: str, id: str, label: str, hotkey: str="Any") -> None: ...
    def addMenu(self: ViewerStateMenu, submenu: ViewerStateMenu) -> None: ...

    def __repr__(self: ViewerStateMenu) -> Any: ...  ## Added by typing stub update
class ViewerStateTemplate:
    thisown: Any = ...
    def __init__(self: ViewerStateTemplate, state_name: str, state_label: str, node_type_category: NodeTypeCategory, contexts: Optional[Sequence[NodeTypeCategory]]=None) -> None: ...
    __swig_destroy__: Any = ...
    def typeName(self: ViewerStateTemplate) -> str: ...
    def categoryName(self: ViewerStateTemplate) -> str: ...
    def contexts(self: ViewerStateTemplate) -> List[NodeTypeCategory]: ...
    def bindParameter(self: ViewerStateTemplate, param_type: EnumValue, name: Optional[str]=None, label: Optional[str]=None, menu_as_button_strip: bool=False, menu_items: list=[], num_components: int=1, default_value: Optional[int]=None, min_limit: int=0, max_limit: int=1, align: bool=False, toolbox: bool=True) -> None: ...
    def bindHandle(self: ViewerStateTemplate, handle_type: str, name: str, bindings: str, settings: Optional[bool]=None) -> None: ...
    def bindHandleStatic(self: ViewerStateTemplate, *args: str, **kwargs: str) -> Any: ...
    def bindGadget(self: ViewerStateTemplate, drawable_type: EnumValue, gadget_name: str, gadget_label: Optional[str]=None) -> None: ...
    def bindGeometrySelector(self: ViewerStateTemplate, prompt: str, allow_drag: bool=False, quick_select: bool=True, auto_start: bool=True, toolbox: bool=True, use_existing_selection: bool=True, consume_selection: bool=True, secure_selection: EnumValue=secureSelectionOption.Obey, initial_selection: str="Any", initial_selection_type: EnumValue=geometryType.Primitives, ordered: bool=False, geometry_types: list=[], primitive_types: list=[], allow_other_sops: bool=False, hotkey: str="Any", name: str="Any") -> None: ...
    def bindObjectSelector(self: ViewerStateTemplate, prompt: str, quick_select: bool=True, auto_start: bool=True, toolbox: bool=True, use_existing_selection: bool=True, allow_multisel: bool=True, secure_selection: EnumValue=secureSelectionOption.Obey, allowed_types: Sequence[str]=("Any",), hotkey: str="Any", name: str="Any") -> None: ...
    def bindSceneGraphSelector(self: ViewerStateTemplate, prompt: str, allow_drag: bool=True, quick_select: bool=True, auto_start: bool=True, toolbox: bool=True, use_existing_selection: bool=True, secure_selection: EnumValue=secureSelectionOption.Obey, consume_selection: bool=False, allow_multisel: bool=True, prior_selection_paths: Optional[Sequence[str]]=None, prim_mask: Optional[EnumValue]=None, path_prefix_mask: Optional[str]=None, prim_kind: Optional[str]=None, hotkey: str="Any", name: str="Any") -> None: ...
    def bindDynamicsSelector(self: ViewerStateTemplate, prompt: str, allow_objects: bool=True, allow_modifiers: bool=False, quick_select: bool=True, auto_start: bool=True, toolbox: bool=True, use_existing_selection: bool=True, secure_selection: EnumValue=secureSelectionOption.Obey, allow_multisel: bool=True, hotkey: str="Any", name: str="Any") -> None: ...
    def bindDynamicsPointSelector(self: ViewerStateTemplate, prompt: str, allow_objects: bool=True, allow_modifiers: bool=False, quick_select: bool=True, auto_start: bool=True, toolbox: bool=True, use_existing_selection: bool=True, secure_selection: EnumValue=secureSelectionOption.Obey, allow_multisel: bool=True, only_select_points: bool=True, object_based_point_selection: bool=False, use_last_selected_object: bool=False, hotkey: str="Any", name: str="Any") -> None: ...
    def bindDynamicsPolygonSelector(self: ViewerStateTemplate, prompt: str, quick_select: bool=True, auto_start: bool=True, toolbox: bool=True, use_existing_selection: bool=True, object_based_point_selection: bool=False, secure_selection: EnumValue=secureSelectionOption.Obey, use_last_selected_object: bool=False, hotkey: str="Any", name: str="Any") -> None: ...
    def bindDrawableSelector(self: ViewerStateTemplate, prompt: str, auto_start: bool=True, toolbox: bool=True, drawable_mask: list=[], hotkey: str="Any", name: str="Any") -> None: ...
    def bindSelector(self: ViewerStateTemplate, name: str, selector_type: str, prompt: str, primitive_types: Optional[Sequence[EnumValue]]=None, group_parm_name: Optional[str]=None, input_index: int=0, input_required: bool=True, allow_dragging: bool=True) -> None: ...
    def bindMenu(self: ViewerStateTemplate, menu: ViewerStateMenu) -> Any: ...
    def bindIcon(self: ViewerStateTemplate, icon_name: str) -> None: ...
    def bindSupportsSelectionChange(self: ViewerStateTemplate, supports_change: bool) -> None: ...
    def bindSupportsMoveTool(self: ViewerStateTemplate, supports_movetool: bool) -> None: ...
    def bindPlaybackChangeEvent(self: ViewerStateTemplate) -> None: ...
    def bindNodeChangeEvent(self: ViewerStateTemplate, event_types: Sequence[EnumValue]) -> None: ...
    def bindNodeParmChangeEvent(self: ViewerStateTemplate, parm_names: Sequence[str]) -> None: ...
    def bindFactory(self: ViewerStateTemplate, callable) -> None: ...

    def __repr__(self: ViewerStateTemplate) -> Any: ...  ## Added by typing stub update
class ViewportVisualizer:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: ViewportVisualizer) -> str: ...
    def setName(self: ViewportVisualizer, name: str) -> None: ...
    def label(self: ViewportVisualizer) -> str: ...
    def setLabel(self: ViewportVisualizer, label: str) -> None: ...
    def icon(self: ViewportVisualizer) -> str: ...
    def setIcon(self: ViewportVisualizer, icon: str) -> None: ...
    def isActive(self: ViewportVisualizer, viewport: Optional[GeometryViewport]=None) -> bool: ...
    def setIsActive(self: ViewportVisualizer, on: bool, viewport: Optional[GeometryViewport]=None) -> None: ...
    def type(self: ViewportVisualizer) -> ViewportVisualizerType: ...
    def setType(self: ViewportVisualizer, type: ViewportVisualizerType) -> None: ...
    def category(self: ViewportVisualizer) -> EnumValue: ...
    def categoryNode(self: ViewportVisualizer) -> Node: ...
    def scope(self: ViewportVisualizer) -> EnumValue: ...
    def setScope(self: ViewportVisualizer, scope: EnumValue) -> None: ...
    def isShownInToolbar(self: ViewportVisualizer) -> bool: ...
    def showInToolbar(self: ViewportVisualizer, on: bool) -> None: ...
    def isActiveWhenUnselected(self: ViewportVisualizer) -> bool: ...
    def setIsActiveWhenUnselected(self: ViewportVisualizer, on: bool) -> None: ...
    def isActiveWhenSelected(self: ViewportVisualizer) -> bool: ...
    def setIsActiveWhenSelected(self: ViewportVisualizer, on: bool) -> None: ...
    def isActiveWhenGhosted(self: ViewportVisualizer) -> bool: ...
    def setIsActiveWhenGhosted(self: ViewportVisualizer, on: bool) -> None: ...
    def isActiveWhenDisplayed(self: ViewportVisualizer) -> bool: ...
    def setIsActiveWhenDisplayed(self: ViewportVisualizer, on: bool) -> None: ...
    def isActiveWhenCurrent(self: ViewportVisualizer) -> bool: ...
    def setIsActiveWhenCurrent(self: ViewportVisualizer, on: bool) -> None: ...
    def isActiveWhenTemplated(self: ViewportVisualizer) -> bool: ...
    def setIsActiveWhenTemplated(self: ViewportVisualizer, on: bool) -> None: ...
    def parmNames(self: ViewportVisualizer) -> Tuple[str, ...]: ...
    def evalParmAsFloat(self: ViewportVisualizer, parm_name: str) -> float: ...
    def evalParmAsInt(self: ViewportVisualizer, parm_name: str) -> int: ...
    def evalParmAsString(self: ViewportVisualizer, parm_name: str) -> int: ...
    def evalParmAsRamp(self: ViewportVisualizer) -> Ramp: ...
    def evalParm(self: ViewportVisualizer, parm_name: str) -> Union[int, float, str]: ...
    def setParm(self: ViewportVisualizer, parm_name: str, value: Union[int, float, str]) -> None: ...
    def destroy(self: ViewportVisualizer) -> None: ...

    def __repr__(self: ViewportVisualizer) -> Any: ...  ## Added by typing stub update
class viewportVisualizers:
    thisown: Any = ...
    @staticmethod
    def __init__(*args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    @staticmethod
    def visualizers(category: EnumValue=viewportVisualizerCategory.Common, node: Optional[Node]=None) -> Tuple[ViewportVisualizer, ...]: ...
    @staticmethod
    def createVisualizer(type: ViewportVisualizerType, category: EnumValue=viewportVisualizerCategory.Common, node: Optional[Node]=None) -> ViewportVisualizer: ...
    @staticmethod
    def copyVisualizer(source: ViewportVisualizer) -> ViewportVisualizer: ...
    @staticmethod
    def types() -> Tuple[ViewportVisualizerType, ...]: ...
    @staticmethod
    def type(name: str) -> ViewportVisualizerType: ...
    @staticmethod
    def isCategoryActive(category: EnumValue, node: Optional[Node]=None, viewport: Optional[GeometryViewport]=None) -> bool: ...
    @staticmethod
    def setIsCategoryActive(on: bool, category: EnumValue, node: Optional[Node]=None, viewport: Optional[GeometryViewport]=None) -> bool: ...

    @staticmethod
    def __repr__() -> Any: ...  ## Added by typing stub update
class ViewportVisualizerType:
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def name(self: ViewportVisualizerType) -> str: ...
    def description(self: ViewportVisualizerType) -> str: ...
    def icon(self: ViewportVisualizerType) -> str: ...

    def __repr__(self: ViewportVisualizerType) -> Any: ...  ## Added by typing stub update
class Volume(Prim):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def sample(self: Volume, position: Union[Sequence[float], Vector3]) -> float: ...
    def gradient(self: Volume, position: Union[Sequence[float], Vector3]) -> Vector3: ...
    def voxel(self: Volume, index: Sequence[int]) -> float: ...
    def setVoxel(self: Volume, index: Sequence[int], value: float) -> None: ...
    def allVoxels(self: Volume) -> Tuple[float, ...]: ...
    def allVoxelsAsString(self: Volume) -> str: ...
    def setAllVoxels(self: Volume, values: Sequence[float]) -> None: ...
    def setAllVoxelsFromString(self: Volume, values) -> None: ...
    def voxelSlice(self: Volume, plane: str, index: int) -> Tuple[float, ...]: ...
    def voxelSliceAsString(self: Volume, plane: str, index: int) -> str: ...
    def setVoxelSlice(self: Volume, values: Sequence[float], plane: str, index: int) -> None: ...
    def setVoxelSliceFromString(self: Volume, values, plane: str, index: int) -> Any: ...
    def resolution(self: Volume) -> Vector3: ...
    def indexToPos(self: Volume, index: Sequence[int]) -> Vector3: ...
    def posToIndex(self: Volume, position: Union[Sequence[float], Vector3]) -> Tuple[int, ...]: ...
    def isValidIndex(self: Volume, index: Sequence[int]) -> bool: ...
    def isSDF(self: Volume) -> bool: ...
    def isHeightField(self: Volume) -> bool: ...
    def volumeMax(self: Volume) -> float: ...
    def volumeMin(self: Volume) -> float: ...
    def volumeAverage(self: Volume) -> float: ...
    def transform(self: Volume) -> Matrix3: ...
    def setTransform(self: Volume, matrix4: Matrix4) -> None: ...
    def taperX(self: Volume) -> Any: ...
    def taperY(self: Volume) -> Any: ...
    def vertex(self: Volume, index: int) -> None: ...

    def __repr__(self: Volume) -> Any: ...  ## Added by typing stub update
class VopNetNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def definedType(self: VopNetNode) -> NodeType: ...
    def vexContext(self: VopNetNode) -> VexContext: ...
    def shaderType(self: VopNetNode) -> Union[EnumValue,None]: ...

    def __repr__(self: VopNetNode) -> Any: ...  ## Added by typing stub update
class VopNode(Node):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def insertParmGenerator(self: VopNode, input_name: str, parm_gen_type: EnumValue, reference_input_defaults: bool) -> VopNode: ...
    def insertParmGeneratorsForAllInputs(self: VopNode, parm_gen_type: EnumValue, reference_input_defaults: bool) -> Dict[str, VopNode]: ...
    def parmDefinerNode(self: VopNode) -> VopNode: ...
    def deleteIndependentInputNodes(self: VopNode, input_index: int, make_parm_node: bool, reference_input_defaults) -> bool: ...
    def dependsOnlyOn(self: VopNode, other_node: VopNode, max_connections: int, recurse: bool) -> Any: ...
    def setIsInputVisible(self: VopNode, input_name: str, is_visible: bool) -> None: ...
    def isInputVisible(self: VopNode, input_name: str) -> bool: ...
    def inputDataTypes(self: VopNode) -> Tuple[str, ...]: ...
    def outputDataTypes(self: VopNode) -> Tuple[str, ...]: ...
    def inputParmTypes(self: VopNode) -> Any: ...
    def isInputCompatible(self: VopNode, idx: int, other: VopNode, other_idx: int, allow_conversions: bool=False) -> bool: ...
    def code(self: VopNode) -> str: ...
    def outerCode(self: VopNode) -> str: ...
    def isBypassed(self: VopNode) -> bool: ...
    def bypass(self: VopNode, on: bool) -> None: ...
    def isDebugFlagSet(self: VopNode) -> bool: ...
    def setDebugFlag(self: VopNode, on: bool) -> None: ...
    def isDetailLowFlagSet(self: VopNode) -> bool: ...
    def setDetailLowFlag(self: VopNode, on: bool) -> None: ...
    def isDetailMediumFlagSet(self: VopNode) -> bool: ...
    def setDetailMediumFlag(self: VopNode, on: bool) -> None: ...
    def isDetailHighFlagSet(self: VopNode) -> bool: ...
    def setDetailHighFlag(self: VopNode, on: bool) -> None: ...
    def isCompressFlagSet(self: VopNode) -> bool: ...
    def setCompressFlag(self: VopNode, on: bool) -> None: ...
    def isMaterialFlagSet(self: VopNode) -> bool: ...
    def setMaterialFlag(self: VopNode, on: bool) -> None: ...
    def setInputGroupExpanded(self: VopNode, group: str, expanded: bool) -> None: ...
    def isInputGroupExpanded(self: VopNode, group: str) -> bool: ...
    def inputsInGroup(self: VopNode, group: str) -> Tuple[int, ...]: ...
    def inputGroupNames(self: VopNode) -> Tuple[str, ...]: ...
    def inputIndexOrder(self: VopNode) -> Tuple[int, ...]: ...
    def renderMask(self: VopNode) -> str: ...
    def shaderString(self: VopNode, render_type: Optional[str]=None, shader_type: EnumValue=shaderType.Surface, as_encapsulated: bool=False) -> str: ...
    def shaderCode(self: VopNode, shader_type: EnumValue=shaderType.Surface) -> str: ...
    def shaderName(self: VopNode, as_otl_path: bool=True, shader_type_name: Optional[str]=None) -> str: ...
    def shaderNameForSignature(self: VopNode, signature: Optional[str]=None) -> str: ...
    def shaderType(self: VopNode) -> Any: ...
    def shaderLanguageName(self: VopNode) -> str: ...
    def currentSignatureName(self: VopNode) -> str: ...
    def coshaderNodes(self: VopNode, parm_name: str) -> Any: ...
    def coshaderNodesOutputNames(self: VopNode, parm_name: str) -> Any: ...
    def subnetTerminalChild(self: VopNode, output_name: str) -> Tuple[Node, str]: ...
    def extraBindings(self: VopNode) -> Tuple[str, ...]: ...
    def usdShaderParms(self: VopNode, force_parms_at_default: bool=False) -> Tuple[str, ...]: ...
    def usdPreviewShaderParms(self: VopNode) -> Tuple[str, ...]: ...

    def __repr__(self: VopNode) -> Any: ...  ## Added by typing stub update
class VopNodeType(NodeType):
    thisown: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any = ...
    def shaderType(self: VopNodeType) -> EnumValue: ...
    def renderMask(self: VopNodeType) -> str: ...
    def vopnetMask(self: VopNodeType) -> str: ...
    def inputTags(self: VopNodeType, input_name: str) -> Dict[str, str]: ...
    def outputTags(self: VopNodeType, output_name: str) -> Dict[str, str]: ...

    def __repr__(self: VopNodeType) -> Any: ...  ## Added by typing stub update
def isUIAvailable() -> bool: ...
def exit(exit_code: int=0, suppress_save_prompt: bool=False) -> None: ...
def applicationName() -> str: ...
def applicationVersion() -> Tuple[int, int, int]: ...
def applicationVersionString() -> str: ...
def applicationCompilationDate() -> str: ...
def applicationPlatformInfo() -> str: ...
def vdbVersionInfo() -> Any: ...
def hdkAPIVersion() -> int: ...
def licenseCategory() -> EnumValue: ...
def isApprentice() -> bool: ...
def releaseLicense() -> None: ...
def maxThreads() -> int: ...
def setMaxThreads(max_threads: int) -> None: ...
def root() -> Node: ...
def pwd() -> Node: ...
def parent() -> Optional[Node]: ...
def setPwd(node: Node) -> None: ...
def cd(path: str) -> None: ...
def phm() -> HDAModule: ...
def currentDopNet() -> Node: ...
def setCurrentDopNet(dopnet: Node) -> None: ...
def simulationEnabled() -> bool: ...
def setSimulationEnabled(enabled: bool) -> None: ...
def node(path: str) -> Optional[Node]: ...
def item(path: str) -> Optional[NetworkMovableItem]: ...
def nodes(path_tuple: Sequence[str]) -> Tuple[Node, ...]: ...
def items(path_tuple: Sequence[str]) -> Tuple[Optional[NetworkMovableItem], ...]: ...
def nodeBySessionId(session_id: int) -> Optional[Node]: ...
def networkBoxBySessionId(session_id: int) -> Optional[NetworkBox]: ...
def stickyNoteBySessionId(session_id: int) -> Optional[StickyNote]: ...
def subnetIndirectInputBySessionId(session_id: int) -> Union[SubnetIndirectInput,None]: ...
def networkDotBySessionId(session_id: int) -> Optional[NetworkDot]: ...
def itemBySessionId(item_type: EnumValue, session_id: int) -> Union[NetworkMovableItem,None]: ...
def nodeConnectionBySessionId(session_id: int, input_index: int) -> Optional[NodeConnection]: ...
def defaultColor(color_item: EnumValue) -> Color: ...
def setDefaultColor(color_item: EnumValue, color: Color) -> None: ...
def selectedNodes(include_hidden: bool=False) -> Tuple[Node, ...]: ...
def selectedItems(include_hidden: bool=False) -> Tuple[NetworkMovableItem, ...]: ...
def selectedConnections() -> Tuple[NodeConnection, ...]: ...
def clearAllSelected() -> None: ...
def copyNodesToClipboard(nodes: Sequence[Node]) -> None: ...
def pasteNodesFromClipboard(destination_node: Node) -> None: ...
def parm(path: str) -> Optional[Parm]: ...
def parmTuple(path: str) -> Optional[ParmTuple]: ...
def evaluatingParm() -> Parm: ...
def parmClipboardContents() -> Tuple[dict, ...]: ...
def evalParm(path: str) -> Union[int, float, str]: ...
def evalParmTuple(path: str) -> Union[Tuple[int, ...], Tuple[float, ...], Tuple[str, ...], Ramp]: ...
def ch(path: str) -> Union[int, float, str]: ...
def hscriptExpression(expression_string: str) -> Union[float, str, Tuple[float, ...], Tuple[str, ...]]: ...
def expressionGlobals() -> dict: ...
def lvar(name: str) -> Union[float,str]: ...
def contextOption(option: str) -> Union[float,str]: ...
def loadCPIODataFromString(data) -> Tuple[str, str]: ...
def loadIndexDataFromString(data) -> dict: ...
def addContextOptionChangeCallback(callback) -> None: ...
def removeContextOptionChangeCallback(callback) -> None: ...
def contextOptionChangeCallbacks() -> None: ...
def hscriptFloatExpression(expression: str) -> float: ...
def hscriptStringExpression(expression: str) -> str: ...
def hscriptVectorExpression(expression: str) -> Tuple[float, ...]: ...
def hscriptMatrixExpression(expression: str) -> Tuple[Tuple[float, ...], ...]: ...
def getenv(name: str, default_value: Optional[str]=None) -> str: ...
def putenv(name: str, value: str) -> None: ...
def unsetenv(name: str) -> None: ...
def allowEnvironmentToOverwriteVariable(name: str, onoff: bool) -> None: ...
def updateProgressAndCheckForInterrupt(percentage: int=-1) -> bool: ...
def runVex(vex_file: str, inputs: Dict[str, Any], precision: Literal["32", "64"]="32") -> Dict[str, Any]: ...
def saveImageDataToFile(color_and_alpha_data: Sequence[float], width: int, height: int, file_name: str) -> None: ...
def loadImageDataFromFile(*args: str, **kwargs: EnumValue) -> Any: ...
def imageResolution(image_file_name: str) -> Tuple[int, ...]: ...
def runCallbackAndCatchCrashes(callback) -> Any: ...
def updateModeSetting() -> EnumValue: ...
def setUpdateMode(arg1: EnumValue) -> EnumValue: ...
def orboltURLHandler() -> Any: ...
def chsop(parameter_path: str) -> str: ...
def chsoplist(parameter_path: str) -> str: ...
def sortedNodePaths(path_tuple: Sequence[str]) -> Tuple[str, ...]: ...
def sortedNodes(node_tuple: Sequence[Node]) -> Tuple[Node, ...]: ...
def patternMatch(pattern: str, str: str, ignore_case: bool=False, path_match: bool=False) -> Any: ...
def chopExportConflictResolutionPattern() -> str: ...
def setChopExportConflictResolutionPattern(pattern: str) -> None: ...
@overload
def nodeType(category: NodeTypeCategory, internal_name: str) -> Optional[NodeType]: ...
@overload
def nodeType(internal_name_with_category: str) -> Optional[NodeType]: ...
def preferredNodeType(name: str, parent_node: Optional[Node]=None) -> Optional[NodeType]: ...
def objNodeTypeCategory() -> NodeTypeCategory: ...
def sopNodeTypeCategory() -> NodeTypeCategory: ...
def dopNodeTypeCategory() -> NodeTypeCategory: ...
def cop2NodeTypeCategory() -> NodeTypeCategory: ...
def shopNodeTypeCategory() -> NodeTypeCategory: ...
def vopNodeTypeCategory() -> NodeTypeCategory: ...
def ropNodeTypeCategory() -> NodeTypeCategory: ...
def chopNodeTypeCategory() -> NodeTypeCategory: ...
def cop2NetNodeTypeCategory() -> NodeTypeCategory: ...
def vopNetNodeTypeCategory() -> NodeTypeCategory: ...
def chopNetNodeTypeCategory() -> NodeTypeCategory: ...
def topNodeTypeCategory() -> NodeTypeCategory: ...
def lopNodeTypeCategory() -> NodeTypeCategory: ...
def managerNodeTypeCategory() -> NodeTypeCategory: ...
def rootNodeTypeCategory() -> NodeTypeCategory: ...
def nodeTypeCategories() -> Dict[str, NodeTypeCategory]: ...
def copyNodesTo(nodes: Sequence[Node], destination_node: Node) -> Tuple[Node, ...]: ...
def moveNodesTo(nodes: Sequence[Node], destination_node: Node) -> Tuple[Node, ...]: ...
def addNodeBundle(name: Optional[str]=None) -> Bundle: ...
def nodeBundles() -> Tuple[Bundle, ...]: ...
def selectedNodeBundles() -> Tuple[Bundle, ...]: ...
def nodeBundle(name: str) -> Optional[Bundle]: ...
def hdaDefinition(node_type_category: NodeTypeCategory, name: str, lib_path: str) -> Union[HDADefinition,None]: ...
def time() -> float: ...
def setTime(time: float) -> None: ...
def frame() -> float: ...
def intFrame() -> int: ...
def setFrame(frame: float) -> None: ...
def fps() -> float: ...
def setFps(fps: float, modify_frame_count: bool=True, preserve_keyframes: bool=False, preserve_frame_start: bool=False) -> None: ...
def timeToFrame(time: float) -> float: ...
def frameToTime(frame: float) -> float: ...
def scaleToMKS(dimensions: str) -> float: ...
def scaleFromMKS(dimensions: str) -> float: ...
def bezier() -> float: ...
def constant() -> float: ...
def cubic() -> float: ...
def cycle(start_frame: float, end_frame: float) -> float: ...
def cyclet(start_time: float, end_time: float) -> float: ...
def cycleoffset(start_frame: float, end_frame: float) -> float: ...
def cycleoffsett(start_time: float, end_time: float) -> float: ...
def ease() -> float: ...
def easein() -> float: ...
def easeinp(ease_speed: float) -> float: ...
def easeout() -> float: ...
def easeoutp(ease_speed: float) -> float: ...
def easep(ease_bias: float) -> float: ...
def linear() -> float: ...
def match() -> float: ...
def matchin() -> float: ...
def matchout() -> float: ...
def qlinear() -> float: ...
def quintic() -> float: ...
def repeat(start_frame: float, end_frame: float) -> float: ...
def repeatt(start_time: float, end_time: float) -> float: ...
def spline() -> float: ...
def vmatch() -> float: ...
def vmatchin() -> float: ...
def vmatchout() -> float: ...
def helpServerUrl() -> str: ...
def hscriptCommandHelp(command_name: str) -> str: ...
def hscript(command: str) -> Tuple[str, ...]: ...
def almostEqual(x: float, y: float) -> bool: ...
def fileReferences(project_dir_variable: str="Any", include_all_refs: bool=True) -> Tuple[Tuple[Parm, str], ...]: ...
def findFile(file_name: str) -> str: ...
def findFiles(file_name: str) -> Tuple[str, ...]: ...
def findFilesWithExtension(file_extension: str, subdirectory: Optional[str]=None) -> Tuple[str, ...]: ...
def findDirectory(directory_name: str) -> str: ...
def findDirectories(directory_name: str) -> Tuple[str, ...]: ...
def houdiniPath(path_variable: Optional[str]=None) -> Tuple[str, ...]: ...
def homeHoudiniDirectory() -> str: ...
def readFile(file_path: str) -> str: ...
def readBinaryFile(file_path: str) -> str: ...
def saveCPIODataToString(data_tuples: Sequence[Tuple[str, str]]) -> str: ...
def loadIndexDataFromFile(file_path: str) -> dict: ...
def saveIndexDataToString(data_dict: Dict[str, str]) -> str: ...
def saveIndexDataToFile(file_path: str, index_data: Dict[str, str]) -> None: ...
def vexContexts() -> Tuple[VexContext, ...]: ...
def vexContextForShaderType(shader_type: EnumValue) -> Optional[VexContext]: ...
def vexContextForNodeTypeCategory(node_type_category: NodeTypeCategory) -> Union[VexContext,None]: ...
def convertClipData(data: str, from_binary: bool, from_blosc_compression: bool, to_binary: bool, to_blosc_compression: bool) -> str: ...
def convertKeyframesToClipData(keyframe_map: Dict[str, Sequence[Keyframe]], binary: bool=True, use_blosc_compression: bool=True) -> str: ...
def setSessionModuleSource(source: str) -> None: ...
def appendSessionModuleSource(source: str) -> None: ...
def sessionModuleSource() -> str: ...
def compareNode(path: str, dest: Optional[str]=None) -> Any: ...
def compareNodeBackup(path: str, index: int, dest: Optional[str]=None) -> Any: ...
def compareHDA(path_left: str, path_right: str, dest: Optional[str]=None) -> Any: ...
def compareHDABackup(path: str, index: int, dest: Optional[str]=None) -> Any: ...
def compareHip(dest: Optional[str]=None) -> Any: ...
def compareHipBackup(index: int, dest: Optional[str]=None) -> Any: ...
def hasContextOption(option: str) -> bool: ...
def contextOptionNames() -> Tuple[str, ...]: ...
def setContextOption(option: str, value: str) -> None: ...
def removeContextOption(option: str, value) -> None: ...
def contextOptionConfig(option: str) -> str: ...
def setContextOptionConfig(option: str, config: str) -> None: ...
def isAutoContextOption(option: str) -> bool: ...
def isAutoContextOptionOverridden(option: str) -> bool: ...
def removeAllContextOptionChangeCallbacks() -> None: ...
def getPreferenceNames() -> Tuple[str, ...]: ...
def getPreference(name: str) -> str: ...
def setPreference(name: str, value: str) -> bool: ...
def addPreference(name: str, value: str) -> bool: ...
def removePreference(name: str) -> bool: ...
def startHoudiniEngineDebugger(portOrPipeName: Union[int, str]) -> None: ...
def userName(alpha: bool=True) -> str: ...
def machineName(alpha: bool=True) -> str: ...
def createAnimationLayers(path: str="Any") -> Node: ...
def addAnimationLayer(layermixer: Node, layername: str="Any") -> Node: ...
def removeAnimationLayer(layermixer: Node, layername: str, mergedown: bool=False) -> bool: ...
def createAnimationClip(path: str="Any", set_export: bool=False) -> Node: ...

def set_instance_attr(self, name: str, value) -> None: ...  ## Added by typing stub update
def set_class_attr(cls, name: str, value) -> None: ...  ## Added by typing stub update
def update_wrapper(dest, src) -> None: ...  ## Added by typing stub update
def wrapper_f(*args, **kw) -> None: ...  ## Added by typing stub update
def expandString(text: str) -> str: ...  ## Added by typing stub update
def expandStringAtFrame(text: str, frame_number: float) -> str: ...  ## Added by typing stub update
