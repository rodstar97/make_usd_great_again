from typing import Any, Iterable, Iterator, List, Optional, Sized, TypeVar, Union, overload
from typing_extensions import Literal
from _nuke import Knob
from _curvelib import AnimAttributes, AnimCTransform, AnimControlPoint, CubicCurve

ElementT = TypeVar('ElementT', bound='Element')

class CurveKnob(Knob):
    curveWidget: CurveWidget
    rootLayer: Layer
    def changed(self) -> None: ...
    def getSelected(self) -> List[Element]: ...
    def toElement(self, path: str) -> Optional[Element]: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class CurveWidget(Element):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self) -> None: ...
    def getSelectedItems(self) -> List[str]: ...
    def remove(self) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Element:
    locked: bool
    name: str
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def clone(self: ElementT) -> ElementT: ...
    def getVisible(self, time: float) -> bool: ...
    def serialise(self) -> str: ...
    def setVisible(self, time: float, value: bool) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Layer(Element, Sized, Iterable[Element]):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, element: Element) -> None: ...
    def getAttributes(self) -> AnimAttributes: ...
    def getFlag(self, flag) -> bool: ...
    def getTransform(self) -> AnimCTransform: ...
    def insert(self, index: int, element: Element) -> None: ...
    def remove(self, index: int) -> None: ...
    def removeAll(self) -> None: ...
    def setFlag(self, flag, value) -> None: ...
    def setTransform(self, transfor: AnimCTransform) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __getitem__(self, index: int) -> Element: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Element]: ...
    def __setattr__(self, name, value) -> Any: ...

class Shape(Element, Sized, Iterable[ShapeControlPoint]):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, shapeControlPoint) -> None: ...
    @overload
    def evaluate(self, curveNum: Union[Literal[0], Literal[1]], time: float) -> CubicCurve: ...
    @overload
    def evaluate(self, curveNum: Union[Literal[0], Literal[1]], time: float, viewName: Optional[str]) -> CubicCurve: ...
    def getAttributes(self) -> AnimAttributes: ...
    def getFlag(self, flag) -> bool: ...
    def getTransform(self) -> AnimCTransform: ...
    def insert(self, index: int, shapeControlPoint) -> None: ...
    def remove(self, index: int) -> None: ...
    def setFlag(self, flag, value) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __getitem__(self, index: int) -> ShapeControlPoint: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[ShapeControlPoint]: ...
    def __setattr__(self, name, value) -> Any: ...

class ShapeControlPoint:
    center: AnimControlPoint
    featherCenter: AnimControlPoint
    featherLeftTangent: AnimControlPoint
    featherRightTangent: AnimControlPoint
    leftTangent: AnimControlPoint
    rightTangent: AnimControlPoint
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Stroke(Element, Sized, Iterable[AnimControlPoint]):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, controlPoint: AnimControlPoint) -> None: ...
    @overload
    def evaluate(self, time: int) -> CubicCurve: ...
    @overload
    def evaluate(self, time: int, viewName: Optional[str]) -> CubicCurve: ...
    def getAttributes(self) -> AnimAttributes: ...
    def getFlag(self, flag) -> bool: ...
    def getTransform(self) -> AnimCTransform: ...
    def insert(self, index: int, controlPoint: AnimControlPoint) -> None: ...
    def remove(self, index: int) -> None: ...
    def setFlag(self, flag, value) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __getitem__(self, index: int) -> AnimControlPoint: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[AnimControlPoint]: ...
    def __setattr__(self, name, value) -> Any: ...
