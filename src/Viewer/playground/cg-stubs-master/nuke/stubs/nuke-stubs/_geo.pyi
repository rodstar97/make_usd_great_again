from typing import Any, ClassVar, List, Optional, Tuple

class AttrGroup:
    Group_Attributes: ClassVar[int] = ...
    Group_Last: ClassVar[int] = ...
    Group_Matrix: ClassVar[int] = ...
    Group_None: ClassVar[int] = ...
    Group_Object: ClassVar[int] = ...
    Group_Points: ClassVar[int] = ...
    Group_Primitives: ClassVar[int] = ...
    Group_Vertices: ClassVar[int] = ...

class AttrType:
    eFloatAttrib: ClassVar[int] = ...
    eIntAttrib: ClassVar[int] = ...
    eInvalidAttrib: ClassVar[int] = ...
    eMatrix3Attrib: ClassVar[int] = ...
    eMatrix4Attrib: ClassVar[int] = ...
    eNormalAttrib: ClassVar[int] = ...
    ePointerAttrib: ClassVar[int] = ...
    eStringAttrib: ClassVar[int] = ...
    eVector2Attrib: ClassVar[int] = ...
    eVector3Attrib: ClassVar[int] = ...
    eVector4Attrib: ClassVar[int] = ...

class AttribContext:
    attribute: Any
    channel: Any
    group: Any
    name: Any
    recursive: Any
    type: Any
    varying: Any
    def empty(self) -> bool: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Attribute:
    name: Any
    type: Any
    def invalid(self) -> bool: ...
    def valid(self) -> bool: ...
    def __delattr__(self, name) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __len__(self) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class GeoInfo:
    def attribContext(self, name: str, group: int, type: int) -> Optional[AttribContext]: ...
    def normals(self, *args, **kwargs) -> Any: ...
    def points(self) -> PointList: ...
    def primitives(self) -> Tuple[Primitive, ...]: ...
    def transform(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class GeometryList:
    def __delattr__(self, name) -> Any: ...
    def __getitem__(self, index: int) -> GeoInfo: ...
    def __len__(self) -> int: ...
    def __setattr__(self, name, value) -> Any: ...

class PointList:
    def __delattr__(self, name) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __len__(self) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class Primitive:
    def averageCenter(self, *args, **kwargs) -> Any: ...
    def faceAverageCenter(self, *args, **kwargs) -> Any: ...
    def faceVertices(self, faceIndex) -> List[int]: ...
    def faces(self) -> int: ...
    def normal(self, *args, **kwargs) -> Any: ...
    def points(self) -> List[int]: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

def bestFitPlane(*args, **kwargs) -> Any: ...
