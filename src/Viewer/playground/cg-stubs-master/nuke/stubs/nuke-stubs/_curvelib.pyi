from typing import Any, ClassVar, List, Union, overload
from _nuke import Hash

class AnimAttributes:
    kAlphaAttribute: ClassVar[str] = ...
    kAlphaOverlayAttribute: ClassVar[str] = ...
    kBlendingModeAttribute: ClassVar[str] = ...
    kBlueAttribute: ClassVar[str] = ...
    kBlueOverlayAttribute: ClassVar[str] = ...
    kBrushSizeAttribute: ClassVar[str] = ...
    kBrushSpacingAttribute: ClassVar[str] = ...
    kBrushTypeAttribute: ClassVar[str] = ...
    kBuildUpAttribute: ClassVar[str] = ...
    kDynamicHardnessAttribute: ClassVar[str] = ...
    kDynamicSizeAttribute: ClassVar[str] = ...
    kDynamicTransparencyAttribute: ClassVar[str] = ...
    kEffectParameter1Attribute: ClassVar[str] = ...
    kEffectParameter2Attribute: ClassVar[str] = ...
    kEffectParameter3Attribute: ClassVar[str] = ...
    kFeatherFallOffAttribute: ClassVar[str] = ...
    kFeatherOnAttribute: ClassVar[str] = ...
    kFeatherTypeAttribute: ClassVar[str] = ...
    kFeatherXAttribute: ClassVar[str] = ...
    kFeatherYAttribute: ClassVar[str] = ...
    kGreenAttribute: ClassVar[str] = ...
    kGreenOverlayAttribute: ClassVar[str] = ...
    kHardnessAttribute: ClassVar[str] = ...
    kInvertedAttribute: ClassVar[str] = ...
    kLifeTimeMAttribute: ClassVar[str] = ...
    kLifeTimeNAttribute: ClassVar[str] = ...
    kLifeTimeTypeAttribute: ClassVar[str] = ...
    kMotionBlurAttribute: ClassVar[str] = ...
    kMotionBlurOnAttribute: ClassVar[str] = ...
    kMotionBlurShutterAttribute: ClassVar[str] = ...
    kMotionBlurShutterOffsetAttribute: ClassVar[str] = ...
    kMotionBlurShutterOffsetTypeAttribute: ClassVar[str] = ...
    kNumberOfViewsAttribute: ClassVar[str] = ...
    kOpacityAttribute: ClassVar[str] = ...
    kPlanarTrackLayerAttribute: ClassVar[str] = ...
    kRedAttribute: ClassVar[str] = ...
    kRedOverlayAttribute: ClassVar[str] = ...
    kSourceAttribute: ClassVar[str] = ...
    kSourcePivotPointXAttribute: ClassVar[str] = ...
    kSourcePivotPointYAttribute: ClassVar[str] = ...
    kSourceRotateAttribute: ClassVar[str] = ...
    kSourceScaleXAttribute: ClassVar[str] = ...
    kSourceScaleYAttribute: ClassVar[str] = ...
    kSourceSkewOrderAttribute: ClassVar[str] = ...
    kSourceSkewXAttribute: ClassVar[str] = ...
    kSourceSkewYAttribute: ClassVar[str] = ...
    kSourceTimeOffsetAttribute: ClassVar[str] = ...
    kSourceTimeOffsetTypeAttribute: ClassVar[str] = ...
    kSourceTranslateRoundAttribute: ClassVar[str] = ...
    kSourceTranslateXAttribute: ClassVar[str] = ...
    kSourceTranslateYAttribute: ClassVar[str] = ...
    kTensionAttribute: ClassVar[str] = ...
    kViewAttribute: ClassVar[str] = ...
    kVisibleAttribute: ClassVar[str] = ...
    kWriteOnEndAttribute: ClassVar[str] = ...
    kWriteOnStartAttribute: ClassVar[str] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, name, value) -> None: ...
    @overload
    def addKey(self, time, name, value, view) -> None: ...
    @overload
    def addKey(time, view) -> None: ...
    def getCurve(self, attr, view) -> AnimCurve: ...
    def getKeyTime(self, index, keyIndexOrHash, view) -> float: ...
    def getName(self, index) -> str: ...
    def getNumberOfKeys(self, attr, view) -> int: ...
    def getValue(self, time, indexOrName, view) -> float: ...
    def remove(self, attributeIndexOrName) -> None: ...
    def removeAll(self) -> None: ...
    def removeKey(self, time, attributeIndex, view) -> None: ...
    def removeKeys(self, attributeIndex, view) -> None: ...
    def reset(self) -> None: ...
    def set(self, time, attributeIndexOrName, value, view) -> None: ...
    def setCurve(self, index, curve, view) -> None: ...
    def setKey(self, time, attributeIndex, hash, value, view) -> None: ...
    def setName(self, attributeIndex, newName) -> None: ...
    def __contains__(self, other) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __len__(self) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class AnimCTransform:
    name: str
    rotationOrder: int
    transformOrder: int
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def addPivotPointKey(self, time: float, x: float, y: float, pressure: float, view: str = ...) -> None: ...
    def addRotationKey(self, time: float, x: float, y: float, pressure: float, view: str = ...) -> None: ...
    def addScaleKey(self, time: float, x: float, y: float, pressure: float, view: str = ...) -> None: ...
    def addSkewXKey(self, time: float, x: float, y: float, pressure: float, view: str = ...) -> None: ...
    def addTransformKey(self, time: float, view: str = ...) -> None: ...
    def addTranslationKey(self, time: float, x: float, y: float, pressure: float, view: str = ...) -> None: ...
    def evaluate(self, time: float, view: str = ...) -> CTransform: ...
    def getExtraMatrixAnimCurve(self, i: int, j: int, view: str = ...) -> AnimCurve: ...
    def getNumberOfPivotPointKeys(self, view: str = ...) -> int: ...
    def getNumberOfRotationKeys(self, view: str = ...) -> int: ...
    def getNumberOfScaleKeys(self, view: str = ...) -> int: ...
    def getNumberOfSkewXKeys(self, view: str = ...) -> int: ...
    def getNumberOfTransformKeys(self, view: str = ...) -> int: ...
    def getNumberOfTranslationKeys(self, view: str = ...) -> int: ...
    def getPivotPointAnimCurve(self, index: int, view: str = ...) -> AnimCurve: ...
    def getPivotPointKeyTime(self, index: int, view: str = ...) -> float: ...
    def getPivotPointKeyTimes(self, view: str = ...) -> List[float]: ...
    def getRotationAnimCurve(self, index: int, view: str = ...) -> AnimCurve: ...
    def getRotationKeyTime(self, index: int, view: str = ...) -> float: ...
    def getRotationKeyTimes(self, view: str = ...) -> List[float]: ...
    def getScaleAnimCurve(self, index: int, view: str = ...) -> AnimCurve: ...
    def getScaleKeyTime(self, index: int, view: str = ...) -> float: ...
    def getScaleKeyTimes(self, view: str = ...) -> List[float]: ...
    def getSkewXAnimCurve(self, index: int, view: str = ...) -> AnimCurve: ...
    def getSkewXKeyTime(self, index: int, view: str = ...) -> float: ...
    def getSkewXKeyTimes(self, view: str = ...) -> List[float]: ...
    def getTransformKeyTime(self, index: int, view: str = ...) -> float: ...
    def getTransformKeyTimes(self, view: str = ...) -> List[float]: ...
    def getTranslationAnimCurve(self, index: int, view: str = ...) -> AnimCurve: ...
    def getTranslationKeyTime(self, index: int, view: str = ...) -> float: ...
    def getTranslationKeyTimes(self, view: str = ...) -> List[float]: ...
    def isDefault(self) -> bool: ...
    def removePivotPointKey(self, time: float, view: str = ...) -> None: ...
    def removeRotationKey(self, time: float, view: str = ...) -> None: ...
    def removeScaleKey(self, time: float, view: str = ...) -> None: ...
    def removeSkewXKey(self, time: float, view: str = ...) -> None: ...
    def removeTransformKey(self, time: float, view: str = ...) -> None: ...
    def removeTranslationKey(self, time: float, view: str = ...) -> None: ...
    def reset(self) -> None: ...
    def setExtraMatrixAnimCurve(self, i: int, j: int, animcurve: AnimCurve, view: str = ...) -> None: ...
    def setIdentity(self, view: str = ...) -> None: ...
    def setPivotPointAnimCurve(self, index: int, animCurve: AnimCurve, view: str = ...) -> None: ...
    def setRotationAnimCurve(self, index: int, animCurve: AnimCurve, view: str = ...) -> None: ...
    def setScaleAnimCurve(self, index: int, animCurve: AnimCurve, view: str = ...) -> None: ...
    def setSkewXAnimCurve(self, index: int, animCurve: AnimCurve, view: str = ...) -> None: ...
    def setTranslationAnimCurve(self, index: int, animCurve: AnimCurve, view: str = ...) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class AnimControlPoint(Flag):
    dim: int
    hash: Hash
    name: str
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def addControlPoint(self, controlPoint) -> None: ...
    def addKey(self, time, controlPointOrDim, view) -> None: ...
    def addPositionKey(self, time, positionOrDim, view) -> None: ...
    def evaluate(self, time, view) -> ControlPoint: ...
    def getControlPointKeyTimes(self, view: str = ...) -> List[float]: ...
    def getPosition(self, time: float, view: str = ...) -> CVec3: ...
    def getPositionAnimCurve(self, index: int, view: str = ...) -> AnimCurve: ...
    def getPositionKeyTime(self, index: int, keyIndex: int, view: str = ...) -> float: ...
    def removeAllKeys(self, view: str = ...) -> None: ...
    def removeKey(self, time: float, view: str = ...) -> None: ...
    def removePositionKey(self, time: float, view: str = ...) -> None: ...
    def reset(self) -> None: ...
    def setPosition(self, position, view) -> None: ...
    def setPositionAnimCurve(self, index, animCurve, view) -> None: ...
    def setPositionKey(self, time, index, value, id, view) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class AnimCurve(BaseCurve):
    constantValue: float
    expressionString: str
    kDefaultConstantValue: ClassVar[float] = ...
    useExpression: bool
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def addKey(self, time: float, value) -> Hash: ...
    @overload
    def addKey(self, keyObj: AnimCurveKey) -> Hash: ...
    def evaluate(self, time) -> float: ...
    def evaluateY(self, time) -> float: ...
    def getKey(self, index) -> AnimCurveKey: ...
    def getNumberOfKeys(self) -> int: ...
    def isDefault(self) -> bool: ...
    def removeAllKeys(self) -> None: ...
    def removeKey(self, timeOrHash) -> None: ...
    def reset(self) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class AnimCurveKey(Flag):
    interpolationType: Any
    kDefaultAnimCurveKeyInterpolation: ClassVar[int] = ...
    kDefaultAnimCurveKeyTime: ClassVar[float] = ...
    kDefaultAnimCurveKeyValue: ClassVar[float] = ...
    la: float
    lslope: float
    ra: float
    rslope: float
    time: float
    value: float
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class AnimCurveViews:
    kDefaultViewName: ClassVar[str] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def getNumberOfViews(self) -> int: ...
    def getViewIndex(self, name) -> int: ...
    def getViewName(self, index) -> str: ...
    def getViewNames(self) -> List[str]: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class BaseCurve(Flag):
    curveTension: float
    curveType: int
    kDefaultCurveFlag: ClassVar[int] = ...
    kDefaultCurveTension: ClassVar[float] = ...
    kDefaultCurveType: ClassVar[int] = ...
    name: str
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class CMatrix4:
    def __hash__(self): ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def makeIdentity(self) -> None: ...
    def rotateX(self, angleInRadians) -> None: ...
    def rotateY(self, angleInRadians) -> None: ...
    def rotateZ(self, *args, **kwargs) -> Any: ...
    def scale(self, x, y, z) -> None: ...
    def skew(self, x, y, z) -> None: ...
    def translate(self, x, y, z) -> None: ...
    def translation(self, x, y, z) -> None: ...
    def transpose(self) -> None: ...
    def __add__(self, other) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __isub__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sub__(self, other) -> Any: ...

class CTransform:
    name: str
    pivotPoint: CVec3
    rotation: CVec3
    rotationOrder: int
    scale: CVec3
    skew: CVec3
    transformOrder: int
    translation: CVec3
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def getInverseMatrix(self) -> CMatrix4: ...
    def getMatrix(self) -> CMatrix4: ...
    def getTransposeMatrix(self) -> CMatrix4: ...
    def isDefault(self) -> bool: ...
    def reset(self) -> None: ...
    def setIdentity(self) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class CVec2:
    x: float
    y: float
    def __hash__(self): ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __add__(self, other) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __isub__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sub__(self, other) -> Any: ...

class CVec3:
    x: float
    y: float
    z: float
    def __hash__(self): ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __add__(self, other: CVec3) -> CVec3: ...
    def __delattr__(self, name) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __div__(self, other: Union[CVec3, float]) -> CVec3: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, index: int) -> float: ...
    def __gt__(self, other) -> bool: ...
    def __iadd__(self, other: CVec3) -> CVec3: ...
    def __isub__(self, other: CVec3) -> CVec3: ...
    def __le__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> bool: ...
    def __mul__(self, other: Union[CVec3, float]) -> CVec3: ...
    def __ne__(self, other) -> bool: ...
    def __neg__(self) -> CVec3: ...
    def __radd__(self, other: CVec3) -> CVec3: ...
    def __rmul__(self, other: Union[CVec3, float]) -> CVec3: ...
    def __rsub__(self, other: CVec3) -> CVec3: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sub__(self, other: CVec3) -> CVec3: ...
    def __truediv__(self, other: Union[CVec3, float]) -> CVec3: ...


class CVec4:
    w: float
    x: float
    y: float
    z: float
    def __hash__(self): ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __add__(self, other) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __isub__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sub__(self, other) -> Any: ...

class ControlPoint:
    dim: int
    hash: Hash
    name: str
    position: CVec3
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class CorrespondencePoints:
    def addPoint(self, time, t_src, t_dest) -> Any: ...
    def getAnimCurve(self, index, which) -> AnimCurve: ...
    def getNumPoints(self) -> Any: ...
    def getPointValues(self, *args, **kwargs) -> Any: ...
    def modifyPoint(self, time, index, which, t) -> Any: ...
    def removePoint(self, index) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class CubicCurve:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def getPoint(self, t) -> CVec4: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class CurveType:
    eBSplineCurveType: ClassVar[int] = ...
    eBezierCurveType: ClassVar[int] = ...
    eCardinalCurveType: ClassVar[int] = ...
    eCatmullRomCurveType: ClassVar[int] = ...
    eHermiteCurveType: ClassVar[int] = ...
    eNurbsCurveType: ClassVar[int] = ...
    eUndefineCurveType: ClassVar[int] = ...

class ExtrapolationType:
    eConstantExtrapolationType: ClassVar[int] = ...
    eCycleExtrapolationType: ClassVar[int] = ...
    eLinearExtrapolationType: ClassVar[int] = ...
    eUndefineExtrapolationType: ClassVar[int] = ...

class Flag:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def getFlag(self, flag) -> bool: ...
    def setFlag(self, flag, value) -> None: ...
    def __delattr__(self, name) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...

class FlagType:
    eActiveFlag: ClassVar[int] = ...
    eBreakFlag: ClassVar[int] = ...
    eKeySelectedFlag: ClassVar[int] = ...
    eLeftTangentSelectedFlag: ClassVar[int] = ...
    eLockedFlag: ClassVar[int] = ...
    eMaxFlag: ClassVar[int] = ...
    eNukeAnimCurveEvalFlag: ClassVar[int] = ...
    eOpenFlag: ClassVar[int] = ...
    ePressureInZFlag: ClassVar[int] = ...
    eRelativeTangentFlag: ClassVar[int] = ...
    eRenderableFlag: ClassVar[int] = ...
    eRightTangentSelectedFlag: ClassVar[int] = ...
    eSelectedFlag: ClassVar[int] = ...
    eTangentLengthLockFlag: ClassVar[int] = ...
    eUndefineFlag: ClassVar[int] = ...
    eVisibleFlag: ClassVar[int] = ...

class InterpolationType:
    eCubicInterpolationType: ClassVar[int] = ...
    eLinearInterpolationType: ClassVar[int] = ...
    eStepInterpolationType: ClassVar[int] = ...
    eUndefineInterpolationType: ClassVar[int] = ...

class RotationOrder:
    eUndefineRotationOrder: ClassVar[int] = ...
    eXYZRotationOrder: ClassVar[int] = ...
    eXZYRotationOrder: ClassVar[int] = ...
    eYXZRotationOrder: ClassVar[int] = ...
    eYZXRotationOrder: ClassVar[int] = ...
    eZXYRotationOrder: ClassVar[int] = ...
    eZYXRotationOrder: ClassVar[int] = ...

class TransformOrder:
    eRSTTransformOrder: ClassVar[int] = ...
    eRTSTransformOrder: ClassVar[int] = ...
    eSRTTransformOrder: ClassVar[int] = ...
    eSTRTransformOrder: ClassVar[int] = ...
    eTRSTransformOrder: ClassVar[int] = ...
    eTSRTransformOrder: ClassVar[int] = ...
    eUndefineTransformOrder: ClassVar[int] = ...
